Skip to content

Home
Dashboard
HomePaymentsConnect
Enable other businesses to accept payments directly
Facilitate direct payments between other businesses and their own customers.


Web

iOS

Android
This guide covers letting your users accept payments, moving a portion of your users’ earnings into your balance, and paying out the remainder to your users’ bank accounts. To illustrate these concepts, we’ll use an example platform that lets businesses build their own online stores.

Prerequisites








Adding a business SamTradersSmcPvtLtd, Rizqshops.logo, and brand color is black/yellow for Connect Onboarding.
Set up Stripe
Server-side
Install Stripe’s official libraries so you can access the API from your application:


Ruby

Python

PHP

Java

Node

Go

.NET
Command Line


# Available as a gem
sudo gem install stripe
Gemfile


# If you use bundler, you can add this line to your Gemfile
gem 'stripe'
Create a connected account
When a user (seller or service provider) signs up on your platform, create a user Account (referred to as a connected account) so you can accept payments and move funds to their bank account. Connected accounts represent your user in Stripe’s API and help facilitate the collection of onboarding requirements so Stripe can verify the user’s identity. In our store builder example, the connected account represents the business setting up their Internet store.

Screenshot of Connect Onboarding form
Create a connected Standard account and prefill information
Use the /v1/accounts API to create a Standard account and set type to standard in the account creation request.


curl

Stripe CLI

Ruby

Python

PHP

Java

Node

Go

.NET
Command Line



curl https://api.stripe.com/v1/accounts \
  -u "sk_test_51NjkyXDtk01xQ3OYUCeJcKS6VBldRJOP93CiKqzFI2BCWNGdZPVc9ayJZh85ZRp5c1k65ExBR9jpEYL69Y8WoLug00swQBqVBP:" \
  -d type=standard
If you’ve already collected information for your connected accounts, you can prefill that information on the account object for the user. Connect Onboarding won’t ask for the prefilled information during account onboarding. The account holder confirms the prefilled information before accepting the Connect service agreement. You can prefill any information on the account, including personal and business information, external account information, and more.

Create an account link
You can create an account link by calling the Account Links API with the following parameters:

account
refresh_url
return_url
type = account_onboarding

curl

Stripe CLI

Ruby

Python

PHP

Java

Node

Go

.NET
Command Line



curl https://api.stripe.com/v1/account_links \
  -u "sk_test_51NjkyXDtk01xQ3OYUCeJcKS6VBldRJOP93CiKqzFI2BCWNGdZPVc9ayJZh85ZRp5c1k65ExBR9jpEYL69Y8WoLug00swQBqVBP:" \
  -d account={{CONNECTED_ACCOUNT_ID}} \
  --data-urlencode refresh_url="https://example.com/reauth" \
  --data-urlencode return_url="https://example.com/return" \
  -d type=account_onboarding
Redirect your user to the account link URL
The response to your Account Links request includes a value for the key url. Redirect to this link to send your user into the flow. Account Links are temporary and are single-use only because they grant access to the connected account user’s personal information. Authenticate the user in your application before redirecting them to this URL. If you want to prefill information, you must do so before generating the account link. After you create the account link for a Standard account, you won’t be able to read or write information for the account.

Warning
Don’t email, text, or otherwise send account link URLs directly to your user. Instead, redirect the authenticated user to the account link URL from within your platform’s application.

Handle the user returning to your platform
Connect Onboarding requires you to pass both a return_url and refresh_url to handle all cases where the user is redirected to your platform. It’s important that you implement these correctly to provide the best experience for your user.

Note
You can use HTTP for your return_url and refresh_url while in test mode (for example, to test with localhost), but live mode only accepts HTTPS. Be sure to swap testing URLs for HTTPS URLs before going live.

return_url
Stripe issues a redirect to this URL when the user completes the Connect Onboarding flow. This doesn’t mean that all information has been collected or that there are no outstanding requirements on the account. This only means the flow was entered and exited properly.

No state is passed through this URL. After a user is redirected to your return_url, check the state of the details_submitted parameter on their account by doing either of the following:

Listening to account.updated webhooks
Calling the Accounts API and inspecting the returned object
refresh_url
Your user is redirected to the refresh_url in these cases:

The link is expired (a few minutes went by since the link was created)
The user already visited the link (the user refreshed the page or clicked back or forward in the browser)
Your platform is no longer able to access the account
The account has been rejected
Your refresh_url should trigger a method on your server to call Account Links again with the same parameters, and redirect the user to the Connect Onboarding flow to create a seamless experience.

Handle users that haven’t completed onboarding
A user that is redirected to your return_url might not have completed the onboarding process. Use the /v1/accounts endpoint to retrieve the user’s account and check for charges_enabled. If the account isn’t fully onboarded, provide UI prompts to allow the user to continue onboarding later. The user can complete their account activation through a new account link (generated by your integration). You can check the state of the details_submitted parameter on their account to see if they’ve completed the onboarding process.

Enable payment methods
View your payment methods settings and enable the payment methods you want to support. Card payments are enabled by default but you can enable and disable payment methods as needed. This guide assumes Bancontact, credit cards, EPS, giropay, iDEAL, Przelewy24, SEPA Direct Debit, and Sofort are enabled.

Before the payment form is displayed, Stripe evaluates the currency, payment method restrictions, and other parameters to determine the list of supported payment methods. Payment methods that increase conversion and that are most relevant to the currency and customer’s location are prioritized. Lower priority payment methods are hidden in an overflow menu.

Accept a payment
Use Stripe Checkout, a prebuilt Stripe-hosted page, to accept payments. Checkout supports multiple payment methods and automatically shows the most relevant ones to your customer. You can also use the Payment Element, a prebuilt UI component that is embedded as an iframe in your payment form, to accept multiple payment methods with a single frontend integration.


Checkout

Payment Element
Create a Checkout Session
Client-side
Server-side
A Checkout Session controls what your customer sees in the Stripe-hosted payment page such as line items, the order amount and currency, and acceptable payment methods. When performing direct charges, Checkout uses the connected account’s branding settings. See the Customize branding section for more information.

Unlike destination charges and separate charges and transfers, connected accounts are responsible for handling disputes on direct charges—it’s not the responsibility of the platform.

Add a checkout button to your website that calls a server-side endpoint to create a Checkout Session.

checkout.html


<html>
  <head>
    <title>Checkout</title>
  </head>
  <body>
    <form action="/create-checkout-session" method="POST">
      <button type="submit">Pay</button>
    </form>
  </body>
</html>
On your server, make the following call to the Stripe API. After creating a Checkout Session, redirect your customer to the URL returned in the response.


curl

Stripe CLI

Ruby

Python

PHP

Java

Node

Go

.NET
Command Line



curl https://api.stripe.com/v1/checkout/sessions \
  -u "sk_test_51NjkyXDtk01xQ3OYUCeJcKS6VBldRJOP93CiKqzFI2BCWNGdZPVc9ayJZh85ZRp5c1k65ExBR9jpEYL69Y8WoLug00swQBqVBP:" \
  -H "Stripe-Account: {{CONNECTED_ACCOUNT_ID}}" \
  -d mode=payment \
  -d "line_items[0][price]"={{PRICE_ID}} \
  -d "line_items[0][quantity]"=1 \
  -d "payment_intent_data[application_fee_amount]"=123 \
  --data-urlencode success_url="https://example.com/success" \
  --data-urlencode cancel_url="https://example.com/cancel"
line_items - This argument represents items that your customer is purchasing and that will show up in the hosted user interface.
success_url - This argument redirects a user after they complete a payment.
cancel_url - This argument redirects a user after they click cancel.
Stripe-Account - This header indicates a direct charge for your connected account. With direct charges, the connected account is responsible for Stripe fees, refunds, and chargebacks. The connected account’s branding is used in Checkout, which allows their customers to feel like they’re interacting directly with the merchant instead of your platform.
(Optional) payment_intent_data[application_fee_amount] - This argument specifies the amount your platform plans to take from the transaction. After the payment is processed on the connected account, the application_fee_amount is transferred to the platform and the Stripe fee is deducted from the connected account’s balance.
Account creation flow
Handle post-payment events
Server-side
Stripe sends a checkout.session.completed event when the payment completes. Use a webhook to receive these events and run actions, like sending an order confirmation email to your customer, logging the sale in a database, or starting a shipping workflow.

Listen for these events rather than waiting on a callback from the client. On the client, the customer could close the browser window or quit the app before the callback executes. Some payment methods also take 2-14 days for payment confirmation. Setting up your integration to listen for asynchronous events enables you to accept multiple payment methods with a single integration.

In addition to handling the checkout.session.completed event, we recommend handling two other events when collecting payments with Checkout:

EVENT	DESCRIPTION	NEXT STEPS
checkout.session.completed	The customer has successfully authorized the payment by submitting the Checkout form.	Wait for the payment to succeed or fail.
checkout.session.async_payment_succeeded	The customer’s payment succeeded.	Fulfill the purchased goods or services.
checkout.session.async_payment_failed	The payment was declined, or failed for some other reason.	Contact the customer through email and request that they place a new order.
These events all include the Checkout Session object. After the payment succeeds, the underlying PaymentIntent status changes from processing to succeeded.

Testing
Test your account creation flow by creating accounts and using OAuth. Test your payment method settings for your connected accounts by logging into one of your test accounts and navigating to the payment method settings. Test your checkout flow with your test keys and a test account. You can use the available test cards to test your payments flow and simulate various payment outcomes.

Payouts
By default, any charge that you create for a connected account accumulates in the connected account’s Stripe balance and is paid out on a daily rolling basis. Standard accounts manage their own payout schedules in their Dashboard.

See also
Manage connected accounts in the Dashboard
Issue refunds
Customize statement descriptors
Work with multiple currencies
Was this page helpful?

Yes

No
Need help? Contact Support.
Watch our developer tutorials.
Check out our product changelog.
Questions? Contact Sales.


Sign up for developer updates:
mubashir18@live.com

Sign up
You can unsubscribe at any time. Read our privacy policy.
