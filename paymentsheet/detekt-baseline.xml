<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:BaseSheetViewModel.kt$BaseSheetViewModel$stripeIntentValue != null &amp;&amp; paymentMethodsValue != null &amp;&amp; isGooglePayReadyValue != null &amp;&amp; isResourceRepositoryReadyValue != null &amp;&amp; isLinkReadyValue != null &amp;&amp; savedSelectionValue != null</ID>
    <ID>ComplexCondition:PaymentOptionsAdapter.kt$PaymentOptionsAdapter$force || position != NO_POSITION &amp;&amp; (canClickSelectedItem || position != selectedItemPosition) &amp;&amp; !isEditing</ID>
    <ID>ComplexMethod:BaseAddPaymentMethodFragment.kt$BaseAddPaymentMethodFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? )</ID>
    <ID>EmptyDefaultConstructor:PaymentOptionsListFragment.kt$PaymentOptionsListFragment$()</ID>
    <ID>EmptyDefaultConstructor:PaymentSheetAddPaymentMethodFragment.kt$PaymentSheetAddPaymentMethodFragment$()</ID>
    <ID>EmptyDefaultConstructor:PaymentSheetListFragment.kt$PaymentSheetListFragment$()</ID>
    <ID>EmptyFunctionBlock:BottomSheetController.kt$BottomSheetController.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:PrimaryButtonAnimator.kt$PrimaryButtonAnimator.&lt;no name provided>${ }</ID>
    <ID>ForbiddenComment:PaymentOptionFactory.kt$PaymentOptionFactory$// TODO: Should use labelResource paymentMethodCreateParams or extension function</ID>
    <ID>FunctionOnlyReturningConstant:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.PaymentIntentTestInput.Companion$fun toCsvHeader()</ID>
    <ID>FunctionOnlyReturningConstant:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.TestOutput.Companion$fun toCsvHeader()</ID>
    <ID>LargeClass:DefaultFlowControllerTest.kt$DefaultFlowControllerTest</ID>
    <ID>LargeClass:PaymentIntentFixtures.kt$PaymentIntentFixtures</ID>
    <ID>LargeClass:PaymentSheetActivityTest.kt$PaymentSheetActivityTest</ID>
    <ID>LargeClass:PaymentSheetViewModelTest.kt$PaymentSheetViewModelTest</ID>
    <ID>LongMethod:AddressElementActivity.kt$AddressElementActivity$@OptIn(ExperimentalAnimationApi::class) override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:AutocompleteScreen.kt$@Composable internal fun AutocompleteScreenUI(viewModel: AutocompleteViewModel)</ID>
    <ID>LongMethod:BaseAddPaymentMethodFragment.kt$BaseAddPaymentMethodFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? )</ID>
    <ID>LongMethod:BaseSheetActivity.kt$BaseSheetActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:FormViewModelTest.kt$FormViewModelTest$@ExperimentalCoroutinesApi @Test fun `Verify params are set when element address fields are complete`()</ID>
    <ID>LongMethod:FormViewModelTest.kt$FormViewModelTest$@ExperimentalCoroutinesApi @Test fun `Verify params are set when required address fields are complete`()</ID>
    <ID>LongMethod:InputAddressScreen.kt$@Composable internal fun InputAddressScreen( injector: NonFallbackInjector )</ID>
    <ID>LongMethod:PaymentOptionsActivity.kt$PaymentOptionsActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PaymentOptionsAdapter.kt$@Composable internal fun PaymentOptionUi( viewWidth: Dp, isSelected: Boolean, isEditing: Boolean, isEnabled: Boolean, iconRes: Int, @DrawableRes labelIcon: Int? = null, labelText: String = "", removePmDialogTitle: String = "", description: String, onRemoveListener: (() -> Unit)? = null, onRemoveAccessibilityDescription: String = "", onItemSelectedListener: (() -> Unit) )</ID>
    <ID>LongMethod:PaymentSheetActivity.kt$PaymentSheetActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PaymentSheetConfigurationKtx.kt$internal fun PaymentSheet.Appearance.parseAppearance()</ID>
    <ID>LongMethod:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun AccountDetailsForm( bankName: String?, last4: String?, saveForFutureUsage: Boolean )</ID>
    <ID>LongMethod:USBankAccountFormFragment.kt$USBankAccountFormFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>LongMethod:USBankAccountFormViewModel.kt$USBankAccountFormViewModel$private fun attachFinancialAccountToIntent( clientSecret: ClientSecret, intentId: String, linkAccountId: String, bankName: String?, last4: String? )</ID>
    <ID>MagicNumber:AutocompleteScreen.kt$0.07f</ID>
    <ID>MagicNumber:GooglePayButton.kt$GooglePayButton$0.5f</ID>
    <ID>MagicNumber:PaymentMethodsUI.kt$0.6F</ID>
    <ID>MagicNumber:PaymentMethodsUI.kt$100</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$0.6F</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$18</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$9</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$PaymentOptionsAdapter.Companion$100</ID>
    <ID>MagicNumber:PrimaryButton.kt$PrimaryButton$0.5f</ID>
    <ID>MagicNumber:USBankAccountFormFragment.kt$USBankAccountFormFragment$0.5f</ID>
    <ID>MaxLineLength:BillingAddressViewTest.kt$BillingAddressViewTest$fun</ID>
    <ID>MaxLineLength:ConfirmPaymentIntentParamsFactoryTest.kt$ConfirmPaymentIntentParamsFactoryTest$fun</ID>
    <ID>MaxLineLength:CustomerRepositoryTest.kt$CustomerRepositoryTest$onBlocking { detachPaymentMethod(anyString(), any(), anyString(), any()) }.doThrow(InvalidParameterException("error"))</ID>
    <ID>MaxLineLength:DefaultFlowControllerInitializerTest.kt$DefaultFlowControllerInitializerTest$fun</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$.</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$fun</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$viewModel.paymentSelection = PaymentSelection.New.Card(PaymentMethodCreateParamsFixtures.DEFAULT_CARD, mock(), mock())</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$delegate ?: throw IllegalStateException("Cannot move to state $newState since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$val d = delegate ?: throw IllegalStateException("Cannot run onActivity since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$certificate</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$hosted_voucher_url</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$message</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$native_data</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$root_certificate_authorities</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$stripe_js</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$three_ds_method_url</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$url</ID>
    <ID>MaxLineLength:PaymentOptionsViewModelTestInjection.kt$PaymentOptionsViewModelTestInjection$LpmRepository(LpmRepository.LpmRepositoryArguments(ApplicationProvider.getApplicationContext&lt;Application>().resources))</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.Address$*</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.BillingDetails$*</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.Configuration$*</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.GooglePayConfiguration$*</ID>
    <ID>MaxLineLength:PaymentSheetActivityTest.kt$PaymentSheetActivityTest$fun</ID>
    <ID>MaxLineLength:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest$// fun `when multiple supported payment methods and configuration changes it should restore selected payment method`() {</ID>
    <ID>MaxLineLength:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest.Companion$LpmRepository(LpmRepository.LpmRepositoryArguments(ApplicationProvider.getApplicationContext&lt;Application>().resources))</ID>
    <ID>MaxLineLength:PaymentSheetEventTest.kt$PaymentSheetEventTest$paymentSelection = PaymentSelection.New.Card(PaymentMethodCreateParamsFixtures.DEFAULT_CARD, mock(), mock())</ID>
    <ID>MaxLineLength:PaymentSheetViewModelTest.kt$PaymentSheetViewModelTest$fun</ID>
    <ID>MaxLineLength:PrimaryButtonTest.kt$PrimaryButtonTest$primaryButton.setAppearanceConfiguration(PaymentsThemeDefaults.primaryButtonStyle, ColorStateList.valueOf(Color.BLACK))</ID>
    <ID>MaxLineLength:SetupIntentFixtures.kt$SetupIntentFixtures$message</ID>
    <ID>MaxLineLength:SetupIntentFixtures.kt$SetupIntentFixtures$url</ID>
    <ID>MaxLineLength:StripeIntentRepositoryTest.kt$StripeIntentRepositoryTest$fun</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest$* This will generate payment intent scenarios for all combinations of customers, lpm types in the intent, shipping, and SFU states</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest$val formDescriptor = lpm.getSpecWithFullfilledRequirements(testInput.getIntent(lpm), testInput.getConfig())</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.PaymentIntentTestInput$fun toCsv()</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.PaymentIntentTestInput.Companion$fun toCsvHeader()</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.TestOutput.Companion$formShowsSaveCheckbox == false &amp;&amp; formShowsCheckboxControlledFields == true -> "merchantRequiredSave"</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$assertThat(viewModel.saveForFutureUseElement.controller.saveForFutureUse.stateIn(viewModel.viewModelScope).value).isFalse()</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$assertThat(viewModel.saveForFutureUseElement.controller.saveForFutureUse.stateIn(viewModel.viewModelScope).value).isTrue()</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$viewModel.handlePrimaryButtonClick(currentScreenState as USBankAccountFormScreenState.NameAndEmailCollection)</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$viewModel.handlePrimaryButtonClick(currentScreenState as USBankAccountFormScreenState.VerifyWithMicrodeposits)</ID>
    <ID>NestedBlockDepth:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest$private fun generatePaymentIntentScenarios(): List&lt;PaymentIntentTestInput></ID>
    <ID>ReturnCount:AddressUtils.kt$internal fun CharSequence.levenshtein(other: CharSequence): Int</ID>
    <ID>SwallowedException:PaymentOptionsActivity.kt$PaymentOptionsActivity$e: InvalidParameterException</ID>
    <ID>ThrowsCount:PaymentSheetConfigurationKtx.kt$internal fun PaymentSheet.Configuration.validate()</ID>
    <ID>TooManyFunctions:BasePaymentMethodsListFragment.kt$BasePaymentMethodsListFragment : Fragment</ID>
    <ID>TooManyFunctions:BaseSheetActivity.kt$BaseSheetActivity&lt;ResultType> : AppCompatActivity</ID>
    <ID>TooManyFunctions:BaseSheetViewModel.kt$BaseSheetViewModel&lt;TransitionTargetType> : AndroidViewModel</ID>
    <ID>TooManyFunctions:DefaultFlowController.kt$DefaultFlowController : FlowControllerInjector</ID>
    <ID>TooManyFunctions:FlowControllerComponent.kt$FlowControllerComponent$Builder</ID>
    <ID>TooManyFunctions:PaymentOptionsAdapter.kt$PaymentOptionsAdapter : Adapter</ID>
    <ID>TooManyFunctions:PaymentOptionsViewModel.kt$PaymentOptionsViewModel : BaseSheetViewModel</ID>
    <ID>TooManyFunctions:PaymentSheetViewModel.kt$PaymentSheetViewModel : BaseSheetViewModel</ID>
    <ID>TooManyFunctions:USBankAccountFormFragment.kt$USBankAccountFormFragment : Fragment</ID>
    <ID>TooManyFunctions:USBankAccountFormViewModel.kt$USBankAccountFormViewModel : ViewModel</ID>
    <ID>UnnecessaryAbstractClass:FlowControllerModule.kt$FlowControllerModule$FlowControllerModule</ID>
    <ID>UnnecessaryAbstractClass:PaymentSheetCommonModule.kt$PaymentSheetCommonModule$PaymentSheetCommonModule</ID>
    <ID>UnnecessaryAbstractClass:PaymentSheetLauncherModule.kt$PaymentSheetLauncherModule$PaymentSheetLauncherModule</ID>
    <ID>UnusedPrivateClass:PaymentOptionsViewModelTest.kt$PaymentOptionsViewModelTest$MyHostActivity : AppCompatActivity</ID>
    <ID>UnusedPrivateMember:BillingAddressViewTest.kt$BillingAddressViewTest.Companion$private val FRANCE = CountryCode.create("FR")</ID>
    <ID>UnusedPrivateMember:PaymentOptionsViewModelTestInjection.kt$PaymentOptionsViewModelTestInjection$lpmRepository: LpmRepository = mock()</ID>
    <ID>UnusedPrivateMember:PaymentOptionsViewModelTestInjection.kt$PaymentOptionsViewModelTestInjection$private val context = ApplicationProvider.getApplicationContext&lt;Context>()</ID>
    <ID>UnusedPrivateMember:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest$private fun convertPixelsToDp(px: Int, resources: Resources): Dp</ID>
    <ID>UnusedPrivateMember:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest$private fun createAmount(paymentIntent: PaymentIntent = PaymentIntentFixtures.PI_WITH_SHIPPING)</ID>
    <ID>UnusedPrivateMember:PaymentSheetViewModelTestInjection.kt$PaymentSheetViewModelTestInjection$addressRepository: AddressRepository</ID>
    <ID>UnusedPrivateMember:PaymentSheetViewModelTestInjection.kt$PaymentSheetViewModelTestInjection$lpmRepository: LpmRepository</ID>
    <ID>UnusedPrivateMember:PaymentSheetViewModelTestInjection.kt$PaymentSheetViewModelTestInjection$private val context = ApplicationProvider.getApplicationContext&lt;Context>()</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$// a fatal error protected val _fatal = MutableLiveData&lt;Throwable>()</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _amount = savedStateHandle.getLiveData&lt;Amount>(SAVE_AMOUNT)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _contentVisible = MutableLiveData(true)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _isGooglePayReady = savedStateHandle.getLiveData&lt;Boolean>(SAVE_GOOGLE_PAY_READY)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _isLinkEnabled = MutableLiveData&lt;Boolean>()</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _liveMode get() = savedStateHandle.getLiveData&lt;Boolean>(SAVE_STATE_LIVE_MODE)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED) internal val _paymentMethods = savedStateHandle.getLiveData&lt;List&lt;PaymentMethod>>(SAVE_PAYMENT_METHODS)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED) internal val _processing = savedStateHandle.getLiveData&lt;Boolean>(SAVE_PROCESSING)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$protected val _linkConfiguration = savedStateHandle.getLiveData&lt;LinkPaymentLauncher.Configuration>(LINK_CONFIGURATION)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$protected val _showLinkVerificationDialog = MutableLiveData(false)</ID>
    <ID>VariableNaming:PaymentOptionsViewModel.kt$PaymentOptionsViewModel$@VisibleForTesting internal val _paymentOptionResult = MutableLiveData&lt;PaymentOptionResult>()</ID>
    <ID>VariableNaming:PaymentSheetViewModel.kt$PaymentSheetViewModel$@VisibleForTesting internal val _paymentSheetResult = MutableLiveData&lt;PaymentSheetResult>()</ID>
    <ID>VariableNaming:PaymentSheetViewModel.kt$PaymentSheetViewModel$@VisibleForTesting internal val _viewState = MutableLiveData&lt;PaymentSheetViewState>(null)</ID>
  </CurrentIssues>
</SmellBaseline>
