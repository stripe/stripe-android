<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:BaseSheetViewModel.kt$BaseSheetViewModel$stripeIntentValue != null &amp;&amp; paymentMethodsValue != null &amp;&amp; isGooglePayReadyValue != null &amp;&amp; isResourceRepositoryReadyValue != null &amp;&amp; isLinkReadyValue != null &amp;&amp; savedSelectionValue != null</ID>
    <ID>ComplexCondition:PaymentOptionsAdapter.kt$PaymentOptionsAdapter$force || position != NO_POSITION &amp;&amp; (canClickSelectedItem || position != selectedItemPosition) &amp;&amp; !isEditing</ID>
    <ID>EmptyDefaultConstructor:PaymentOptionsListFragment.kt$PaymentOptionsListFragment$()</ID>
    <ID>EmptyDefaultConstructor:PaymentSheetAddPaymentMethodFragment.kt$PaymentSheetAddPaymentMethodFragment$()</ID>
    <ID>EmptyDefaultConstructor:PaymentSheetListFragment.kt$PaymentSheetListFragment$()</ID>
    <ID>EmptyFunctionBlock:BottomSheetController.kt$BottomSheetController.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:PrimaryButtonAnimator.kt$PrimaryButtonAnimator.&lt;no name provided>${ }</ID>
    <ID>ForbiddenComment:PaymentOptionFactory.kt$PaymentOptionFactory$// TODO: Should use labelResource paymentMethodCreateParams or extension function</ID>
    <ID>FunctionNaming:AddressElementPrimaryButton.kt$@Composable internal fun AddressElementPrimaryButton( isEnabled: Boolean, text: String, onButtonClick: () -> Unit )</ID>
    <ID>FunctionNaming:AddressOptionsAppBar.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun AddressOptionsAppBar( isRootScreen: Boolean, onButtonClick: () -> Unit )</ID>
    <ID>FunctionNaming:AddressUtils.kt$@Composable internal fun ScrollableColumn( modifier: Modifier = Modifier, content: @Composable ColumnScope.() -> Unit )</ID>
    <ID>FunctionNaming:AutocompleteScreen.kt$@Composable internal fun AutocompleteScreen( injector: NonFallbackInjector, country: String? )</ID>
    <ID>FunctionNaming:AutocompleteScreen.kt$@Composable internal fun AutocompleteScreenUI(viewModel: AutocompleteViewModel)</ID>
    <ID>FunctionNaming:EnterManuallyText.kt$@Composable internal fun EnterManuallyText( onClick: () -> Unit )</ID>
    <ID>FunctionNaming:FormUI.kt$@Composable internal fun FormInternal( hiddenIdentifiersFlow: Flow&lt;Set&lt;IdentifierSpec>>, enabledFlow: Flow&lt;Boolean>, elementsFlow: Flow&lt;List&lt;FormElement>?>, lastTextFieldIdentifierFlow: Flow&lt;IdentifierSpec?>, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FormUI.kt$@Composable internal fun Loading()</ID>
    <ID>FunctionNaming:FormUI.kt$@FlowPreview @Composable internal fun Form( formViewModel: FormViewModel, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:GooglePayDivider.kt$@Composable internal fun GooglePayDividerLine()</ID>
    <ID>FunctionNaming:GooglePayDivider.kt$@Composable internal fun GooglePayDividerUi( text: String = stringResource(R.string.stripe_paymentsheet_or_pay_with_card) )</ID>
    <ID>FunctionNaming:InputAddressScreen.kt$@Composable internal fun InputAddressScreen( injector: NonFallbackInjector )</ID>
    <ID>FunctionNaming:InputAddressScreen.kt$@Composable internal fun InputAddressScreen( primaryButtonEnabled: Boolean, primaryButtonText: String, title: String, onPrimaryButtonClick: () -> Unit, onCloseClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit, checkboxContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>FunctionNaming:LpmSelectorText.kt$@Composable internal fun LpmSelectorText( @DrawableRes icon: Int? = null, text: String, textColor: Color, modifier: Modifier, isEnabled: Boolean )</ID>
    <ID>FunctionNaming:PaymentMethodsUI.kt$@Composable internal fun PaymentMethodUI( viewWidth: Dp, iconRes: Int, title: String, isSelected: Boolean, isEnabled: Boolean, tintOnSelected: Boolean, itemIndex: Int, modifier: Modifier = Modifier, onItemSelectedListener: (Int) -> Unit )</ID>
    <ID>FunctionNaming:PaymentMethodsUI.kt$@Composable internal fun PaymentMethodsUI( paymentMethods: List&lt;SupportedPaymentMethod>, selectedIndex: Int, isEnabled: Boolean, onItemSelectedListener: (SupportedPaymentMethod) -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:PaymentOptionsAdapter.kt$@Composable internal fun PaymentOptionUi( viewWidth: Dp, isSelected: Boolean, isEditing: Boolean, isEnabled: Boolean, iconRes: Int, @DrawableRes labelIcon: Int? = null, labelText: String = "", removePmDialogTitle: String = "", description: String, onRemoveListener: (() -> Unit)? = null, onRemoveAccessibilityDescription: String = "", onItemSelectedListener: (() -> Unit) )</ID>
    <ID>FunctionNaming:PrimaryButton.kt$@Composable private fun LabelUI(label: String)</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun AccountDetailsForm( bankName: String?, last4: String?, saveForFutureUsage: Boolean )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun MandateCollectionScreen( screenState: USBankAccountFormScreenState.MandateCollection )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun NameAndEmailCollectionScreen( screenState: USBankAccountFormScreenState.NameAndEmailCollection )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun NameAndEmailForm( name: String, email: String? )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun SavedAccountScreen( screenState: USBankAccountFormScreenState.SavedAccount )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun VerifyWithMicrodepositsScreen( screenState: USBankAccountFormScreenState.VerifyWithMicrodeposits )</ID>
    <ID>FunctionOnlyReturningConstant:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.PaymentIntentTestInput.Companion$fun toCsvHeader()</ID>
    <ID>FunctionOnlyReturningConstant:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.TestOutput.Companion$fun toCsvHeader()</ID>
    <ID>LargeClass:DefaultFlowControllerTest.kt$DefaultFlowControllerTest</ID>
    <ID>LargeClass:PaymentIntentFixtures.kt$PaymentIntentFixtures</ID>
    <ID>LargeClass:PaymentSheetActivityTest.kt$PaymentSheetActivityTest</ID>
    <ID>LargeClass:PaymentSheetViewModelTest.kt$PaymentSheetViewModelTest</ID>
    <ID>LongMethod:AddressElementActivity.kt$AddressElementActivity$@OptIn(ExperimentalAnimationApi::class) override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:AutocompleteScreen.kt$@Composable internal fun AutocompleteScreenUI(viewModel: AutocompleteViewModel)</ID>
    <ID>LongMethod:BaseAddPaymentMethodFragment.kt$BaseAddPaymentMethodFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:BaseSheetActivity.kt$BaseSheetActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:FormViewModelTest.kt$FormViewModelTest$@ExperimentalCoroutinesApi @Test fun `Verify params are set when element address fields are complete`()</ID>
    <ID>LongMethod:FormViewModelTest.kt$FormViewModelTest$@ExperimentalCoroutinesApi @Test fun `Verify params are set when required address fields are complete`()</ID>
    <ID>LongMethod:InputAddressScreen.kt$@Composable internal fun InputAddressScreen( injector: NonFallbackInjector )</ID>
    <ID>LongMethod:PaymentOptionsActivity.kt$PaymentOptionsActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PaymentOptionsAdapter.kt$@Composable internal fun PaymentOptionUi( viewWidth: Dp, isSelected: Boolean, isEditing: Boolean, isEnabled: Boolean, iconRes: Int, @DrawableRes labelIcon: Int? = null, labelText: String = "", removePmDialogTitle: String = "", description: String, onRemoveListener: (() -> Unit)? = null, onRemoveAccessibilityDescription: String = "", onItemSelectedListener: (() -> Unit) )</ID>
    <ID>LongMethod:PaymentSheetActivity.kt$PaymentSheetActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PaymentSheetConfigurationKtx.kt$internal fun PaymentSheet.Appearance.parseAppearance()</ID>
    <ID>LongMethod:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun AccountDetailsForm( bankName: String?, last4: String?, saveForFutureUsage: Boolean )</ID>
    <ID>LongMethod:USBankAccountFormFragment.kt$USBankAccountFormFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>LongMethod:USBankAccountFormViewModel.kt$USBankAccountFormViewModel$private fun attachFinancialAccountToIntent( clientSecret: ClientSecret, intentId: String, linkAccountId: String, bankName: String?, last4: String? )</ID>
    <ID>LongParameterList:BaseAddPaymentMethodFragment.kt$BaseAddPaymentMethodFragment.Companion$( showPaymentMethod: SupportedPaymentMethod, stripeIntent: StripeIntent, config: PaymentSheet.Configuration?, merchantName: String, amount: Amount? = null, @InjectorKey injectorKey: String, newLpm: PaymentSelection.New?, isShowingLinkInlineSignup: Boolean = false )</ID>
    <ID>LongParameterList:BaseSheetViewModel.kt$BaseSheetViewModel$( application: Application, internal val config: PaymentSheet.Configuration?, internal val eventReporter: EventReporter, protected val customerRepository: CustomerRepository, protected val prefsRepository: PrefsRepository, protected val workContext: CoroutineContext = Dispatchers.IO, protected val logger: Logger, @InjectorKey val injectorKey: String, val lpmResourceRepository: ResourceRepository&lt;LpmRepository>, val addressResourceRepository: ResourceRepository&lt;AddressRepository>, val savedStateHandle: SavedStateHandle, val linkLauncher: LinkPaymentLauncher )</ID>
    <ID>LongParameterList:DefaultFlowController.kt$DefaultFlowController$( // Properties provided through FlowControllerComponent.Builder private val lifecycleScope: CoroutineScope, lifecycleOwner: LifecycleOwner, private val statusBarColor: () -> Int?, private val paymentOptionFactory: PaymentOptionFactory, private val paymentOptionCallback: PaymentOptionCallback, private val paymentResultCallback: PaymentSheetResultCallback, activityResultCaller: ActivityResultCaller, @InjectorKey private val injectorKey: String, // Properties provided through injection private val flowControllerInitializer: FlowControllerInitializer, private val customerApiRepository: CustomerApiRepository, private val eventReporter: EventReporter, private val viewModel: FlowControllerViewModel, private val paymentLauncherFactory: StripePaymentLauncherAssistedFactory, // even though unused this forces Dagger to initialize it here. private val lpmResourceRepository: ResourceRepository&lt;LpmRepository>, private val addressResourceRepository: ResourceRepository&lt;AddressRepository>, /** * [PaymentConfiguration] is [Lazy] because the client might set publishableKey and * stripeAccountId after creating a [DefaultFlowController]. */ private val lazyPaymentConfiguration: Provider&lt;PaymentConfiguration>, @UIContext private val uiContext: CoroutineContext, @Named(ENABLE_LOGGING) private val enableLogging: Boolean, @Named(PRODUCT_USAGE) private val productUsage: Set&lt;String>, private val googlePayPaymentMethodLauncherFactory: GooglePayPaymentMethodLauncherFactory, private val linkLauncher: LinkPaymentLauncher )</ID>
    <ID>LongParameterList:DefaultFlowController.kt$DefaultFlowController.Companion$( appContext: Context, viewModelStoreOwner: ViewModelStoreOwner, lifecycleScope: CoroutineScope, lifecycleOwner: LifecycleOwner, activityResultCaller: ActivityResultCaller, statusBarColor: () -> Int?, paymentOptionFactory: PaymentOptionFactory, paymentOptionCallback: PaymentOptionCallback, paymentResultCallback: PaymentSheetResultCallback )</ID>
    <ID>LongParameterList:DefaultFlowControllerInitializer.kt$DefaultFlowControllerInitializer$( clientSecret: ClientSecret, stripeIntent: StripeIntent, customerConfig: PaymentSheet.CustomerConfiguration?, config: PaymentSheet.Configuration?, isGooglePayReady: Boolean, isLinkReady: Boolean )</ID>
    <ID>LongParameterList:DefaultFlowControllerInitializer.kt$DefaultFlowControllerInitializer$( private val prefsRepositoryFactory: @JvmSuppressWildcards (PaymentSheet.CustomerConfiguration?) -> PrefsRepository, private val googlePayRepositoryFactory: @JvmSuppressWildcards (GooglePayEnvironment) -> GooglePayRepository, private val stripeIntentRepository: StripeIntentRepository, private val stripeIntentValidator: StripeIntentValidator, private val customerRepository: CustomerRepository, private val lpmResourceRepository: ResourceRepository&lt;LpmRepository>, private val logger: Logger, val eventReporter: EventReporter, @IOContext private val workContext: CoroutineContext, @Named(LINK_ENABLED) private val isLinkEnabled: Boolean )</ID>
    <ID>LongParameterList:FlowControllerFactory.kt$FlowControllerFactory$( private val viewModelStoreOwner: ViewModelStoreOwner, private val lifecycleScope: CoroutineScope, private val lifecycleOwner: LifecycleOwner, private val appContext: Context, private val activityResultCaller: ActivityResultCaller, private val statusBarColor: () -> Int?, private val paymentOptionFactory: PaymentOptionFactory, private val paymentOptionCallback: PaymentOptionCallback, private val paymentResultCallback: PaymentSheetResultCallback )</ID>
    <ID>LongParameterList:InputAddressScreen.kt$( primaryButtonEnabled: Boolean, primaryButtonText: String, title: String, onPrimaryButtonClick: () -> Unit, onCloseClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit, checkboxContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>LongParameterList:PaymentMethodsUI.kt$( viewWidth: Dp, iconRes: Int, title: String, isSelected: Boolean, isEnabled: Boolean, tintOnSelected: Boolean, itemIndex: Int, modifier: Modifier = Modifier, onItemSelectedListener: (Int) -> Unit )</ID>
    <ID>LongParameterList:PaymentOptionsAdapter.kt$( viewWidth: Dp, isSelected: Boolean, isEditing: Boolean, isEnabled: Boolean, iconRes: Int, @DrawableRes labelIcon: Int? = null, labelText: String = "", removePmDialogTitle: String = "", description: String, onRemoveListener: (() -> Unit)? = null, onRemoveAccessibilityDescription: String = "", onItemSelectedListener: (() -> Unit) )</ID>
    <ID>LongParameterList:PaymentOptionsViewModel.kt$PaymentOptionsViewModel$( args: PaymentOptionContract.Args, prefsRepositoryFactory: (PaymentSheet.CustomerConfiguration?) -> PrefsRepository, eventReporter: EventReporter, customerRepository: CustomerRepository, @IOContext workContext: CoroutineContext, application: Application, logger: Logger, @InjectorKey injectorKey: String, lpmResourceRepository: ResourceRepository&lt;LpmRepository>, addressResourceRepository: ResourceRepository&lt;AddressRepository>, savedStateHandle: SavedStateHandle, linkLauncher: LinkPaymentLauncher )</ID>
    <ID>LongParameterList:PaymentSheetViewModel.kt$PaymentSheetViewModel$( // Properties provided through PaymentSheetViewModelComponent.Builder application: Application, internal val args: PaymentSheetContract.Args, eventReporter: EventReporter, // Properties provided through injection private val lazyPaymentConfig: Lazy&lt;PaymentConfiguration>, private val stripeIntentRepository: StripeIntentRepository, private val stripeIntentValidator: StripeIntentValidator, customerRepository: CustomerRepository, prefsRepository: PrefsRepository, lpmResourceRepository: ResourceRepository&lt;LpmRepository>, addressResourceRepository: ResourceRepository&lt;AddressRepository>, private val paymentLauncherFactory: StripePaymentLauncherAssistedFactory, private val googlePayPaymentMethodLauncherFactory: GooglePayPaymentMethodLauncherFactory, logger: Logger, @IOContext workContext: CoroutineContext, @InjectorKey injectorKey: String, savedStateHandle: SavedStateHandle, linkLauncher: LinkPaymentLauncher )</ID>
    <ID>MagicNumber:AutocompleteScreen.kt$0.07f</ID>
    <ID>MagicNumber:BillingAddressView.kt$BillingAddressView.PostalCodeConfig.Global$13</ID>
    <ID>MagicNumber:BillingAddressView.kt$BillingAddressView.PostalCodeConfig.UnitedStates$5</ID>
    <ID>MagicNumber:ComposeFormDataCollectionFragment.kt$ComposeFormDataCollectionFragment$18</ID>
    <ID>MagicNumber:GooglePayButton.kt$GooglePayButton$0.5f</ID>
    <ID>MagicNumber:PaymentMethodsUI.kt$0.6F</ID>
    <ID>MagicNumber:PaymentMethodsUI.kt$100</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$0.6F</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$18</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$9</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$PaymentOptionsAdapter.Companion$100</ID>
    <ID>MagicNumber:PaymentSelection.kt$PaymentSelection.New.Card$4</ID>
    <ID>MagicNumber:PaymentSheetEvent.kt$PaymentSheetEvent.Payment$1000f</ID>
    <ID>MagicNumber:PrimaryButton.kt$PrimaryButton$0.5f</ID>
    <ID>MagicNumber:USBankAccountFormFragment.kt$USBankAccountFormFragment$0.5f</ID>
    <ID>MaxLineLength:BillingAddressViewTest.kt$BillingAddressViewTest$fun</ID>
    <ID>MaxLineLength:ConfirmPaymentIntentParamsFactoryTest.kt$ConfirmPaymentIntentParamsFactoryTest$fun</ID>
    <ID>MaxLineLength:CustomerRepositoryTest.kt$CustomerRepositoryTest$onBlocking { detachPaymentMethod(anyString(), any(), anyString(), any()) }.doThrow(InvalidParameterException("error"))</ID>
    <ID>MaxLineLength:DefaultFlowControllerInitializerTest.kt$DefaultFlowControllerInitializerTest$fun</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$.</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$fun</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$viewModel.paymentSelection = PaymentSelection.New.Card(PaymentMethodCreateParamsFixtures.DEFAULT_CARD, mock(), mock())</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$delegate ?: throw IllegalStateException("Cannot move to state $newState since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$val d = delegate ?: throw IllegalStateException("Cannot run onActivity since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$certificate</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$hosted_voucher_url</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$message</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$native_data</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$root_certificate_authorities</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$stripe_js</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$three_ds_method_url</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$url</ID>
    <ID>MaxLineLength:PaymentOptionsViewModelTestInjection.kt$PaymentOptionsViewModelTestInjection$LpmRepository(LpmRepository.LpmRepositoryArguments(ApplicationProvider.getApplicationContext&lt;Application>().resources))</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.Address$*</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.BillingDetails$*</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.Configuration$*</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.GooglePayConfiguration$*</ID>
    <ID>MaxLineLength:PaymentSheetActivityTest.kt$PaymentSheetActivityTest$fun</ID>
    <ID>MaxLineLength:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest$fun</ID>
    <ID>MaxLineLength:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest.Companion$LpmRepository(LpmRepository.LpmRepositoryArguments(ApplicationProvider.getApplicationContext&lt;Application>().resources))</ID>
    <ID>MaxLineLength:PaymentSheetEventTest.kt$PaymentSheetEventTest$paymentSelection = PaymentSelection.New.Card(PaymentMethodCreateParamsFixtures.DEFAULT_CARD, mock(), mock())</ID>
    <ID>MaxLineLength:PaymentSheetViewModelTest.kt$PaymentSheetViewModelTest$fun</ID>
    <ID>MaxLineLength:PrimaryButtonTest.kt$PrimaryButtonTest$primaryButton.setAppearanceConfiguration(PaymentsThemeDefaults.primaryButtonStyle, ColorStateList.valueOf(Color.BLACK))</ID>
    <ID>MaxLineLength:SetupIntentFixtures.kt$SetupIntentFixtures$message</ID>
    <ID>MaxLineLength:SetupIntentFixtures.kt$SetupIntentFixtures$url</ID>
    <ID>MaxLineLength:StripeIntentRepositoryTest.kt$StripeIntentRepositoryTest$fun</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest$* This will generate payment intent scenarios for all combinations of customers, lpm types in the intent, shipping, and SFU states</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest$val formDescriptor = lpm.getSpecWithFullfilledRequirements(testInput.getIntent(lpm), testInput.getConfig())</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.PaymentIntentTestInput$fun toCsv()</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.PaymentIntentTestInput.Companion$fun toCsvHeader()</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.TestOutput.Companion$formShowsSaveCheckbox == false &amp;&amp; formShowsCheckboxControlledFields == true -> "merchantRequiredSave"</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$assertThat(viewModel.saveForFutureUseElement.controller.saveForFutureUse.stateIn(viewModel.viewModelScope).value).isFalse()</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$assertThat(viewModel.saveForFutureUseElement.controller.saveForFutureUse.stateIn(viewModel.viewModelScope).value).isTrue()</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$viewModel.handlePrimaryButtonClick(currentScreenState as USBankAccountFormScreenState.NameAndEmailCollection)</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$viewModel.handlePrimaryButtonClick(currentScreenState as USBankAccountFormScreenState.VerifyWithMicrodeposits)</ID>
    <ID>NestedBlockDepth:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest$private fun generatePaymentIntentScenarios(): List&lt;PaymentIntentTestInput></ID>
    <ID>ReturnCount:AddressUtils.kt$internal fun CharSequence.levenshtein(other: CharSequence): Int</ID>
    <ID>SwallowedException:PaymentOptionsActivity.kt$PaymentOptionsActivity$e: InvalidParameterException</ID>
    <ID>ThrowsCount:PaymentSheetConfigurationKtx.kt$internal fun PaymentSheet.Configuration.validate()</ID>
    <ID>TooManyFunctions:BasePaymentMethodsListFragment.kt$BasePaymentMethodsListFragment : Fragment</ID>
    <ID>TooManyFunctions:BaseSheetActivity.kt$BaseSheetActivity&lt;ResultType> : AppCompatActivity</ID>
    <ID>TooManyFunctions:BaseSheetViewModel.kt$BaseSheetViewModel&lt;TransitionTargetType> : AndroidViewModel</ID>
    <ID>TooManyFunctions:DefaultFlowController.kt$DefaultFlowController : FlowControllerInjector</ID>
    <ID>TooManyFunctions:FlowControllerComponent.kt$FlowControllerComponent$Builder</ID>
    <ID>TooManyFunctions:PaymentOptionsAdapter.kt$PaymentOptionsAdapter : Adapter</ID>
    <ID>TooManyFunctions:PaymentOptionsViewModel.kt$PaymentOptionsViewModel : BaseSheetViewModel</ID>
    <ID>TooManyFunctions:PaymentSheetViewModel.kt$PaymentSheetViewModel : BaseSheetViewModel</ID>
    <ID>TooManyFunctions:USBankAccountFormFragment.kt$USBankAccountFormFragment : Fragment</ID>
    <ID>TooManyFunctions:USBankAccountFormViewModel.kt$USBankAccountFormViewModel : ViewModel</ID>
    <ID>UnnecessaryAbstractClass:FlowControllerModule.kt$FlowControllerModule$FlowControllerModule</ID>
    <ID>UnnecessaryAbstractClass:PaymentSheetCommonModule.kt$PaymentSheetCommonModule$PaymentSheetCommonModule</ID>
    <ID>UnnecessaryAbstractClass:PaymentSheetLauncherModule.kt$PaymentSheetLauncherModule$PaymentSheetLauncherModule</ID>
    <ID>UnusedPrivateClass:PaymentOptionsViewModelTest.kt$PaymentOptionsViewModelTest$MyHostActivity : AppCompatActivity</ID>
    <ID>UnusedPrivateMember:BillingAddressViewTest.kt$BillingAddressViewTest.Companion$private val FRANCE = CountryCode.create("FR")</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$// a fatal error protected val _fatal = MutableLiveData&lt;Throwable>()</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _amount = savedStateHandle.getLiveData&lt;Amount>(SAVE_AMOUNT)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _contentVisible = MutableLiveData(true)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _isGooglePayReady = savedStateHandle.getLiveData&lt;Boolean>(SAVE_GOOGLE_PAY_READY)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _isLinkEnabled = MutableLiveData&lt;Boolean>()</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _liveMode get() = savedStateHandle.getLiveData&lt;Boolean>(SAVE_STATE_LIVE_MODE)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED) internal val _paymentMethods = savedStateHandle.getLiveData&lt;List&lt;PaymentMethod>>(SAVE_PAYMENT_METHODS)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED) internal val _processing = savedStateHandle.getLiveData&lt;Boolean>(SAVE_PROCESSING)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$protected val _linkConfiguration = savedStateHandle.getLiveData&lt;LinkPaymentLauncher.Configuration>(LINK_CONFIGURATION)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$protected val _showLinkVerificationDialog = MutableLiveData(false)</ID>
    <ID>VariableNaming:PaymentOptionsViewModel.kt$PaymentOptionsViewModel$@VisibleForTesting internal val _paymentOptionResult = MutableLiveData&lt;PaymentOptionResult>()</ID>
    <ID>VariableNaming:PaymentSheetViewModel.kt$PaymentSheetViewModel$@VisibleForTesting internal val _paymentSheetResult = MutableLiveData&lt;PaymentSheetResult>()</ID>
    <ID>VariableNaming:PaymentSheetViewModel.kt$PaymentSheetViewModel$@VisibleForTesting internal val _viewState = MutableLiveData&lt;PaymentSheetViewState>(null)</ID>
  </CurrentIssues>
</SmellBaseline>
