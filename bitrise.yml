---
format_version: '11'
default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
project_type: android
trigger_map:
  - push_branch: 'master'
    pipeline: main-trigger-pipeline
  - pull_request_source_branch: '*'
    pipeline: main-trigger-pipeline
app:
  envs:
    - GRADLE_OPTS: -Dkotlin.incremental=false

pipelines:
  main-trigger-pipeline:
    stages:
      - stage-trigger-run-all: { }

stages:
  stage-trigger-run-all:
    workflows:
      - check: { }
      - test: { }
      - run-instrumentation-tests: { }
      - run-paymentsheet-end-to-end-tests: { }

workflows:
  check:
    before_run:
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          inputs:
            - content: ./gradlew ktlint detekt lintRelease apiCheck verifyReleaseResources
  test:
    before_run:
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          inputs:
            - content: ./gradlew testDebugUnitTest verifyPaparazziDebug -x :stripe-test-e2e:testDebugUnitTest
  maestro-financial-connections:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute Maestro tests (release)
          inputs:
            - content: |-
                #!/usr/bin/env bash
                bash ./scripts/execute_maestro_tests.sh release
      - slack@3:
          is_always_run: true
          inputs:
            - webhook_url: $WEBHOOK_SLACK_CARLOSMUVI_MAESTRO
            - webhook_url_on_error: $WEBHOOK_SLACK_CARLOSMUVI_MAESTRO
      - pagerduty@0:
          inputs:
            - event_description: Android E2E tests failing! $BITRISE_BUILD_URL
            - integration_key: $AUX_PAGERDUTY_INTEGRATION_KEY
          is_always_run: true
          run_if: .IsBuildFailed
      - custom-test-results-export@1:
          inputs:
            - search_pattern: '*/maestroReport.xml'
            - test_name: Maestro tests
      - deploy-to-bitrise-io@2: { }
  maestro-edge-financial-connections:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute Maestro tests (debug)
          inputs:
            - content: |-
                #!/usr/bin/env bash
                bash ./scripts/execute_maestro_tests.sh debug
      - slack@3:
          is_always_run: true
          inputs:
            - webhook_url: $WEBHOOK_SLACK_CARLOSMUVI_MAESTRO
            - webhook_url_on_error: $WEBHOOK_SLACK_CARLOSMUVI_MAESTRO
      - custom-test-results-export@1:
          inputs:
            - search_pattern: '*/maestroReport.xml'
            - test_name: Maestro tests
      - deploy-to-bitrise-io@2: { }
  maestro-paymentsheet:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script-runner@0:
          title: Execute Maestro tests
          inputs:
            - file_path: ./scripts/execute_maestro_paymentsheet_tests.sh
      - slack@3:
          is_always_run: true
          run_if: .IsBuildFailed
          inputs:
            - webhook_url: $WEBHOOK_SLACK_ELEMENTS_MAESTRO
            - webhook_url_on_error: $WEBHOOK_SLACK_ELEMENTS_MAESTRO
      - custom-test-results-export@1:
          inputs:
            - search_pattern: '*/maestroReport.xml'
            - test_name: Maestro tests
      - deploy-to-bitrise-io@2: { }
  run-instrumentation-tests:
    before_run:
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - avd-manager@1: { }
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script-runner@0:
          title: Execute instrumentation tests
          inputs:
            - file_path: ./scripts/execute_instrumentation_tests.sh
  run-paymentsheet-end-to-end-tests:
    before_run:
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          inputs:
            - content: ./gradlew :paymentsheet-example:assembleDebugAndroidTest :paymentsheet-example:assembleDebug
      - script@1:
          inputs:
            - content: pip3 install requests_toolbelt requests
      - script@1:
          inputs:
            - content: python3 scripts/browserstack.py --test --apk paymentsheet-example/build/outputs/apk/debug/paymentsheet-example-debug.apk --espresso paymentsheet-example/build/outputs/apk/androidTest/debug/paymentsheet-example-debug-androidTest.apk
  start_emulator:
    steps:
      - avd-manager@1:
          inputs:
            - profile: "pixel_3a"
            - api_level: 30
            - tag: "google_apis_playstore"
  prepare_all:
    steps:
      - activate-ssh-key@4:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - git-clone@8: { }
      - cache-pull@2: { }
      - set-java-version@1:
          inputs:
            - set_java_version: 17
      - script@1:
          inputs:
            - content: mkdir -p ~/.gradle ; cp .bitrise/ci-gradle.properties ~/.gradle/gradle.properties
      - script@1:
          inputs:
            - content: echo "STRIPE_EXAMPLE_BACKEND_URL=$STRIPE_EXAMPLE_BACKEND_URL" >> ~/.gradle/gradle.properties; echo "STRIPE_EXAMPLE_PUBLISHABLE_KEY=$STRIPE_EXAMPLE_PUBLISHABLE_KEY" >> ~/.gradle/gradle.properties
  conclude_all:
    steps:
      - script-runner@0:
          is_always_run: true
          title: Copy test results to tmp
          inputs:
            - file_path: ./scripts/copy_test_results_to_tmp.sh
      - deploy-to-bitrise-io@2:
          inputs:
            - notify_user_groups: none
            - is_compress: "true"
            - deploy_path: /tmp/test_results
            - is_enable_public_page: "false"
          title: Deploy test results artifacts
      - cache-push@2: { }
meta:
  bitrise.io:
    stack: linux-docker-android-20.04
    machine_type_id: elite
