---
format_version: '11'
default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
project_type: android
trigger_map:
  - push_branch: 'master'
    pipeline: main-trigger-pipeline
  - pull_request_source_branch: '*'
    pipeline: main-trigger-pipeline
app:
  envs:
    - GRADLE_OPTS: -Dkotlin.incremental=false

pipelines:
  main-trigger-pipeline:
    stages:
      - stage-trigger-run-all: { }
  pipeline-connections-e2e-debug-tests:
    stages:
      - stage-build-connections-debug: { }
      - stage-run-connections-e2e-tests: { }
      - stage-notify-connections-e2e-failure: { }
  pipeline-connections-e2e-release-tests:
    stages:
      - stage-build-connections-release: { }
      - stage-run-connections-e2e-tests: { }
      - stage-notify-connections-e2e-failure: { }
stages:
  stage-trigger-run-all:
    workflows:
      - check: { }
      - test: { }
      - run-instrumentation-tests: { }
      - run-paymentsheet-instrumentation-tests: { }
      - run-example-instrumentation-tests: { }
      - run-financial-connections-instrumentation-tests: { }
      - run-cardscan-instrumentation-tests: { }
      - run-paymentsheet-end-to-end-tests: { }
      - run-paymentsheet-screenshot-tests: { }
  stage-build-connections-debug:
    workflows:
      - build-connections-debug: { }
  stage-build-connections-release:
    workflows:
      - build-connections-release: { }
  stage-run-connections-e2e-tests:
    workflows:
      - run-connections-e2e-payments-tests: { }
      - run-connections-e2e-data-tests: { }
      - run-connections-e2e-livemode-tests: { }
  stage-notify-connections-e2e-failure:
    should_always_run: true
    workflows:
      - notify-connections-e2e-failure: { }
workflows:
  check:
    before_run:
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          timeout: 1200
          inputs:
            - content: ./gradlew ktlint detekt lintRelease apiCheck verifyReleaseResources
  test:
    envs:
      - opts:
          is_expand: false
        NEEDS_ROBOLECTRIC: true
    before_run:
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          timeout: 1200
          inputs:
            - content: ./gradlew testDebugUnitTest verifyPaparazziDebug -x :stripe-test-e2e:testDebugUnitTest
  build-connections-debug:
    envs:
      - BUILD_VARIANT: debug
    before_run:
      - _build-connections
  build-connections-release:
    envs:
      - BUILD_VARIANT: release
    before_run:
      - _build-connections
  _build-connections:
    before_run:
      - prepare_all
    steps:
      - android-build@1:
          inputs:
            - arguments: -PSTRIPE_FINANCIAL_CONNECTIONS_EXAMPLE_BACKEND_URL=$STRIPE_FINANCIAL_CONNECTIONS_EXAMPLE_BACKEND_URL
            - module: financial-connections-example
            - variant: $BUILD_VARIANT
            - build_type: apk
            - cache_level: all
      - deploy-to-bitrise-io@2:
          inputs:
            - pipeline_intermediate_files: "$BITRISE_APK_PATH:BITRISE_APK_PATH"
  run-connections-e2e-payments-tests:
    envs:
      - MAESTRO_TAGS: testmode-payments
    before_run:
      - _run-connections-e2e-tests
  run-connections-e2e-data-tests:
    envs:
      - MAESTRO_TAGS: testmode-data
    before_run:
      - _run-connections-e2e-tests
  run-connections-e2e-livemode-tests:
    envs:
      - MAESTRO_TAGS: livemode-data
    before_run:
      - _run-connections-e2e-tests
  _run-connections-e2e-tests:
    before_run:
      - start_connections_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - pull-intermediate-files@1:
          inputs:
            - artifact_sources: .*
      - script@1:
          title: Execute Maestro tests
          inputs:
            - content: |-
                #!/usr/bin/env bash
                bash ./scripts/execute_maestro_tests.sh -t $MAESTRO_TAGS
  notify-connections-e2e-failure:
    steps:
      - slack@4:
          inputs:
            - webhook_url: $WEBHOOK_SLACK_CARLOSMUVI_MAESTRO
            - webhook_url_on_error: $WEBHOOK_SLACK_CARLOSMUVI_MAESTRO
      - pagerduty@0:
          run_if: '{{ getenv "BITRISEIO_PIPELINE_BUILD_STATUS" | eq "failed" }}'
          inputs:
            - event_description: Android E2E tests failing! $BITRISE_BUILD_URL
            - integration_key: $AUX_PAGERDUTY_INTEGRATION_KEY
  maestro-paymentsheet:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute Maestro tests
          inputs:
            - content: |-
                #!/usr/bin/env bash
                bash ./scripts/execute_maestro_elements_tests.sh paymentsheet
      - slack@3:
          is_always_run: true
          run_if: .IsBuildFailed
          inputs:
            - webhook_url: $WEBHOOK_SLACK_ELEMENTS_MAESTRO
            - webhook_url_on_error: $WEBHOOK_SLACK_ELEMENTS_MAESTRO
      - custom-test-results-export@1:
          inputs:
            - search_pattern: '*/maestroReport.xml'
            - test_name: Maestro tests
      - deploy-to-bitrise-io@2: { }
  maestro-customersheet:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute Maestro tests
          inputs:
            - content: |-
                #!/usr/bin/env bash
                bash ./scripts/execute_maestro_elements_tests.sh customersheet
      - slack@3:
          is_always_run: true
          run_if: .IsBuildFailed
          inputs:
            - webhook_url: $WEBHOOK_SLACK_ELEMENTS_MAESTRO
            - webhook_url_on_error: $WEBHOOK_SLACK_ELEMENTS_MAESTRO
      - custom-test-results-export@1:
          inputs:
            - search_pattern: '*/maestroReport.xml'
            - test_name: Maestro tests
      - deploy-to-bitrise-io@2: { }
  run-instrumentation-tests:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          title: Assemble Instrumentation tests
          timeout: 600
          inputs:
            - content: ./gradlew assembleAndroidTest -x :paymentsheet-example:assembleAndroidTest -x :paymentsheet:assembleAndroidTest -x :example:assembleAndroidTest -x :financial-connections:assembleAndroidTest -x :financial-connections-example:assembleAndroidTest -x :camera-core:assembleAndroidTest -x :stripecardscan:assembleAndroidTest -x :stripecardscan-example:assembleAndroidTest
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute instrumentation tests
          timeout: 1200
          inputs:
            - content: ./gradlew connectedAndroidTest -x :paymentsheet-example:connectedAndroidTest -x :paymentsheet:connectedAndroidTest -x :example:connectedAndroidTest -x :financial-connections:connectedAndroidTest -x :financial-connections-example:connectedAndroidTest -x :camera-core:connectedAndroidTest -x :stripecardscan:connectedAndroidTest -x :stripecardscan-example:connectedAndroidTest
  run-paymentsheet-screenshot-tests:
    envs:
      - INCLUDE_SCREENSHOT_ON_FAILURE: true
    before_run:
      - start_screenshot_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          title: Assemble Instrumentation tests
          timeout: 600
          inputs:
            - content: ./gradlew :paymentsheet:assembleAndroidTest
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute instrumentation tests
          timeout: 1200
          inputs:
            - content: ./gradlew paymentsheet-example:executeScreenshotTests -Precord -Pandroid.testInstrumentationRunnerArguments.package=com.stripe.android.screenshot -Dorg.gradle.jvmargs="--add-opens java.base/java.nio=ALL-UNNAMED --add-opens java.base/java.nio.channels=ALL-UNNAMED --add-exports java.base/sun.nio.ch=ALL-UNNAMED"
      - script@1:
          title: Check updated screenshots
          inputs:
            - content: ruby scripts/check_for_changed_paymentsheet_screenshots.rb
  run-paymentsheet-instrumentation-tests:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          title: Assemble Instrumentation tests
          timeout: 600
          inputs:
            - content: ./gradlew :paymentsheet:assembleAndroidTest
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute instrumentation tests
          timeout: 1200
          inputs:
            - content: ./gradlew :paymentsheet:connectedAndroidTest
  run-example-instrumentation-tests:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          title: Assemble Instrumentation tests
          timeout: 600
          inputs:
            - content: ./gradlew :example:assembleAndroidTest
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute instrumentation tests
          timeout: 1200
          inputs:
            - content: ./gradlew :example:connectedAndroidTest
  run-financial-connections-instrumentation-tests:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          title: Assemble Instrumentation tests
          timeout: 600
          inputs:
            - content: ./gradlew :financial-connections:assembleAndroidTest :financial-connections-example:assembleAndroidTest
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute instrumentation tests
          timeout: 1200
          inputs:
            - content: ./gradlew :financial-connections:connectedAndroidTest :financial-connections-example:connectedAndroidTest
  run-cardscan-instrumentation-tests:
    before_run:
      - start_emulator
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          title: Assemble Instrumentation tests
          timeout: 600
          inputs:
            - content: ./gradlew :camera-core:assembleAndroidTest :stripecardscan:assembleAndroidTest :stripecardscan-example:assembleAndroidTest
      - wait-for-android-emulator@1:
          inputs:
            - boot_timeout: 600
      - script@1:
          title: Execute instrumentation tests
          timeout: 1200
          inputs:
            - content: ./gradlew :camera-core:connectedAndroidTest :stripecardscan:connectedAndroidTest :stripecardscan-example:connectedAndroidTest
  run-paymentsheet-end-to-end-tests:
    before_run:
      - prepare_all
    after_run:
      - conclude_all
    steps:
      - script@1:
          inputs:
            - content: ./gradlew :paymentsheet-example:assembleDebugAndroidTest :paymentsheet-example:assembleDebug
      - script@1:
          inputs:
            - content: pip3 install requests_toolbelt requests
      - script@1:
          inputs:
            - content: python3 scripts/browserstack.py --test --apk paymentsheet-example/build/outputs/apk/debug/paymentsheet-example-debug.apk --espresso paymentsheet-example/build/outputs/apk/androidTest/debug/paymentsheet-example-debug-androidTest.apk
  start_connections_emulator:
    steps:
      - avd-manager@1:
          inputs:
            - profile: "pixel_3a"
            - abi: "x86_64"
            - api_level: 32
            - tag: "google_apis"
            - start_command_flags: >
                -camera-back none
                -camera-front none
                -netdelay none
                -netspeed full
                -memory 2048
                -no-snapshot
                -no-audio
                -no-window
  start_emulator:
    steps:
      - avd-manager@1:
          inputs:
            - profile: "pixel_6"
            - abi: "x86_64"
            - api_level: 33
            - tag: "google_apis"
            - start_command_flags: >
               -camera-back none
               -camera-front none
               -netdelay none
               -netspeed full
               -memory 2048
               -no-snapshot
               -no-audio
               -no-window
  start_screenshot_emulator:
    steps:
      - avd-manager@1:
          inputs:
            - profile: "Nexus 6"
            - abi: "x86_64"
            - api_level: 28
            - start_command_flags: >
                -camera-back none
                -camera-front none
                -netdelay none
                -netspeed full
                -memory 2048
                -no-snapshot
                -no-audio
                -no-window
                -no-snapshot-save
                -gpu swiftshader_indirect
                -no-boot-anim
  prepare_all:
    steps:
      - activate-ssh-key@4:
          run_if: '{{getenv "SSH_RSA_PRIVATE_KEY" | ne ""}}'
      - git-clone@8: { }
      - cache-pull@2: { }
      - restore-gradle-cache@1: { }
      - script-runner@0:
          # Maven doesn't like java 17, so running it before.
          run_if: '{{getenv "NEEDS_ROBOLECTRIC" | ne ""}}'
          title: Download robolectric dependencies
          inputs:
            - file_path: ./scripts/download_robolectric.sh
      - set-java-version@1:
          inputs:
            - set_java_version: 17
      - script@1:
          inputs:
            - content: mkdir -p ~/.gradle ; cp .bitrise/ci-gradle.properties ~/.gradle/gradle.properties
      - script@1:
          inputs:
            - content: echo "STRIPE_EXAMPLE_BACKEND_URL=$STRIPE_EXAMPLE_BACKEND_URL" >> ~/.gradle/gradle.properties; echo "STRIPE_EXAMPLE_PUBLISHABLE_KEY=$STRIPE_EXAMPLE_PUBLISHABLE_KEY" >> ~/.gradle/gradle.properties
  conclude_all:
    steps:
      - script-runner@0:
          is_always_run: true
          title: Copy test results to tmp
          inputs:
            - file_path: ./scripts/copy_test_results_to_tmp.sh
      - deploy-to-bitrise-io@2:
          inputs:
            - notify_user_groups: none
            - is_compress: "true"
            - deploy_path: /tmp/test_results
            - is_enable_public_page: "false"
          title: Deploy test results artifacts
      - cache-push@2: { }
      - save-gradle-cache@1: { }
meta:
  bitrise.io:
    stack: linux-docker-android-20.04
    machine_type_id: elite
