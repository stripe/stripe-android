plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'checkstyle'
    id 'org.jetbrains.kotlin.plugin.parcelize'
}

assemble.dependsOn('lint')
check.dependsOn('checkstyle')

configurations {
    ktlint
}

dependencies {
    implementation project(':payments-core')

    implementation libraries.androidx.appcompat
    implementation 'androidx.core:core-ktx:1.5.0'

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "org.mockito:mockito-core:$mockitoCoreVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoCoreVersion"
    testImplementation "androidx.test:core-ktx:$androidTestVersion"

    ktlint "com.pinterest:ktlint:$ktlintVersion"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion rootProject.ext.compileSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    testOptions {
        unitTests {
            // Note: without this, all Robolectric tests using BuildConfig will fail.
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

// TODO(ccen) reship wechat pay module after backend refresh endpoint is ready
//ext {
//    artifactId = "stripe-wechatpay"
//    artifactName = "stripe-wechatpay"
//    artifactDescrption = "The WeChat Pay module of Stripe Android Payments SDK"
//}
//
//apply from: "${rootDir}/deploy/deploy.gradle"
