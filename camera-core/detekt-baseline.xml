<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ChainWrapping:com.stripe.android.test.core.PlaygroundTestDriver.kt:296</ID>
    <ID>ChainWrapping:com.stripe.android.test.core.PlaygroundTestDriver.kt:361</ID>
    <ID>ClassNaming:Memoize.kt$CachedFirstResult1$UNINITIALIZED_VALUE</ID>
    <ID>ClassNaming:Memoize.kt$CachedFirstResult2$UNINITIALIZED_VALUE</ID>
    <ID>ClassNaming:Memoize.kt$CachedFirstResult3$UNINITIALIZED_VALUE</ID>
    <ID>ClassNaming:Memoize.kt$CachedFirstResultSuspend1$UNINITIALIZED_VALUE</ID>
    <ID>ClassNaming:Memoize.kt$CachedFirstResultSuspend2$UNINITIALIZED_VALUE</ID>
    <ID>ClassNaming:Memoize.kt$CachedFirstResultSuspend3$UNINITIALIZED_VALUE</ID>
    <ID>ComplexCondition:AccountRangeJsonParser.kt$AccountRangeJsonParser$accountRangeHigh != null &amp;&amp; accountRangeLow != null &amp;&amp; panLength != null &amp;&amp; brandInfo != null</ID>
    <ID>ComplexCondition:BaseSheetViewModel.kt$BaseSheetViewModel$stripeIntentValue != null &amp;&amp; paymentMethodsValue != null &amp;&amp; isGooglePayReadyValue != null &amp;&amp; isResourceRepositoryReadyValue != null &amp;&amp; isLinkReadyValue != null &amp;&amp; savedSelectionValue != null</ID>
    <ID>ComplexCondition:BecsDebitWidget.kt$BecsDebitWidget$name.isBlank() || email.isNullOrBlank() || bsbNumber.isNullOrBlank() || accountNumber.isNullOrBlank()</ID>
    <ID>ComplexCondition:Camera1Adapter.kt$Camera1Adapter$size.height >= h &amp;&amp; ratioDiff &lt;= minDiffRatio &amp;&amp; size.height &lt;= MAXIMUM_RESOLUTION.height &amp;&amp; size.width &lt;= MAXIMUM_RESOLUTION.width</ID>
    <ID>ComplexCondition:ExpiryDateEditText.kt$ExpiryDateEditText.&lt;no name provided>$expirationDate.month.length == 2 &amp;&amp; latestInsertionSize > 0 &amp;&amp; !inErrorState || rawNumericInput.length > 2</ID>
    <ID>ComplexCondition:ImageTest.kt$ImageTest$x &lt; 100 || x > croppedBitmap.width - 100 || y &lt; 100 || y > croppedBitmap.height - 100</ID>
    <ID>ComplexCondition:NV21Image.kt$NV21Image$left == 0 &amp;&amp; top == 0 &amp;&amp; right == width &amp;&amp; bottom == height</ID>
    <ID>ComplexCondition:OTPElementUI.kt$index != 0 &amp;&amp; event.type == KeyEventType.KeyDown &amp;&amp; event.nativeKeyEvent.keyCode == KeyEvent.KEYCODE_DEL &amp;&amp; value.isEmpty()</ID>
    <ID>ComplexCondition:PaymentOptionsAdapter.kt$PaymentOptionsAdapter$force || position != NO_POSITION &amp;&amp; (canClickSelectedItem || position != selectedItemPosition) &amp;&amp; !isEditing</ID>
    <ID>ComplexMethod:FieldPopulator.kt$FieldPopulator$private fun populatePlatformLpmFields(values: Values = Values())</ID>
    <ID>ComplexMethod:FieldPopulator.kt$FieldPopulator$private fun verifyPlatformLpmFields(values: Values = Values())</ID>
    <ID>ComplexMethod:FormItemSpec.kt$FormItemSpecSerializer$override fun selectDeserializer(element: JsonElement): DeserializationStrategy&lt;out FormItemSpec></ID>
    <ID>ComplexMethod:FormUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun FormUI( hiddenIdentifiersFlow: Flow&lt;List&lt;IdentifierSpec>>, enabledFlow: Flow&lt;Boolean>, elementsFlow: Flow&lt;List&lt;FormElement>?>, lastTextFieldIdentifierFlow: Flow&lt;IdentifierSpec?>, loadingComposable: @Composable ColumnScope.() -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>ComplexMethod:Html.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun annotatedStringResource( text: String, imageGetter: Map&lt;String, EmbeddableImage> = emptyMap(), urlSpanStyle: SpanStyle = SpanStyle(textDecoration = TextDecoration.Underline) ): AnnotatedString</ID>
    <ID>ComplexMethod:IdentifierSpec.kt$IdentifierSpec.Companion$@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP_PREFIX) fun get(value: String)</ID>
    <ID>ComplexMethod:IdentityCameraScanFragment.kt$IdentityCameraScanFragment$internal fun startScanning(scanType: IdentityScanState.ScanType)</ID>
    <ID>ComplexMethod:IdentityCameraScanFragment.kt$IdentityCameraScanFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:IdentityFragmentFactory.kt$IdentityFragmentFactory$override fun instantiate(classLoader: ClassLoader, className: String): Fragment</ID>
    <ID>ComplexMethod:NavigationUtils.kt$internal fun Int.fragmentIdToScreenName(): String</ID>
    <ID>ComplexMethod:PaymentMethodJsonParser.kt$PaymentMethodJsonParser$override fun parse(json: JSONObject): PaymentMethod</ID>
    <ID>ComplexMethod:PaymentSheetPlaygroundActivity.kt$PaymentSheetPlaygroundActivity$private fun setToggles( customer: String?, link: Boolean, googlePay: Boolean, currency: String?, merchantCountryCode: String, mode: String?, setShippingAddress: Boolean, setDefaultBillingAddress: Boolean, setAutomaticPaymentMethods: Boolean, setDelayedPaymentMethods: Boolean )</ID>
    <ID>ComplexMethod:PlaygroundTestDriver.kt$PlaygroundTestDriver$private fun doAuthorization()</ID>
    <ID>ComplexMethod:Source.kt$Source.Companion$@SourceType @JvmStatic fun asSourceType(sourceType: String?): String</ID>
    <ID>ComplexMethod:SourceJsonParser.kt$SourceJsonParser.Companion$@Source.SourceType private fun asSourceType(sourceType: String?): String</ID>
    <ID>ComplexMethod:SourceJsonParser.kt$SourceJsonParser.Companion$private inline fun &lt;reified T : StripeModel> optStripeJsonModel( jsonObject: JSONObject, @Size(min = 1) key: String ): T?</ID>
    <ID>ComplexMethod:TextFieldUI.kt$@Composable fun TextField( textFieldController: TextFieldController, enabled: Boolean, imeAction: ImeAction, modifier: Modifier = Modifier, onTextStateChanged: (TextFieldState?) -> Unit = {}, nextFocusDirection: FocusDirection = FocusDirection.Next, previousFocusDirection: FocusDirection = FocusDirection.Previous )</ID>
    <ID>ComplexMethod:TransformGoogleToStripeAddress.kt$@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun Place.transformGoogleToStripeAddress( context: Context ): com.stripe.android.model.Address</ID>
    <ID>ComplexMethod:TransformSpecToElements.kt$TransformSpecToElements$fun transform(list: List&lt;FormItemSpec>): List&lt;FormElement></ID>
    <ID>ConstructorParameterNaming:AddressElement.kt$AddressElement$_identifier: IdentifierSpec</ID>
    <ID>ConstructorParameterNaming:CardNumberElement.kt$CardNumberElement$val _identifier: IdentifierSpec</ID>
    <ID>ConstructorParameterNaming:ClientDevice.kt$ClientDevice$@SerialName("device_id") val android_id: String?</ID>
    <ID>ConstructorParameterNaming:ClientDevice.kt$ClientDevice$@SerialName("vendor_id") val vendor_id: String?</ID>
    <ID>ConstructorParameterNaming:CvcElement.kt$CvcElement$val _identifier: IdentifierSpec</ID>
    <ID>ConstructorParameterNaming:Device.kt$Device$val android_id: String?</ID>
    <ID>ConstructorParameterNaming:PlaygroundCheckoutModel.kt$CheckoutRequest$val automatic_payment_methods: Boolean</ID>
    <ID>ConstructorParameterNaming:PlaygroundCheckoutModel.kt$CheckoutRequest$val merchant_country_code: String</ID>
    <ID>ConstructorParameterNaming:PlaygroundCheckoutModel.kt$CheckoutRequest$val set_shipping_address: Boolean</ID>
    <ID>ConstructorParameterNaming:PlaygroundCheckoutModel.kt$CheckoutRequest$val supported_payment_methods: List&lt;String>?</ID>
    <ID>ConstructorParameterNaming:PlaygroundCheckoutModel.kt$CheckoutRequest$val use_link: Boolean</ID>
    <ID>ConstructorParameterNaming:RowElement.kt$RowElement$_identifier: IdentifierSpec</ID>
    <ID>ConstructorParameterNaming:Source.kt$Source$private val _klarna: Klarna? = null</ID>
    <ID>ConstructorParameterNaming:Source.kt$Source$private val _weChat: WeChat? = null</ID>
    <ID>EmptyDefaultConstructor:PaymentOptionsListFragment.kt$PaymentOptionsListFragment$()</ID>
    <ID>EmptyDefaultConstructor:PaymentSheetAddPaymentMethodFragment.kt$PaymentSheetAddPaymentMethodFragment$()</ID>
    <ID>EmptyDefaultConstructor:PaymentSheetListFragment.kt$PaymentSheetListFragment$()</ID>
    <ID>EmptyFunctionBlock:AbsFakeStripeRepository.kt$AbsFakeStripeRepository${ }</ID>
    <ID>EmptyFunctionBlock:AbsPaymentController.kt$AbsPaymentController${ }</ID>
    <ID>EmptyFunctionBlock:AddNetbankingPaymentMethodTest.kt$AddNetbankingPaymentMethodTest.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:BottomSheetController.kt$BottomSheetController.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:Camera1Adapter.kt$Camera1Adapter.CameraPreview${}</ID>
    <ID>EmptyFunctionBlock:CardImageVerificationFlowTest.kt$CardImageVerificationFlowTest.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:CardNumberViewOnlyController.kt$CardNumberViewOnlyController${}</ID>
    <ID>EmptyFunctionBlock:CardScanFragment.kt$CardScanFragment${}</ID>
    <ID>EmptyFunctionBlock:CardWidgetProgressView.kt$CardWidgetProgressView.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:CustomerSessionTest.kt$CustomerSessionTest.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:DefaultStripeNetworkClientTest.kt$DefaultStripeNetworkClientTest.FailingConnection${ }</ID>
    <ID>EmptyFunctionBlock:DefaultStripeNetworkClientTest.kt$DefaultStripeNetworkClientTest.ResponseCodeOverrideConnection${ }</ID>
    <ID>EmptyFunctionBlock:DeletePaymentMethodDialogFactory.kt$DeletePaymentMethodDialogFactory.PaymentMethodDeleteListener${ }</ID>
    <ID>EmptyFunctionBlock:FakeFraudDetectionDataRepository.kt$FakeFraudDetectionDataRepository${ }</ID>
    <ID>EmptyFunctionBlock:FragmentExamplesFragment.kt$FragmentExamplesFragment.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:FragmentExamplesFragment.kt$FragmentExamplesFragment.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:FragmentExamplesFragment.kt$FragmentExamplesFragment.&lt;no name provided>.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:IdentityCameraScanFragmentTest.kt$IdentityCameraScanFragmentTest.TestFragment${ }</ID>
    <ID>EmptyFunctionBlock:IdentityCameraScanFragmentTest.kt$IdentityCameraScanFragmentTest.TestFragment${}</ID>
    <ID>EmptyFunctionBlock:InMemoryCardAccountRangeSourceTest.kt$InMemoryCardAccountRangeSourceTest.FakeStore${ }</ID>
    <ID>EmptyFunctionBlock:PaymentFlowActivity.kt$PaymentFlowActivity.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:PaymentFlowActivity.kt$PaymentFlowActivity.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:PaymentSessionViewModel.kt$PaymentSessionViewModel${ }</ID>
    <ID>EmptyFunctionBlock:PaymentSheetPlaygroundActivity.kt$PaymentSheetPlaygroundActivity.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:PlaygroundTestDriver.kt$PlaygroundTestDriver.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:PrimaryButtonAnimator.kt$PrimaryButtonAnimator.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:SimpleConfirmationActivity.kt$SimpleConfirmationActivity.DropdownItemAdapter.NullFilter${ }</ID>
    <ID>EmptyFunctionBlock:StripeTextWatcher.kt$StripeTextWatcher${ }</ID>
    <ID>EmptyFunctionBlock:TestBrowsers.kt$TestBrowsers${ }</ID>
    <ID>EmptyFunctionBlock:TestCustomers.kt$TestCustomers${ }</ID>
    <ID>EmptyFunctionBlock:TestFieldPopulation.kt$TestFieldPopulation${ }</ID>
    <ID>ExplicitGarbageCollectionCall:WeakMapInjectorRegistryTest.kt$WeakMapInjectorRegistryTest$gc()</ID>
    <ID>FinalNewline:com.stripe.android.financialconnections.example.FinancialConnectionsExampleViewEffect.kt:1</ID>
    <ID>FinalNewline:com.stripe.android.stripecardscan.example.CardScanDemoActivity.kt:1</ID>
    <ID>FinalNewline:com.stripe.android.stripecardscan.example.CardScanFragmentDemoActivity.kt:1</ID>
    <ID>FinalNewline:com.stripe.android.stripecardscan.example.SnackbarController.kt:1</ID>
    <ID>ForbiddenComment:AppDetails.kt$// TODO: replace this with something like BuildConfig.SDK_VERSION_STRING</ID>
    <ID>ForbiddenComment:CameraAdapter.kt$CameraAdapter$// TODO: change this to be a channelFlow once it's no longer experimental, add some capacity and use a backpressure drop strategy</ID>
    <ID>ForbiddenComment:CardDetectTest.kt$CardDetectTest$* TODO: this method should use runBlockingTest instead of runBlocking. However, an issue with * runBlockingTest currently fails when functions under test use withContext(Dispatchers.IO) or * withContext(Dispatchers.Default). * * See https://github.com/Kotlin/kotlinx.coroutines/issues/1204 for details.</ID>
    <ID>ForbiddenComment:ClientStats.kt$StatsPayload$// TODO: these should probably be reported as part of scanstats</ID>
    <ID>ForbiddenComment:Clock.kt$* Measure the amount of time a process takes. * * TODO: use contracts when they are no longer experimental</ID>
    <ID>ForbiddenComment:ConsentScreenTest.kt$ConsentScreenTest$// TODO: assert text after migrating to compose Text</ID>
    <ID>ForbiddenComment:FieldPopulator.kt$FieldPopulator$// TODO: This will not work when other countries are selected or defaulted</ID>
    <ID>ForbiddenComment:LinkActivityTest.kt$LinkActivityTest$// TODO:(brnunes-stripe) Enable these tests</ID>
    <ID>ForbiddenComment:MainLoopAggregator.kt$MainLoopAggregator$// TODO: when we want to collect this in scan stats, give this a name</ID>
    <ID>ForbiddenComment:Memoize.kt$CachedFirstResult1$* Cache the result from calling this method. Subsequent calls, even with different parameters, will * not change the cached output. * * TODO: use contracts when they're no longer experimental</ID>
    <ID>ForbiddenComment:Memoize.kt$CachedFirstResult2$* Cache the result from calling this method. Subsequent calls, even with different parameters, will * not change the cached output. * * TODO: use contracts when they're no longer experimental</ID>
    <ID>ForbiddenComment:Memoize.kt$CachedFirstResult3$* Cache the result from calling this method. Subsequent calls, even with different parameters, will * not change the cached output. * * TODO: use contracts when they're no longer experimental</ID>
    <ID>ForbiddenComment:Memoize.kt$CachedFirstResultSuspend1$* Cache the result from calling this method. Subsequent calls, even with different parameters, will * not change the cached output. * * TODO: use contracts when they're no longer experimental</ID>
    <ID>ForbiddenComment:Memoize.kt$CachedFirstResultSuspend2$* Cache the result from calling this method. Subsequent calls, even with different parameters, will * not change the cached output. * * TODO: use contracts when they're no longer experimental</ID>
    <ID>ForbiddenComment:Memoize.kt$CachedFirstResultSuspend3$* Cache the result from calling this method. Subsequent calls, even with different parameters, will * not change the cached output. * * TODO: use contracts when they're no longer experimental</ID>
    <ID>ForbiddenComment:MemoizeTest.kt$MemoizeTest$// TODO: this should ideally use `runBlockingTest`, but that does not actually advance the</ID>
    <ID>ForbiddenComment:Menu.kt$// TODO: Make sure this gets the rounded corner values</ID>
    <ID>ForbiddenComment:NV21Image.kt$NV21Image$* https://github.com/silvaren/easyrs/blob/c8eed0f0b713bbb1eb375aca23d615677e8adb3c/easyrs/src/main/java/io/github/silvaren/easyrs/tools/YuvToRgb.java * * TODO: once the renderscript toolkit is available in maven central, replace this method with * the yuvToRgbBitmap from that https://github.com/android/renderscript-intrinsics-replacement-toolkit/blob/main/renderscript-toolkit/src/main/java/com/google/android/renderscript/Toolkit.kt#L1079</ID>
    <ID>ForbiddenComment:PaymentCardUtils.kt$* Determine if a PAN is valid. * * TODO: this should use a contract like the following once contracts are no longer experimental: * ``` * contract { returns(true) implies (pan != null) } * ```</ID>
    <ID>ForbiddenComment:PaymentOptionFactory.kt$PaymentOptionFactory$// TODO: Should use labelResource paymentMethodCreateParams or extension function</ID>
    <ID>ForbiddenComment:PlaygroundTestDriver.kt$PlaygroundTestDriver$// TODO: This string gets localized.</ID>
    <ID>ForbiddenComment:RequiresMatchingCard.kt$RequiresMatchingCard$/* * TODO: Use contracts once they're supported. [CardMatch.Match], [CardMatch.Mismatch], and * [CardMatch.NoRequiredCard] guarantees that pan != null */</ID>
    <ID>ForbiddenComment:SSD.kt$* The model outputs a particular location or a particular class of each prior before moving on to * the next prior. For instance, the model will output probabilities for background class * corresponding to all priors before outputting the probability of next class for the first prior. * This method serves to rearrange the output if you are using outputs from multiple layers If you * use outputs from single layer use the method defined above * * TODO: simplify this</ID>
    <ID>ForbiddenComment:SSDOcrTest.kt$SSDOcrTest$* TODO: this method should use runBlockingTest instead of runBlocking. However, an issue with * runBlockingTest currently fails when functions under test use withContext(Dispatchers.IO) or * withContext(Dispatchers.Default). * * See https://github.com/Kotlin/kotlinx.coroutines/issues/1204 for details.</ID>
    <ID>ForbiddenComment:ScanActivity.kt$ScanActivity$// TODO: this should be reported as part of scanstats, but is not yet supported</ID>
    <ID>ForbiddenComment:ScanActivity.kt$ScanActivity$// TODO: this should probably be reported as part of scanstats, but is not yet supported</ID>
    <ID>ForbiddenComment:ScanFragment.kt$ScanFragment$// TODO: this should be reported as part of scanstats, but is not yet supported</ID>
    <ID>ForbiddenComment:ScanFragment.kt$ScanFragment$// TODO: this should probably be reported as part of scanstats, but is not yet supported</ID>
    <ID>ForbiddenComment:StripeApi.kt$// TODO: this should probably be reported as part of scanstats, but is not yet supported</ID>
    <ID>ForbiddenComment:Timer.kt$LoggingTimer$// TODO: use contracts when they are no longer experimental</ID>
    <ID>ForbiddenComment:Timer.kt$NoOpTimer$// TODO: use contracts when they are no longer experimental</ID>
    <ID>ForbiddenComment:Timer.kt$Timer$* Log the duration of a single task and return the result from that task. * * TODO: use contracts when they are no longer experimental</ID>
    <ID>FunctionNaming:AddressElementPrimaryButton.kt$@Composable internal fun AddressElementPrimaryButton( isEnabled: Boolean, text: String, onButtonClick: () -> Unit )</ID>
    <ID>FunctionNaming:AddressElementUI.kt$@Composable internal fun AddressElementUI( enabled: Boolean, controller: AddressController, hiddenIdentifiers: List&lt;IdentifierSpec>?, lastTextFieldIdentifier: IdentifierSpec? )</ID>
    <ID>FunctionNaming:AddressOptionsAppBar.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun AddressOptionsAppBar( isRootScreen: Boolean, onButtonClick: () -> Unit )</ID>
    <ID>FunctionNaming:AddressTextFieldUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun AddressTextFieldUI( controller: AddressTextFieldController, onClick: () -> Unit = { controller.launchAutocompleteScreen() } )</ID>
    <ID>FunctionNaming:AddressUtils.kt$@Composable internal fun ScrollableColumn( modifier: Modifier = Modifier, content: @Composable ColumnScope.() -> Unit )</ID>
    <ID>FunctionNaming:AffirmElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun AffirmElementUI()</ID>
    <ID>FunctionNaming:AfterpayClearpayElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun AfterpayClearpayElementUI( enabled: Boolean, element: AfterpayClearpayHeaderElement )</ID>
    <ID>FunctionNaming:AndroidMenu.kt$@Composable internal fun DropdownMenuItem( onClick: () -> Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = MenuDefaults.DropdownMenuItemContentPadding, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, content: @Composable RowScope.() -> Unit )</ID>
    <ID>FunctionNaming:AndroidMenu.kt$@Suppress("ModifierParameter") @Composable internal fun DropdownMenu( expanded: Boolean, initialFirstVisibleItemIndex: Int, onDismissRequest: () -> Unit, modifier: Modifier = Modifier, offset: DpOffset = DpOffset(0.dp, 0.dp), properties: PopupProperties = PopupProperties(focusable = true), content: LazyListScope.() -> Unit )</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun ColorIcon(innerColor: Color)</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun ColorItem(label: String, currentColor: Color, onColorPicked: (Color) -> PaymentSheet.Appearance)</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun ColorPicker( openDialog: MutableState&lt;Boolean>, defaultColor: Color, onClose: (Color) -> Unit, )</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun Colors( currentAppearance: PaymentSheet.Appearance )</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun CustomizationCard( label: String, content: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun CustomizationUi(currentAppearance: PaymentSheet.Appearance)</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun FontDropDown(fontResId: Int?, fontSelectedCallback: (Int?) -> Unit)</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun FontDropDownMenuItem(label: String, fontResId: Int?, onClick: () -> Unit)</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun FontScaleSlider(sliderPosition: Float, onValueChange: (Float) -> Unit)</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun IncrementDecrementItem(label: String, value: Float, onValueChange: (Float) -> Unit)</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun MainButton( label: String, enabled: Boolean, onClick: () -> Unit, )</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun PrimaryButton( currentAppearance: PaymentSheet.Appearance )</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun Shapes( currentAppearance: PaymentSheet.Appearance )</ID>
    <ID>FunctionNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun Typography( currentAppearance: PaymentSheet.Appearance )</ID>
    <ID>FunctionNaming:AuBecsDebitMandateElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun AuBecsDebitMandateElementUI( element: AuBecsDebitMandateTextElement )</ID>
    <ID>FunctionNaming:AutocompleteScreen.kt$@Composable internal fun AutocompleteScreen( injector: NonFallbackInjector, country: String? )</ID>
    <ID>FunctionNaming:AutocompleteScreen.kt$@Composable internal fun AutocompleteScreenUI(viewModel: AutocompleteViewModel)</ID>
    <ID>FunctionNaming:BasePaymentSheetActivity.kt$@Composable fun BuyButton( buyButtonEnabled: Boolean, onClick: () -> Unit, )</ID>
    <ID>FunctionNaming:BasePaymentSheetActivity.kt$@Composable fun PaymentMethodSelector( isEnabled: Boolean, paymentMethodLabel: String, @DrawableRes paymentMethodIcon: Int?, onClick: () -> Unit, )</ID>
    <ID>FunctionNaming:BasePaymentSheetActivity.kt$@Composable fun ProductRow( productEmoji: String, productResId: Int, priceString: String, )</ID>
    <ID>FunctionNaming:BasePaymentSheetActivity.kt$@Composable fun Receipt( isLoading: Boolean, bottomContent: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:BasePaymentSheetActivity.kt$@Composable fun ReceiptRow( description: String, priceString: String, color: Color = Color.Unspecified )</ID>
    <ID>FunctionNaming:BasePaymentSheetActivity.kt$@Composable fun TotalLine(modifier: Modifier)</ID>
    <ID>FunctionNaming:BsbElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun BsbElementUI( enabled: Boolean, element: BsbElement, lastTextFieldIdentifier: IdentifierSpec? )</ID>
    <ID>FunctionNaming:CardDetailsElementUI.kt$@Composable internal fun CardDetailsElementUI( enabled: Boolean, controller: CardDetailsController, hiddenIdentifiers: List&lt;IdentifierSpec>?, lastTextFieldIdentifier: IdentifierSpec? )</ID>
    <ID>FunctionNaming:CardDetailsSectionElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun CardDetailsSectionElementUI( enabled: Boolean, controller: CardDetailsSectionController, hiddenIdentifiers: List&lt;IdentifierSpec>?, lastTextFieldIdentifier: IdentifierSpec? )</ID>
    <ID>FunctionNaming:CardEditScreen.kt$@Composable internal fun CardEditBody( isProcessing: Boolean, isDefault: Boolean, setAsDefaultChecked: Boolean, primaryButtonEnabled: Boolean, errorMessage: ErrorMessage?, onSetAsDefaultClick: (Boolean) -> Unit, onPrimaryButtonClick: () -> Unit, onCancelClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>FunctionNaming:CardEditScreen.kt$@Composable internal fun CardEditBody( linkAccount: LinkAccount, injector: NonFallbackInjector, paymentDetailsId: String )</ID>
    <ID>FunctionNaming:CardEditScreen.kt$@Preview @Composable internal fun CardEditPreview()</ID>
    <ID>FunctionNaming:Checkbox.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun Checkbox( checked: Boolean, onCheckedChange: ((Boolean) -> Unit)?, modifier: Modifier = Modifier, enabled: Boolean = true )</ID>
    <ID>FunctionNaming:CheckboxElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun CheckboxElementUI( automationTestTag: String = "", isChecked: Boolean = false, label: String? = null, isEnabled: Boolean = false, onValueChange: (Boolean) -> Unit )</ID>
    <ID>FunctionNaming:Color.kt$@Composable internal fun PaymentsThemeForLink( content: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:Common.kt$@Composable internal fun ScrollableTopLevelColumn( content: @Composable ColumnScope.() -> Unit )</ID>
    <ID>FunctionNaming:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable fun AllowedDocumentTypes( identitySubmissionState: IdentitySubmissionState, onSubmissionStateChangedListener: (IdentitySubmissionState) -> Unit )</ID>
    <ID>FunctionNaming:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable fun ComposeScreen()</ID>
    <ID>FunctionNaming:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable fun ExampleScreen()</ID>
    <ID>FunctionNaming:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable fun LoadingButton( enabled: Boolean, submissionState: IdentitySubmissionState, scaffoldState: ScaffoldState, coroutineScope: CoroutineScope, onLoadingStateChanged: (LoadingState) -> Unit, onPostResult: (String, String, String) -> Unit )</ID>
    <ID>FunctionNaming:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable fun NativeOrWeb( identitySubmissionState: IdentitySubmissionState, onSubmissionStateChangedListener: (IdentitySubmissionState) -> Unit )</ID>
    <ID>FunctionNaming:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable fun RequireDocTypes( identitySubmissionState: IdentitySubmissionState, onSubmissionStateChangedListener: (IdentitySubmissionState) -> Unit )</ID>
    <ID>FunctionNaming:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable internal fun LoadVSView( loadingState: LoadingState, identitySubmissionState: IdentitySubmissionState, scaffoldState: ScaffoldState, coroutineScope: CoroutineScope, onLoadingStateChanged: (LoadingState) -> Unit, onPostResult: (String, String, String) -> Unit )</ID>
    <ID>FunctionNaming:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable private fun ComposeScreen( inProgress: Boolean, status: String, onConfirm: (ConfirmPaymentIntentParams) -> Unit )</ID>
    <ID>FunctionNaming:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable private fun ConfirmButton( params: PaymentMethodCreateParams, @StringRes buttonName: Int, inProgress: Boolean, onConfirm: (ConfirmPaymentIntentParams) -> Unit )</ID>
    <ID>FunctionNaming:ComposeLoadingButton.kt$@Composable internal fun LoadingButton( modifier: Modifier = Modifier, text: String, state: LoadingButtonState, onClick: () -> Unit )</ID>
    <ID>FunctionNaming:ConfirmRemoveDialog.kt$@Composable internal fun ConfirmRemoveDialog( paymentDetails: ConsumerPaymentDetails.PaymentDetails, showDialog: Boolean, onDialogDismissed: (Boolean) -> Unit )</ID>
    <ID>FunctionNaming:ConsentScreen.kt$@Composable internal fun ConsentScreen( verificationState: Resource&lt;VerificationPage>, onMerchantViewCreated: (ImageView) -> Unit, onSuccess: (VerificationPage) -> Unit, onFallbackUrl: (String) -> Unit, onError: (Throwable) -> Unit, onConsentAgreed: (Boolean) -> Unit, onConsentDeclined: (Boolean) -> Unit )</ID>
    <ID>FunctionNaming:ConsentScreen.kt$@Composable private fun LoadingUI()</ID>
    <ID>FunctionNaming:ConsentScreen.kt$@Composable private fun SuccessUI( verificationPage: VerificationPage, onMerchantViewCreated: (ImageView) -> Unit, onConsentAgreed: (Boolean) -> Unit, onConsentDeclined: (Boolean) -> Unit )</ID>
    <ID>FunctionNaming:DefaultExampleTheme.kt$@Composable internal fun DefaultExampleTheme( darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:DocSelectionScreen.kt$@Composable internal fun DocSelectionScreen( verificationPageState: Resource&lt;VerificationPage>?, onDocTypeSelected: (Type, Boolean) -> Unit )</ID>
    <ID>FunctionNaming:DocSelectionScreen.kt$@Composable internal fun MultiSelection( idDocumentTypeAllowlist: Map&lt;String, String>, requireSelfie: Boolean, onDocTypeSelected: (Type, Boolean) -> Unit )</ID>
    <ID>FunctionNaming:DocSelectionScreen.kt$@Composable internal fun SingleSelection( allowedType: String, buttonText: String, bodyText: String?, requireSelfie: Boolean, onDocTypeSelected: (Type, Boolean) -> Unit )</ID>
    <ID>FunctionNaming:DropdownFieldUI.kt$@Composable internal fun DropDown( controller: DropdownFieldController, enabled: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:DropdownFieldUI.kt$@Composable internal fun DropdownMenuItem( displayValue: String, isSelected: Boolean, currentTextColor: Color, onClick: () -> Unit = {} )</ID>
    <ID>FunctionNaming:EnterManuallyText.kt$@Composable internal fun EnterManuallyText( onClick: () -> Unit )</ID>
    <ID>FunctionNaming:ErrorText.kt$@Composable internal fun ErrorText( text: String, modifier: Modifier = Modifier, style: ErrorTextStyle = ErrorTextStyle.Medium )</ID>
    <ID>FunctionNaming:ErrorText.kt$@Preview @Composable private fun ErrorTextPreview()</ID>
    <ID>FunctionNaming:FinancialConnectionsComposeExampleActivity.kt$FinancialConnectionsComposeExampleActivity$@Composable private fun FinancialConnectionsContent( state: FinancialConnectionsExampleState, onButtonClick: () -> Unit )</ID>
    <ID>FunctionNaming:FinancialConnectionsComposeExampleActivity.kt$FinancialConnectionsComposeExampleActivity$@Composable private fun FinancialConnectionsScreen()</ID>
    <ID>FunctionNaming:Form.kt$@Composable internal fun Form( formController: FormController, enabledFlow: Flow&lt;Boolean> )</ID>
    <ID>FunctionNaming:FormLabel.kt$@Composable internal fun FormLabel( text: String, modifier: Modifier = Modifier, enabled: Boolean = true )</ID>
    <ID>FunctionNaming:FormUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun FormUI( hiddenIdentifiersFlow: Flow&lt;List&lt;IdentifierSpec>>, enabledFlow: Flow&lt;Boolean>, elementsFlow: Flow&lt;List&lt;FormElement>?>, lastTextFieldIdentifierFlow: Flow&lt;IdentifierSpec?>, loadingComposable: @Composable ColumnScope.() -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FormUI.kt$@Composable internal fun FormInternal( hiddenIdentifiersFlow: Flow&lt;List&lt;IdentifierSpec>>, enabledFlow: Flow&lt;Boolean>, elementsFlow: Flow&lt;List&lt;FormElement>?>, lastTextFieldIdentifierFlow: Flow&lt;IdentifierSpec?>, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:FormUI.kt$@Composable internal fun Loading()</ID>
    <ID>FunctionNaming:FormUI.kt$@FlowPreview @Composable internal fun Form( formViewModel: FormViewModel, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:GooglePayDivider.kt$@Composable internal fun GooglePayDividerLine()</ID>
    <ID>FunctionNaming:GooglePayDivider.kt$@Composable internal fun GooglePayDividerUi( text: String = stringResource(R.string.stripe_paymentsheet_or_pay_with_card) )</ID>
    <ID>FunctionNaming:GooglePayLauncherComposeActivity.kt$GooglePayLauncherComposeActivity$@Composable private fun GooglePayLauncherScreen( scaffoldState: ScaffoldState, clientSecret: String, googlePayReady: Boolean?, completed: Boolean, onLaunchGooglePay: (String) -> Unit )</ID>
    <ID>FunctionNaming:GooglePayLauncherComposeActivity.kt$GooglePayLauncherComposeActivity$@Composable private fun GooglePayLauncherScreen()</ID>
    <ID>FunctionNaming:GooglePayPaymentMethodLauncherComposeActivity.kt$GooglePayPaymentMethodLauncherComposeActivity$@Composable private fun GooglePayPaymentMethodLauncherScreen( scaffoldState: ScaffoldState, enabled: Boolean, onLaunchGooglePay: () -> Unit )</ID>
    <ID>FunctionNaming:GooglePayPaymentMethodLauncherComposeActivity.kt$GooglePayPaymentMethodLauncherComposeActivity$@Composable private fun GooglePayPaymentMethodLauncherScreen()</ID>
    <ID>FunctionNaming:H4Text.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun H4Text( text: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:H6Text.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun H6Text( text: String, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:Html.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun Html( html: String, imageGetter: Map&lt;String, EmbeddableImage>, color: Color, style: TextStyle, modifier: Modifier = Modifier, enabled: Boolean = true, urlSpanStyle: SpanStyle = SpanStyle(textDecoration = TextDecoration.Underline), imageAlign: PlaceholderVerticalAlign = PlaceholderVerticalAlign.AboveBaseline )</ID>
    <ID>FunctionNaming:Html.kt$@Composable private fun ClickableText( text: AnnotatedString, modifier: Modifier = Modifier, inlineContent: Map&lt;String, InlineTextContent> = mapOf(), color: Color = MaterialTheme.paymentsColors.subtitle, style: TextStyle = MaterialTheme.typography.body2, softWrap: Boolean = true, overflow: TextOverflow = TextOverflow.Clip, maxLines: Int = Int.MAX_VALUE, onTextLayout: (TextLayoutResult) -> Unit = {}, onClick: (Int) -> Unit )</ID>
    <ID>FunctionNaming:HyperlinkedText.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun HyperlinkedText( text: String, modifier: Modifier = Modifier, color: Color = Color.Unspecified, style: TextStyle = LocalTextStyle.current )</ID>
    <ID>FunctionNaming:IDEALPaymentMethodActivity.kt$IDEALPaymentMethodActivity$@Composable private fun IDEALScreen()</ID>
    <ID>FunctionNaming:IdentifierSpec.kt$IdentifierSpec.Companion$fun Generic(_value: String)</ID>
    <ID>FunctionNaming:InputAddressScreen.kt$@Composable internal fun InputAddressScreen( injector: NonFallbackInjector )</ID>
    <ID>FunctionNaming:InputAddressScreen.kt$@Composable internal fun InputAddressScreen( primaryButtonEnabled: Boolean, primaryButtonText: String, title: String, onPrimaryButtonClick: () -> Unit, onCloseClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit, checkboxContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>FunctionNaming:LinkAppBar.kt$@Composable internal fun LinkAppBar( state: LinkAppBarState, onBackPressed: () -> Unit, onLogout: () -> Unit, showBottomSheetContent: (BottomSheetContent?) -> Unit )</ID>
    <ID>FunctionNaming:LinkAppBar.kt$@Preview @Composable private fun LinkAppBarPreview()</ID>
    <ID>FunctionNaming:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_ChildScreen()</ID>
    <ID>FunctionNaming:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_ChildScreen_NoEmail()</ID>
    <ID>FunctionNaming:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_NoEmail()</ID>
    <ID>FunctionNaming:LinkButtonView.kt$@Composable private fun LinkButton( enabled: Boolean, email: String?, onClick: () -> Unit )</ID>
    <ID>FunctionNaming:LinkButtonView.kt$@Composable private fun LinkButton( linkPaymentLauncher: LinkPaymentLauncher, enabled: Boolean, onClick: () -> Unit )</ID>
    <ID>FunctionNaming:LinkButtonView.kt$@Preview @Composable private fun LinkButton()</ID>
    <ID>FunctionNaming:LinkInlineSignup.kt$@Composable internal fun LinkInlineSignup( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, enabled: Boolean, expanded: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, toggleExpanded: () -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:LinkInlineSignup.kt$@Preview @Composable private fun Preview()</ID>
    <ID>FunctionNaming:LinkInlineSignup.kt$@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) @OptIn(ExperimentalComposeUiApi::class) @Composable fun LinkInlineSignup( linkPaymentLauncher: LinkPaymentLauncher, enabled: Boolean, onStateChanged: (InlineSignupViewState) -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:LinkLogoutSheet.kt$@Composable internal fun LinkLogoutSheet( onLogoutClick: () -> Unit, onCancelClick: () -> Unit )</ID>
    <ID>FunctionNaming:LinkMenu.kt$@Composable internal fun &lt;T : LinkMenuItem> LinkMenu( items: List&lt;T>, onItemPress: (T) -> Unit )</ID>
    <ID>FunctionNaming:LinkMenu.kt$@Composable private fun &lt;T : LinkMenuItem> LinkBottomSheetRow( item: T, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:LinkTerms.kt$@Preview @Composable internal fun LinkTerms( modifier: Modifier = Modifier, textAlign: TextAlign = TextAlign.Center )</ID>
    <ID>FunctionNaming:LpmSelectorText.kt$@Composable internal fun LpmSelectorText( @DrawableRes icon: Int? = null, text: String, textColor: Color, modifier: Modifier, isEnabled: Boolean )</ID>
    <ID>FunctionNaming:MandateTextUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun MandateTextUI( element: MandateTextElement )</ID>
    <ID>FunctionNaming:ManualUSBankAccountPaymentMethodActivity.kt$ManualUSBankAccountPaymentMethodActivity$@Composable private fun CollectBankScreen()</ID>
    <ID>FunctionNaming:ManualUSBankAccountPaymentMethodActivity.kt$ManualUSBankAccountPaymentMethodActivity$@Composable private fun VerificationNeededScreen()</ID>
    <ID>FunctionNaming:ManualUSBankAccountPaymentMethodActivity.kt$ManualUSBankAccountPaymentMethodActivity$@Composable private fun VerifyWithMicrodepositScreen()</ID>
    <ID>FunctionNaming:MeasureComposableWidth.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun MeasureComposableWidth( composable: @Composable () -> Unit, content: @Composable (width: Dp) -> Unit )</ID>
    <ID>FunctionNaming:Menu.kt$@Composable internal fun DropdownMenuItemContent( onClick: () -> Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = MenuDefaults.DropdownMenuItemContentPadding, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, content: @Composable RowScope.() -> Unit )</ID>
    <ID>FunctionNaming:Menu.kt$@Suppress("ModifierParameter") @Composable internal fun DropdownMenuContent( expandedStates: MutableTransitionState&lt;Boolean>, transformOriginState: MutableState&lt;TransformOrigin>, initialFirstVisibleItemIndex: Int, modifier: Modifier = Modifier, content: LazyListScope.() -> Unit )</ID>
    <ID>FunctionNaming:OTPElementUI.kt$@OptIn(ExperimentalMaterialApi::class) @Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun OTPElementUI( enabled: Boolean, element: OTPElement, modifier: Modifier = Modifier, colors: OTPElementColors = OTPElementColors( selectedBorder = MaterialTheme.colors.primary, placeholder = MaterialTheme.paymentsColors.placeholderText ), focusRequester: FocusRequester = remember { FocusRequester() } )</ID>
    <ID>FunctionNaming:PaymentDetails.kt$@Composable internal fun PaymentDetailsListItem( paymentDetails: ConsumerPaymentDetails.PaymentDetails, enabled: Boolean, isSupported: Boolean, isSelected: Boolean, isUpdating: Boolean, onClick: () -> Unit, onMenuButtonClick: () -> Unit )</ID>
    <ID>FunctionNaming:PaymentDetails.kt$@Composable internal fun RowScope.BankAccountInfo( bankAccount: ConsumerPaymentDetails.BankAccount, enabled: Boolean )</ID>
    <ID>FunctionNaming:PaymentDetails.kt$@Composable internal fun RowScope.CardInfo( card: Card, enabled: Boolean )</ID>
    <ID>FunctionNaming:PaymentDetails.kt$@Composable internal fun RowScope.PaymentDetails( paymentDetails: ConsumerPaymentDetails.PaymentDetails, enabled: Boolean )</ID>
    <ID>FunctionNaming:PaymentMethodBody.kt$@Composable internal fun PaymentMethodBody( linkAccount: LinkAccount, injector: NonFallbackInjector, loadFromArgs: Boolean )</ID>
    <ID>FunctionNaming:PaymentMethodBody.kt$@Composable internal fun PaymentMethodBody( supportedPaymentMethods: List&lt;SupportedPaymentMethod>, selectedPaymentMethod: SupportedPaymentMethod, primaryButtonLabel: String, primaryButtonState: PrimaryButtonState, secondaryButtonLabel: String, errorMessage: ErrorMessage?, onPaymentMethodSelected: (SupportedPaymentMethod) -> Unit, onPrimaryButtonClick: () -> Unit, onSecondaryButtonClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>FunctionNaming:PaymentMethodBody.kt$@Composable private fun RowScope.PaymentMethodTypeCell( paymentMethod: SupportedPaymentMethod, selected: Boolean, enabled: Boolean, onSelected: () -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:PaymentMethodBody.kt$@Preview @Composable private fun PaymentMethodBodyPreview()</ID>
    <ID>FunctionNaming:PaymentMethodsUI.kt$@Composable internal fun PaymentMethodUI( viewWidth: Dp, iconRes: Int, title: String, isSelected: Boolean, isEnabled: Boolean, tintOnSelected: Boolean, itemIndex: Int, modifier: Modifier = Modifier, onItemSelectedListener: (Int) -> Unit )</ID>
    <ID>FunctionNaming:PaymentMethodsUI.kt$@Composable internal fun PaymentMethodsUI( paymentMethods: List&lt;SupportedPaymentMethod>, selectedIndex: Int, isEnabled: Boolean, onItemSelectedListener: (SupportedPaymentMethod) -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:PaymentOptionsAdapter.kt$@Composable internal fun PaymentOptionUi( viewWidth: Dp, isSelected: Boolean, isEditing: Boolean, isEnabled: Boolean, iconRes: Int, @DrawableRes labelIcon: Int? = null, labelText: String = "", removePmDialogTitle: String = "", description: String, onRemoveListener: (() -> Unit)? = null, onRemoveAccessibilityDescription: String = "", onItemSelectedListener: (() -> Unit) )</ID>
    <ID>FunctionNaming:PaymentsTheme.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun DefaultPaymentsTheme( content: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:PaymentsTheme.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun PaymentsTheme( colors: PaymentsColors = PaymentsTheme.getColors(isSystemInDarkTheme()), shapes: PaymentsShapes = PaymentsTheme.shapesMutable, typography: PaymentsTypography = PaymentsTheme.typographyMutable, content: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:PhoneNumberElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun PhoneNumberCollectionSection( enabled: Boolean, phoneNumberController: PhoneNumberController, @StringRes sectionTitle: Int? = null, requestFocusWhenShown: Boolean = false, imeAction: ImeAction = ImeAction.Done )</ID>
    <ID>FunctionNaming:PhoneNumberElementUI.kt$@Composable internal fun PhoneNumberElementUI( enabled: Boolean, controller: PhoneNumberController, requestFocusWhenShown: Boolean = false, imeAction: ImeAction = ImeAction.Done )</ID>
    <ID>FunctionNaming:PrimaryButton.kt$@Composable @Preview private fun PrimaryButton()</ID>
    <ID>FunctionNaming:PrimaryButton.kt$@Composable internal fun PrimaryButton( label: String, state: PrimaryButtonState, onButtonClick: () -> Unit, @DrawableRes iconStart: Int? = null, @DrawableRes iconEnd: Int? = null )</ID>
    <ID>FunctionNaming:PrimaryButton.kt$@Composable internal fun SecondaryButton( enabled: Boolean, label: String, onClick: () -> Unit )</ID>
    <ID>FunctionNaming:PrimaryButton.kt$@Composable private fun LabelUI(label: String)</ID>
    <ID>FunctionNaming:PrimaryButton.kt$@Composable private fun PrimaryButtonIcon( @DrawableRes icon: Int? )</ID>
    <ID>FunctionNaming:RowElementUI.kt$@Composable internal fun RowElementUI( enabled: Boolean, controller: RowController, hiddenIdentifiers: List&lt;IdentifierSpec>, lastTextFieldIdentifier: IdentifierSpec? )</ID>
    <ID>FunctionNaming:SameAsShippingElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun SameAsShippingElementUI( controller: SameAsShippingController )</ID>
    <ID>FunctionNaming:SaveForFutureUseElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun SaveForFutureUseElementUI( enabled: Boolean, element: SaveForFutureUseElement )</ID>
    <ID>FunctionNaming:ScanCardButtonUI.kt$@Composable internal fun ScanCardButtonUI( enabled: Boolean, onResult: (intent: Intent) -> Unit )</ID>
    <ID>FunctionNaming:SectionElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun SectionElementUI( enabled: Boolean, element: SectionElement, hiddenIdentifiers: List&lt;IdentifierSpec>, lastTextFieldIdentifier: IdentifierSpec? )</ID>
    <ID>FunctionNaming:SectionFieldElementUI.kt$@Composable internal fun SectionFieldElementUI( enabled: Boolean, field: SectionFieldElement, modifier: Modifier = Modifier, hiddenIdentifiers: List&lt;IdentifierSpec>? = null, lastTextFieldIdentifier: IdentifierSpec?, nextFocusDirection: FocusDirection = FocusDirection.Down, previousFocusDirection: FocusDirection = FocusDirection.Up )</ID>
    <ID>FunctionNaming:SectionUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun SectionCard( modifier: Modifier = Modifier, isSelected: Boolean = false, border: BorderStroke = MaterialTheme.getBorderStroke(isSelected), content: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:SectionUI.kt$@Composable internal fun Section( @StringRes title: Int?, error: String?, contentOutsideCard: @Composable () -> Unit = {}, contentInCard: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:SectionUI.kt$@Composable internal fun SectionError(error: String)</ID>
    <ID>FunctionNaming:SectionUI.kt$@Composable internal fun SectionTitle(@StringRes titleText: Int?)</ID>
    <ID>FunctionNaming:SignUpScreen.kt$@Composable internal fun EmailCollectionSection( enabled: Boolean, emailController: TextFieldController, signUpState: SignUpState, focusRequester: FocusRequester = remember { FocusRequester() } )</ID>
    <ID>FunctionNaming:SignUpScreen.kt$@Composable internal fun SignUpBody( injector: NonFallbackInjector, email: String? )</ID>
    <ID>FunctionNaming:SignUpScreen.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable internal fun SignUpBody( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, isReadyToSignUp: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, onSignUpClick: () -> Unit )</ID>
    <ID>FunctionNaming:SignUpScreen.kt$@Preview @Composable private fun SignUpBodyPreview()</ID>
    <ID>FunctionNaming:SimpleDialogElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun SimpleDialogElementUI( openDialog: MutableState&lt;Boolean>, titleText: String, messageText: String, confirmText: String, dismissText: String, onConfirmListener: (() -> Unit) = {}, onDismissListener: (() -> Unit) = {} )</ID>
    <ID>FunctionNaming:StaticTextElementUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun StaticTextElementUI( element: StaticTextElement )</ID>
    <ID>FunctionNaming:TextFieldUI.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun TextFieldColors( shouldShowError: Boolean = false )</ID>
    <ID>FunctionNaming:TextFieldUI.kt$@Composable fun AnimatedIcons( icons: List&lt;TextFieldIcon.Trailing>, loading: Boolean )</ID>
    <ID>FunctionNaming:TextFieldUI.kt$@Composable fun TextField( textFieldController: TextFieldController, enabled: Boolean, imeAction: ImeAction, modifier: Modifier = Modifier, onTextStateChanged: (TextFieldState?) -> Unit = {}, nextFocusDirection: FocusDirection = FocusDirection.Next, previousFocusDirection: FocusDirection = FocusDirection.Previous )</ID>
    <ID>FunctionNaming:TextFieldUI.kt$@Composable fun TextFieldSection( textFieldController: TextFieldController, imeAction: ImeAction, enabled: Boolean, modifier: Modifier = Modifier, @StringRes sectionTitle: Int? = null, onTextStateChanged: (TextFieldState?) -> Unit = {} )</ID>
    <ID>FunctionNaming:TextFieldUI.kt$@Composable internal fun TrailingIcon( trailingIcon: TextFieldIcon.Trailing, loading: Boolean )</ID>
    <ID>FunctionNaming:Theme.kt$@Composable internal fun DefaultLinkTheme( darkTheme: Boolean = isSystemInDarkTheme(), content: @Composable () -> Unit )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun AccountDetailsForm( bankName: String?, last4: String?, saveForFutureUsage: Boolean )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun MandateCollectionScreen( screenState: USBankAccountFormScreenState.MandateCollection )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun NameAndEmailCollectionScreen( screenState: USBankAccountFormScreenState.NameAndEmailCollection )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun NameAndEmailForm( name: String, email: String? )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun SavedAccountScreen( screenState: USBankAccountFormScreenState.SavedAccount )</ID>
    <ID>FunctionNaming:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun VerifyWithMicrodepositsScreen( screenState: USBankAccountFormScreenState.VerifyWithMicrodeposits )</ID>
    <ID>FunctionNaming:VerificationDialog.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable fun LinkVerificationDialog( linkLauncher: LinkPaymentLauncher, verificationCallback: LinkVerificationCallback )</ID>
    <ID>FunctionNaming:VerificationScreen.kt$@Composable internal fun VerificationBody( @StringRes headerStringResId: Int, @StringRes messageStringResId: Int, showChangeEmailMessage: Boolean, redactedPhoneNumber: String, email: String, otpElement: OTPElement, isProcessing: Boolean, errorMessage: ErrorMessage?, focusRequester: FocusRequester, onBack: () -> Unit, onChangeEmailClick: () -> Unit, onResendCodeClick: () -> Unit )</ID>
    <ID>FunctionNaming:VerificationScreen.kt$@Composable internal fun VerificationBodyFullFlow( linkAccount: LinkAccount, injector: NonFallbackInjector )</ID>
    <ID>FunctionNaming:VerificationScreen.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable internal fun VerificationBody( @StringRes headerStringResId: Int, @StringRes messageStringResId: Int, showChangeEmailMessage: Boolean, linkAccount: LinkAccount, injector: NonFallbackInjector, onVerificationCompleted: (() -> Unit)? = null )</ID>
    <ID>FunctionNaming:VerificationScreen.kt$@Preview @Composable private fun VerificationBodyPreview()</ID>
    <ID>FunctionNaming:WalletPaymentMethodMenu.kt$@Composable internal fun WalletPaymentMethodMenu( paymentDetails: ConsumerPaymentDetails.PaymentDetails, onEditClick: () -> Unit, onSetDefaultClick: () -> Unit, onRemoveClick: () -> Unit, onCancelClick: () -> Unit )</ID>
    <ID>FunctionNaming:WalletScreen.kt$@Composable internal fun CardDetailsRecollectionForm( expiryDateController: TextFieldController, cvcController: CvcController, isCardExpired: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>FunctionNaming:WalletScreen.kt$@Composable internal fun CollapsedPaymentDetails( selectedPaymentMethod: ConsumerPaymentDetails.PaymentDetails, enabled: Boolean, onClick: () -> Unit )</ID>
    <ID>FunctionNaming:WalletScreen.kt$@Composable internal fun WalletBody( linkAccount: LinkAccount, injector: NonFallbackInjector, showBottomSheetContent: (BottomSheetContent?) -> Unit )</ID>
    <ID>FunctionNaming:WalletScreen.kt$@Composable internal fun WalletBody( uiState: WalletUiState, primaryButtonLabel: String, expiryDateController: TextFieldController, cvcController: CvcController, setExpanded: (Boolean) -> Unit, onItemSelected: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onAddNewPaymentMethodClick: () -> Unit, onEditPaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onSetDefault: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onDeletePaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onPrimaryButtonClick: () -> Unit, onPayAnotherWayClick: () -> Unit, showBottomSheetContent: (BottomSheetContent?) -> Unit )</ID>
    <ID>FunctionNaming:WalletScreen.kt$@Composable private fun ExpandedPaymentDetails( uiState: WalletUiState, onItemSelected: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onMenuButtonClick: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onAddNewPaymentMethodClick: () -> Unit, onCollapse: () -> Unit )</ID>
    <ID>FunctionNaming:WalletScreen.kt$@Preview @Composable private fun WalletBodyPreview()</ID>
    <ID>FunctionOnlyReturningConstant:AppDetails.kt$internal fun getSdkVersion(): String</ID>
    <ID>FunctionOnlyReturningConstant:AppDetails.kt$private fun getApplicationId(): String</ID>
    <ID>FunctionOnlyReturningConstant:Device.kt$@SuppressLint("HardwareIds") private fun getAndroidId()</ID>
    <ID>FunctionOnlyReturningConstant:Device.kt$internal fun getPlatform()</ID>
    <ID>FunctionOnlyReturningConstant:FaceDetectorTransitioner.kt$FaceDetectorTransitioner$private fun isFaceFocused(): Boolean</ID>
    <ID>FunctionOnlyReturningConstant:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.PaymentIntentTestInput.Companion$fun toCsvHeader()</ID>
    <ID>FunctionOnlyReturningConstant:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.TestOutput.Companion$fun toCsvHeader()</ID>
    <ID>FunctionParameterNaming:IdentifierSpec.kt$IdentifierSpec.Companion$_value: String</ID>
    <ID>ImplicitDefaultLocale:CurrencyFormatterTest.kt$CurrencyFormatterTest$String.format("%s, ", it.currencyCode)</ID>
    <ID>ImplicitDefaultLocale:DateConfigTest.kt$DateConfigTest$String.format( "%d%d", get1BasedCurrentMonth() + 1 % 12, Calendar.getInstance().get(Calendar.YEAR) % 100 )</ID>
    <ID>ImplicitDefaultLocale:DateConfigTest.kt$DateConfigTest$String.format( "%d%d", get1BasedCurrentMonth(), (Calendar.getInstance().get(Calendar.YEAR) + 1) % 100 )</ID>
    <ID>ImplicitDefaultLocale:DateConfigTest.kt$DateConfigTest$String.format( "%d%d", get1BasedCurrentMonth(), (Calendar.getInstance().get(Calendar.YEAR) - 1) % 100 )</ID>
    <ID>ImplicitDefaultLocale:DateConfigTest.kt$DateConfigTest$String.format( "%d%d", get1BasedCurrentMonth(), Calendar.getInstance().get(Calendar.YEAR) % 100 )</ID>
    <ID>ImplicitDefaultLocale:DateConfigTest.kt$DateConfigTest$String.format( "%d%d", previousMonth, Calendar.getInstance().get(Calendar.YEAR) % 100 )</ID>
    <ID>ImportOrdering:com.stripe.android.financialconnections.example.FinancialConnectionsBankAccountTokenExampleActivity.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.financialconnections.example.FinancialConnectionsDataExampleActivity.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.financialconnections.example.FinancialConnectionsExampleViewModel.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.PaymentOptionContract.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.PaymentOptionsActivity.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.addresselement.AddressElementActivity.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.addresselement.AutocompleteViewModel.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.addresselement.InputAddressViewModel.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.example.MainActivity.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.forms.CompleteFormFieldValueFilterTest.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.paymentdatacollection.ach.USBankAccountFormFragment.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.paymentdatacollection.ach.di.USBankAccountFormComponent.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.repositories.CustomerRepositoryTest.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.paymentsheet.ui.BillingAddressViewTest.kt:3</ID>
    <ID>ImportOrdering:com.stripe.android.stripecardscan.cardimageverification.result.MainLoopAggregator.kt:3</ID>
    <ID>Indentation:com.stripe.android.financialconnections.example.FinancialConnectionsDataExampleActivity.kt:8</ID>
    <ID>Indentation:com.stripe.android.paymentsheet.example.samples.activity.BasePaymentSheetActivity.kt:49</ID>
    <ID>Indentation:com.stripe.android.paymentsheet.example.samples.activity.BasePaymentSheetActivity.kt:50</ID>
    <ID>LargeClass:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity : BasePaymentSheetActivity</ID>
    <ID>LargeClass:CardInputWidget.kt$CardInputWidget : LinearLayoutCardWidget</ID>
    <ID>LargeClass:CardInputWidgetTest.kt$CardInputWidgetTest</ID>
    <ID>LargeClass:CardMultilineWidgetTest.kt$CardMultilineWidgetTest</ID>
    <ID>LargeClass:CardNumberEditTextTest.kt$CardNumberEditTextTest</ID>
    <ID>LargeClass:CustomerSessionTest.kt$CustomerSessionTest</ID>
    <ID>LargeClass:DefaultFlowControllerTest.kt$DefaultFlowControllerTest</ID>
    <ID>LargeClass:DriverLicenseScanFragmentTest.kt$DriverLicenseScanFragmentTest</ID>
    <ID>LargeClass:IDScanFragmentTest.kt$IDScanFragmentTest</ID>
    <ID>LargeClass:MemoizeTest.kt$MemoizeTest</ID>
    <ID>LargeClass:PaymentIntentFixtures.kt$PaymentIntentFixtures</ID>
    <ID>LargeClass:PaymentSheetActivityTest.kt$PaymentSheetActivityTest</ID>
    <ID>LargeClass:PaymentSheetViewModelTest.kt$PaymentSheetViewModelTest</ID>
    <ID>LargeClass:SetupIntentFixtures.kt$SetupIntentFixtures</ID>
    <ID>LargeClass:SourceParamsTest.kt$SourceParamsTest</ID>
    <ID>LargeClass:Stripe.kt$Stripe</ID>
    <ID>LargeClass:StripeApiRepository.kt$StripeApiRepository : StripeRepository</ID>
    <ID>LargeClass:StripeApiRepositoryTest.kt$StripeApiRepositoryTest</ID>
    <ID>LargeClass:StripeKtxTest.kt$StripeKtxTest</ID>
    <ID>LongMethod:AddressElementActivity.kt$AddressElementActivity$@OptIn(ExperimentalAnimationApi::class) override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun Colors( currentAppearance: PaymentSheet.Appearance )</ID>
    <ID>LongMethod:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$@Composable private fun PrimaryButton( currentAppearance: PaymentSheet.Appearance )</ID>
    <ID>LongMethod:AutocompleteScreen.kt$@Composable internal fun AutocompleteScreenUI(viewModel: AutocompleteViewModel)</ID>
    <ID>LongMethod:BaseAddPaymentMethodFragment.kt$BaseAddPaymentMethodFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:BaseSheetActivity.kt$BaseSheetActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:CardEditScreen.kt$@Composable internal fun CardEditBody( isProcessing: Boolean, isDefault: Boolean, setAsDefaultChecked: Boolean, primaryButtonEnabled: Boolean, errorMessage: ErrorMessage?, onSetAsDefaultClick: (Boolean) -> Unit, onPrimaryButtonClick: () -> Unit, onCancelClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>LongMethod:CardFormView.kt$CardFormView$private fun setupCardWidget()</ID>
    <ID>LongMethod:CardFormViewTest.kt$CardFormViewTest$@Test fun testCardValidCallback()</ID>
    <ID>LongMethod:CardImageVerificationDemoActivity.kt$CardImageVerificationDemoActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:CardInputWidget.kt$CardInputWidget$private fun initView(attrs: AttributeSet?)</ID>
    <ID>LongMethod:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable fun AllowedDocumentTypes( identitySubmissionState: IdentitySubmissionState, onSubmissionStateChangedListener: (IdentitySubmissionState) -> Unit )</ID>
    <ID>LongMethod:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable fun ExampleScreen()</ID>
    <ID>LongMethod:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable fun RequireDocTypes( identitySubmissionState: IdentitySubmissionState, onSubmissionStateChangedListener: (IdentitySubmissionState) -> Unit )</ID>
    <ID>LongMethod:ComposeExampleActivity.kt$ComposeExampleActivity$@Composable internal fun LoadVSView( loadingState: LoadingState, identitySubmissionState: IdentitySubmissionState, scaffoldState: ScaffoldState, coroutineScope: CoroutineScope, onLoadingStateChanged: (LoadingState) -> Unit, onPostResult: (String, String, String) -> Unit )</ID>
    <ID>LongMethod:ConnectUSBankAccountActivity.kt$ConnectUSBankAccountActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:ConsentScreen.kt$@Composable private fun SuccessUI( verificationPage: VerificationPage, onMerchantViewCreated: (ImageView) -> Unit, onConsentAgreed: (Boolean) -> Unit, onConsentDeclined: (Boolean) -> Unit )</ID>
    <ID>LongMethod:CustomerSessionOperationExecutor.kt$CustomerSessionOperationExecutor$@JvmSynthetic internal suspend fun execute( ephemeralKey: EphemeralKey, operation: EphemeralOperation )</ID>
    <ID>LongMethod:CustomerSessionTest.kt$CustomerSessionTest$@BeforeTest fun setup()</ID>
    <ID>LongMethod:CustomerSessionTest.kt$CustomerSessionTest$private suspend fun setupErrorProxy()</ID>
    <ID>LongMethod:DriverLicenseScanFragmentTest.kt$DriverLicenseScanFragmentTest$@Test fun `front scanned and uploaded - response is missing back - back UI is on - back scanned and uploaded - not require selfie - submit`()</ID>
    <ID>LongMethod:DriverLicenseScanFragmentTest.kt$DriverLicenseScanFragmentTest$@Test fun `front scanned and uploaded - response is missing back - back UI is on - back scanned and uploaded - require selfie - to selfie`()</ID>
    <ID>LongMethod:DropdownFieldUI.kt$@Composable internal fun DropDown( controller: DropdownFieldController, enabled: Boolean, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:DurationTest.kt$DurationTest$@Test @SmallTest fun reflective()</ID>
    <ID>LongMethod:Fetcher.kt$WebFetcher$override suspend fun fetchData(forImmediateUse: Boolean, isOptional: Boolean): FetchedData</ID>
    <ID>LongMethod:FieldPopulator.kt$FieldPopulator$private fun populatePlatformLpmFields(values: Values = Values())</ID>
    <ID>LongMethod:FieldPopulator.kt$FieldPopulator$private fun verifyPlatformLpmFields(values: Values = Values())</ID>
    <ID>LongMethod:FormViewModelTest.kt$FormViewModelTest$@ExperimentalCoroutinesApi @Test fun `Verify params are set when element address fields are complete`()</ID>
    <ID>LongMethod:FormViewModelTest.kt$FormViewModelTest$@ExperimentalCoroutinesApi @Test fun `Verify params are set when required address fields are complete`()</ID>
    <ID>LongMethod:GooglePayJsonFactoryTest.kt$GooglePayJsonFactoryTest$@Test fun testCreatePaymentMethodRequestJson()</ID>
    <ID>LongMethod:GooglePayLauncherComposeActivity.kt$GooglePayLauncherComposeActivity$@Composable private fun GooglePayLauncherScreen()</ID>
    <ID>LongMethod:Html.kt$@Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun annotatedStringResource( text: String, imageGetter: Map&lt;String, EmbeddableImage> = emptyMap(), urlSpanStyle: SpanStyle = SpanStyle(textDecoration = TextDecoration.Underline) ): AnnotatedString</ID>
    <ID>LongMethod:IDDetectorAnalyzer.kt$IDDetectorAnalyzer$override suspend fun analyze( data: AnalyzerInput, state: IdentityScanState ): AnalyzerOutput</ID>
    <ID>LongMethod:IDEALPaymentMethodActivity.kt$IDEALPaymentMethodActivity$@Composable private fun IDEALScreen()</ID>
    <ID>LongMethod:IDScanFragmentTest.kt$IDScanFragmentTest$@Test fun `front scanned and uploaded - response is missing back - back UI is on - back scanned and uploaded - not require selfie - submit`()</ID>
    <ID>LongMethod:IDScanFragmentTest.kt$IDScanFragmentTest$@Test fun `front scanned and uploaded - response is missing back - back UI is on - back scanned and uploaded - require selfie - to selfie`()</ID>
    <ID>LongMethod:IdentityActivity.kt$IdentityActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:IdentityCameraScanFragment.kt$IdentityCameraScanFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:IdentityViewModel.kt$IdentityViewModel$internal fun uploadScanResult( result: IdentityAggregator.FinalResult, verificationPage: VerificationPage, targetScanType: IdentityScanState.ScanType? )</ID>
    <ID>LongMethod:IdentityViewModel.kt$IdentityViewModel$private fun uploadDocumentImagesAndNotify( imageFile: File, filePurpose: StripeFilePurpose, uploadMethod: UploadMethod, scores: List&lt;Float>? = null, isHighRes: Boolean, isFront: Boolean, scanType: IdentityScanState.ScanType, compressionQuality: Float )</ID>
    <ID>LongMethod:IdentityViewModelTest.kt$IdentityViewModelTest$private fun testUploadDocumentScanSuccessResult(isFront: Boolean)</ID>
    <ID>LongMethod:IdentityViewModelTest.kt$IdentityViewModelTest$private fun testUploadSelfieScanSuccessResult( selfie: FaceDetectorTransitioner.Selfie, isHighRes: Boolean )</ID>
    <ID>LongMethod:InputAddressScreen.kt$@Composable internal fun InputAddressScreen( injector: NonFallbackInjector )</ID>
    <ID>LongMethod:Layout.kt$@CheckResult @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun Size.resizeRegion( originalRegion: Rect, newRegion: Rect, newSize: Size ): Map&lt;Rect, Rect></ID>
    <ID>LongMethod:LinkActivity.kt$LinkActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:LinkAppBar.kt$@Composable internal fun LinkAppBar( state: LinkAppBarState, onBackPressed: () -> Unit, onLogout: () -> Unit, showBottomSheetContent: (BottomSheetContent?) -> Unit )</ID>
    <ID>LongMethod:LinkInlineSignup.kt$@Composable internal fun LinkInlineSignup( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, enabled: Boolean, expanded: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, toggleExpanded: () -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:ManualUSBankAccountPaymentMethodActivity.kt$ManualUSBankAccountPaymentMethodActivity$@Composable private fun CollectBankScreen()</ID>
    <ID>LongMethod:ManualUSBankAccountPaymentMethodActivity.kt$ManualUSBankAccountPaymentMethodActivity$@Composable private fun VerifyWithMicrodepositScreen()</ID>
    <ID>LongMethod:Menu.kt$@Suppress("ModifierParameter") @Composable internal fun DropdownMenuContent( expandedStates: MutableTransitionState&lt;Boolean>, transformOriginState: MutableState&lt;TransformOrigin>, initialFirstVisibleItemIndex: Int, modifier: Modifier = Modifier, content: LazyListScope.() -> Unit )</ID>
    <ID>LongMethod:OTPElementUI.kt$@OptIn(ExperimentalMaterialApi::class) @Composable @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun OTPElementUI( enabled: Boolean, element: OTPElement, modifier: Modifier = Modifier, colors: OTPElementColors = OTPElementColors( selectedBorder = MaterialTheme.colors.primary, placeholder = MaterialTheme.paymentsColors.placeholderText ), focusRequester: FocusRequester = remember { FocusRequester() } )</ID>
    <ID>LongMethod:PassportScanFragmentTest.kt$PassportScanFragmentTest$@Test fun `front scanned and uploaded - not require selfie - submit`()</ID>
    <ID>LongMethod:PassportScanFragmentTest.kt$PassportScanFragmentTest$@Test fun `front scanned and uploaded - require selfie - to selfie`()</ID>
    <ID>LongMethod:PaymentAuthConfigTest.kt$PaymentAuthConfigTest$@Test fun testUiCustomizationWrapper()</ID>
    <ID>LongMethod:PaymentDetails.kt$@Composable internal fun PaymentDetailsListItem( paymentDetails: ConsumerPaymentDetails.PaymentDetails, enabled: Boolean, isSupported: Boolean, isSelected: Boolean, isUpdating: Boolean, onClick: () -> Unit, onMenuButtonClick: () -> Unit )</ID>
    <ID>LongMethod:PaymentFlowResultProcessor.kt$PaymentFlowResultProcessor$suspend fun processResult( unvalidatedResult: PaymentFlowResult.Unvalidated ): S</ID>
    <ID>LongMethod:PaymentIntentJsonParser.kt$PaymentIntentJsonParser$override fun parse(json: JSONObject): PaymentIntent?</ID>
    <ID>LongMethod:PaymentMethodBody.kt$@Composable internal fun PaymentMethodBody( linkAccount: LinkAccount, injector: NonFallbackInjector, loadFromArgs: Boolean )</ID>
    <ID>LongMethod:PaymentMethodJsonParser.kt$PaymentMethodJsonParser$override fun parse(json: JSONObject): PaymentMethod</ID>
    <ID>LongMethod:PaymentOptionsActivity.kt$PaymentOptionsActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PaymentOptionsAdapter.kt$@Composable internal fun PaymentOptionUi( viewWidth: Dp, isSelected: Boolean, isEditing: Boolean, isEnabled: Boolean, iconRes: Int, @DrawableRes labelIcon: Int? = null, labelText: String = "", removePmDialogTitle: String = "", description: String, onRemoveListener: (() -> Unit)? = null, onRemoveAccessibilityDescription: String = "", onItemSelectedListener: (() -> Unit) )</ID>
    <ID>LongMethod:PaymentSheetActivity.kt$PaymentSheetActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PaymentSheetConfigurationKtx.kt$internal fun PaymentSheet.Appearance.parseAppearance()</ID>
    <ID>LongMethod:PaymentSheetPlaygroundActivity.kt$PaymentSheetPlaygroundActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PhoneNumberElementUI.kt$@Composable internal fun PhoneNumberElementUI( enabled: Boolean, controller: PhoneNumberController, requestFocusWhenShown: Boolean = false, imeAction: ImeAction = ImeAction.Done )</ID>
    <ID>LongMethod:PlaygroundTestDriver.kt$PlaygroundTestDriver$private fun doAuthorization()</ID>
    <ID>LongMethod:SSDTest.kt$SSDTest$@Test fun determineLayoutAndFilter_linearDiagonalBottomLeftTopRight()</ID>
    <ID>LongMethod:SSDTest.kt$SSDTest$@Test fun determineLayoutAndFilter_linearDiagonalTopLeftBottomRight()</ID>
    <ID>LongMethod:SSDTest.kt$SSDTest$@Test fun determineLayoutAndFilter_linearNumbers()</ID>
    <ID>LongMethod:SSDTest.kt$SSDTest$@Test fun determineLayoutAndFilter_visaQuickReadNumbers()</ID>
    <ID>LongMethod:SectionFieldElementUI.kt$@Composable internal fun SectionFieldElementUI( enabled: Boolean, field: SectionFieldElement, modifier: Modifier = Modifier, hiddenIdentifiers: List&lt;IdentifierSpec>? = null, lastTextFieldIdentifier: IdentifierSpec?, nextFocusDirection: FocusDirection = FocusDirection.Down, previousFocusDirection: FocusDirection = FocusDirection.Up )</ID>
    <ID>LongMethod:SignUpScreen.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable internal fun SignUpBody( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, isReadyToSignUp: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, onSignUpClick: () -> Unit )</ID>
    <ID>LongMethod:SourceParamsTest.kt$SourceParamsTest$@Test fun `createKlarna() should create expected params`()</ID>
    <ID>LongMethod:StaticCardAccountRangeSourceTest.kt$StaticCardAccountRangeSourceTest$@Test fun `getAccountRange() should return expected AccountRange`()</ID>
    <ID>LongMethod:Stripe3ds2ChallengeResultProcessor.kt$DefaultStripe3ds2ChallengeResultProcessor$override suspend fun process( challengeResult: ChallengeResult ): PaymentFlowResult.Unvalidated</ID>
    <ID>LongMethod:Stripe3ds2TransactionActivity.kt$Stripe3ds2TransactionActivity$public override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:StripeApiRepositoryTest.kt$StripeApiRepositoryTest$@Test fun getPaymentMethods_whenPopulated_returnsExpectedList()</ID>
    <ID>LongMethod:TextFieldUI.kt$@Composable fun TextField( textFieldController: TextFieldController, enabled: Boolean, imeAction: ImeAction, modifier: Modifier = Modifier, onTextStateChanged: (TextFieldState?) -> Unit = {}, nextFocusDirection: FocusDirection = FocusDirection.Next, previousFocusDirection: FocusDirection = FocusDirection.Previous )</ID>
    <ID>LongMethod:TransformGoogleToStripeAddress.kt$@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP) fun Place.transformGoogleToStripeAddress( context: Context ): com.stripe.android.model.Address</ID>
    <ID>LongMethod:TransformGoogleToStripeAddressTest.kt$TransformGoogleToStripeAddressTest$@Test fun `test JP address`()</ID>
    <ID>LongMethod:TransformGoogleToStripeAddressTest.kt$TransformGoogleToStripeAddressTest$@Test fun `test US address with sublocality`()</ID>
    <ID>LongMethod:TransformGoogleToStripeAddressTest.kt$TransformGoogleToStripeAddressTest$@Test fun `test US address without sublocality`()</ID>
    <ID>LongMethod:TransformGoogleToStripeAddressTest.kt$TransformGoogleToStripeAddressTest$@Test fun `test should not combine dependent locality - US`()</ID>
    <ID>LongMethod:USBankAccountFormFragment.kt$USBankAccountFormFragment$@Composable private fun AccountDetailsForm( bankName: String?, last4: String?, saveForFutureUsage: Boolean )</ID>
    <ID>LongMethod:USBankAccountFormFragment.kt$USBankAccountFormFragment$override fun onCreateView( inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle? ): View</ID>
    <ID>LongMethod:USBankAccountFormViewModel.kt$USBankAccountFormViewModel$private fun attachFinancialAccountToIntent( clientSecret: ClientSecret, intentId: String, linkAccountId: String, bankName: String?, last4: String? )</ID>
    <ID>LongMethod:VerificationDialog.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable fun LinkVerificationDialog( linkLauncher: LinkPaymentLauncher, verificationCallback: LinkVerificationCallback )</ID>
    <ID>LongMethod:VerificationScreen.kt$@Composable internal fun VerificationBody( @StringRes headerStringResId: Int, @StringRes messageStringResId: Int, showChangeEmailMessage: Boolean, redactedPhoneNumber: String, email: String, otpElement: OTPElement, isProcessing: Boolean, errorMessage: ErrorMessage?, focusRequester: FocusRequester, onBack: () -> Unit, onChangeEmailClick: () -> Unit, onResendCodeClick: () -> Unit )</ID>
    <ID>LongMethod:WalletScreen.kt$@Composable internal fun WalletBody( uiState: WalletUiState, primaryButtonLabel: String, expiryDateController: TextFieldController, cvcController: CvcController, setExpanded: (Boolean) -> Unit, onItemSelected: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onAddNewPaymentMethodClick: () -> Unit, onEditPaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onSetDefault: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onDeletePaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onPrimaryButtonClick: () -> Unit, onPayAnotherWayClick: () -> Unit, showBottomSheetContent: (BottomSheetContent?) -> Unit )</ID>
    <ID>LongMethod:WalletScreen.kt$@Composable private fun ExpandedPaymentDetails( uiState: WalletUiState, onItemSelected: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onMenuButtonClick: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onAddNewPaymentMethodClick: () -> Unit, onCollapse: () -> Unit )</ID>
    <ID>LongParameterList:AddressElement.kt$AddressElement$( _identifier: IdentifierSpec, private val addressRepository: AddressRepository, private var rawValuesMap: Map&lt;IdentifierSpec, String?> = emptyMap(), private val addressType: AddressType = AddressType.Normal(), countryCodes: Set&lt;String> = emptySet(), countryDropdownFieldController: DropdownFieldController = DropdownFieldController( CountryConfig(countryCodes), rawValuesMap[IdentifierSpec.Country] ), sameAsShippingElement: SameAsShippingElement?, shippingValuesMap: Map&lt;IdentifierSpec, String?>? )</ID>
    <ID>LongParameterList:AndroidMenu.kt$( expanded: Boolean, initialFirstVisibleItemIndex: Int, onDismissRequest: () -> Unit, modifier: Modifier = Modifier, offset: DpOffset = DpOffset(0.dp, 0.dp), properties: PopupProperties = PopupProperties(focusable = true), content: LazyListScope.() -> Unit )</ID>
    <ID>LongParameterList:AndroidMenu.kt$( onClick: () -> Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = MenuDefaults.DropdownMenuItemContentPadding, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, content: @Composable RowScope.() -> Unit )</ID>
    <ID>LongParameterList:BaseAddPaymentMethodFragment.kt$BaseAddPaymentMethodFragment.Companion$( showPaymentMethod: SupportedPaymentMethod, stripeIntent: StripeIntent, config: PaymentSheet.Configuration?, merchantName: String, amount: Amount? = null, @InjectorKey injectorKey: String, newLpm: PaymentSelection.New?, isShowingLinkInlineSignup: Boolean = false )</ID>
    <ID>LongParameterList:BaseSheetViewModel.kt$BaseSheetViewModel$( application: Application, internal val config: PaymentSheet.Configuration?, internal val eventReporter: EventReporter, protected val customerRepository: CustomerRepository, protected val prefsRepository: PrefsRepository, protected val workContext: CoroutineContext = Dispatchers.IO, protected val logger: Logger, @InjectorKey val injectorKey: String, val lpmResourceRepository: ResourceRepository&lt;LpmRepository>, val addressResourceRepository: ResourceRepository&lt;AddressRepository>, val savedStateHandle: SavedStateHandle, val linkLauncher: LinkPaymentLauncher )</ID>
    <ID>LongParameterList:CardBillingAddressElement.kt$CardBillingAddressElement$( identifier: IdentifierSpec, rawValuesMap: Map&lt;IdentifierSpec, String?> = emptyMap(), addressRepository: AddressRepository, countryCodes: Set&lt;String> = emptySet(), countryDropdownFieldController: DropdownFieldController = DropdownFieldController( CountryConfig(countryCodes), rawValuesMap[IdentifierSpec.Country] ), sameAsShippingElement: SameAsShippingElement?, shippingValuesMap: Map&lt;IdentifierSpec, String?>? )</ID>
    <ID>LongParameterList:CardEditScreen.kt$( isProcessing: Boolean, isDefault: Boolean, setAsDefaultChecked: Boolean, primaryButtonEnabled: Boolean, errorMessage: ErrorMessage?, onSetAsDefaultClick: (Boolean) -> Unit, onPrimaryButtonClick: () -> Unit, onCancelClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>LongParameterList:CardEditScreenTest.kt$CardEditScreenTest$( isProcessing: Boolean = false, isDefault: Boolean = false, setAsDefaultChecked: Boolean = false, primaryButtonEnabled: Boolean = true, errorMessage: ErrorMessage? = null, onSetAsDefaultClick: (Boolean) -> Unit = {}, onPrimaryButtonClick: () -> Unit = {}, onCancelClick: () -> Unit = {} )</ID>
    <ID>LongParameterList:CollectedDataParam.kt$CollectedDataParam.Companion$( firstHighResResult: UploadedResult, firstLowResResult: UploadedResult, lastHighResResult: UploadedResult, lastLowResResult: UploadedResult, bestHighResResult: UploadedResult, bestLowResResult: UploadedResult, trainingConsent: Boolean, bestFaceScore: Float, faceScoreVariance: Float, numFrames: Int )</ID>
    <ID>LongParameterList:CombinePriors.kt$( trainedImageSize: Size, featureMapSize: Size, shrinkage: Size, boxSizeMin: Float, boxSizeMax: Float, aspectRatio: Float )</ID>
    <ID>LongParameterList:ComposeExampleActivity.kt$ComposeExampleActivity$( enabled: Boolean, submissionState: IdentitySubmissionState, scaffoldState: ScaffoldState, coroutineScope: CoroutineScope, onLoadingStateChanged: (LoadingState) -> Unit, onPostResult: (String, String, String) -> Unit )</ID>
    <ID>LongParameterList:ComposeExampleActivity.kt$ComposeExampleActivity$( loadingState: LoadingState, identitySubmissionState: IdentitySubmissionState, scaffoldState: ScaffoldState, coroutineScope: CoroutineScope, onLoadingStateChanged: (LoadingState) -> Unit, onPostResult: (String, String, String) -> Unit )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentMethodCreateParams: PaymentMethodCreateParams, clientSecret: String, savePaymentMethod: Boolean? = null, mandateId: String? = null, mandateData: MandateDataParams? = null, setupFutureUsage: SetupFutureUsage? = null, shipping: Shipping? = null, paymentMethodOptions: PaymentMethodOptionsParams? = null )</ID>
    <ID>LongParameterList:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Companion$( paymentMethodId: String, clientSecret: String, savePaymentMethod: Boolean? = null, paymentMethodOptions: PaymentMethodOptionsParams? = null, mandateId: String? = null, mandateData: MandateDataParams? = null, setupFutureUsage: SetupFutureUsage? = null, shipping: Shipping? = null )</ID>
    <ID>LongParameterList:ConsentScreen.kt$( verificationState: Resource&lt;VerificationPage>, onMerchantViewCreated: (ImageView) -> Unit, onSuccess: (VerificationPage) -> Unit, onFallbackUrl: (String) -> Unit, onError: (Throwable) -> Unit, onConsentAgreed: (Boolean) -> Unit, onConsentDeclined: (Boolean) -> Unit )</ID>
    <ID>LongParameterList:CustomerSession.kt$CustomerSession$( context: Context, stripeRepository: StripeRepository, publishableKey: String, stripeAccountId: String?, private val workContext: CoroutineContext = createCoroutineDispatcher(), private val operationIdFactory: OperationIdFactory = StripeOperationIdFactory(), private val timeSupplier: TimeSupplier = { Calendar.getInstance().timeInMillis }, ephemeralKeyManagerFactory: EphemeralKeyManager.Factory )</ID>
    <ID>LongParameterList:CustomerSession.kt$CustomerSession$( paymentMethodType: PaymentMethod.Type, @IntRange(from = 1, to = 100) limit: Int? = null, endingBefore: String? = null, startingAfter: String? = null, productUsage: Set&lt;String>, listener: PaymentMethodsRetrievalListener )</ID>
    <ID>LongParameterList:DefaultFlowController.kt$DefaultFlowController$( // Properties provided through FlowControllerComponent.Builder private val lifecycleScope: CoroutineScope, lifecycleOwner: LifecycleOwner, private val statusBarColor: () -> Int?, private val paymentOptionFactory: PaymentOptionFactory, private val paymentOptionCallback: PaymentOptionCallback, private val paymentResultCallback: PaymentSheetResultCallback, activityResultCaller: ActivityResultCaller, @InjectorKey private val injectorKey: String, // Properties provided through injection private val flowControllerInitializer: FlowControllerInitializer, private val customerApiRepository: CustomerApiRepository, private val eventReporter: EventReporter, private val viewModel: FlowControllerViewModel, private val paymentLauncherFactory: StripePaymentLauncherAssistedFactory, // even though unused this forces Dagger to initialize it here. private val lpmResourceRepository: ResourceRepository&lt;LpmRepository>, private val addressResourceRepository: ResourceRepository&lt;AddressRepository>, /** * [PaymentConfiguration] is [Lazy] because the client might set publishableKey and * stripeAccountId after creating a [DefaultFlowController]. */ private val lazyPaymentConfiguration: Provider&lt;PaymentConfiguration>, @UIContext private val uiContext: CoroutineContext, @Named(ENABLE_LOGGING) private val enableLogging: Boolean, @Named(PRODUCT_USAGE) private val productUsage: Set&lt;String>, private val googlePayPaymentMethodLauncherFactory: GooglePayPaymentMethodLauncherFactory, private val linkLauncher: LinkPaymentLauncher )</ID>
    <ID>LongParameterList:DefaultFlowController.kt$DefaultFlowController.Companion$( appContext: Context, viewModelStoreOwner: ViewModelStoreOwner, lifecycleScope: CoroutineScope, lifecycleOwner: LifecycleOwner, activityResultCaller: ActivityResultCaller, statusBarColor: () -> Int?, paymentOptionFactory: PaymentOptionFactory, paymentOptionCallback: PaymentOptionCallback, paymentResultCallback: PaymentSheetResultCallback )</ID>
    <ID>LongParameterList:DefaultFlowControllerInitializer.kt$DefaultFlowControllerInitializer$( clientSecret: ClientSecret, stripeIntent: StripeIntent, customerConfig: PaymentSheet.CustomerConfiguration?, config: PaymentSheet.Configuration?, isGooglePayReady: Boolean, isLinkReady: Boolean )</ID>
    <ID>LongParameterList:DefaultFlowControllerInitializer.kt$DefaultFlowControllerInitializer$( private val prefsRepositoryFactory: @JvmSuppressWildcards (PaymentSheet.CustomerConfiguration?) -> PrefsRepository, private val googlePayRepositoryFactory: @JvmSuppressWildcards (GooglePayEnvironment) -> GooglePayRepository, private val stripeIntentRepository: StripeIntentRepository, private val stripeIntentValidator: StripeIntentValidator, private val customerRepository: CustomerRepository, private val lpmResourceRepository: ResourceRepository&lt;LpmRepository>, private val logger: Logger, val eventReporter: EventReporter, @IOContext private val workContext: CoroutineContext, @Named(LINK_ENABLED) private val isLinkEnabled: Boolean )</ID>
    <ID>LongParameterList:DefaultPaymentAuthenticatorRegistry.kt$DefaultPaymentAuthenticatorRegistry.Companion$( context: Context, stripeRepository: StripeRepository, analyticsRequestExecutor: AnalyticsRequestExecutor, paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, enableLogging: Boolean, workContext: CoroutineContext, uiContext: CoroutineContext, threeDs1IntentReturnUrlMap: MutableMap&lt;String, String>, publishableKeyProvider: () -> String, productUsage: Set&lt;String>, isInstantApp: Boolean )</ID>
    <ID>LongParameterList:FlowControllerFactory.kt$FlowControllerFactory$( private val viewModelStoreOwner: ViewModelStoreOwner, private val lifecycleScope: CoroutineScope, private val lifecycleOwner: LifecycleOwner, private val appContext: Context, private val activityResultCaller: ActivityResultCaller, private val statusBarColor: () -> Int?, private val paymentOptionFactory: PaymentOptionFactory, private val paymentOptionCallback: PaymentOptionCallback, private val paymentResultCallback: PaymentSheetResultCallback )</ID>
    <ID>LongParameterList:FormControllerModule.kt$FormControllerModule.Companion$( addressResourceRepository: ResourceRepository&lt;AddressRepository>, context: Context, merchantName: String, stripeIntent: StripeIntent?, @Named(INITIAL_VALUES) initialValues: Map&lt;IdentifierSpec, String?>, @Named(SHIPPING_VALUES) shippingValues: Map&lt;IdentifierSpec, String?>?, viewOnlyFields: Set&lt;IdentifierSpec> )</ID>
    <ID>LongParameterList:FormUI.kt$( hiddenIdentifiersFlow: Flow&lt;List&lt;IdentifierSpec>>, enabledFlow: Flow&lt;Boolean>, elementsFlow: Flow&lt;List&lt;FormElement>?>, lastTextFieldIdentifierFlow: Flow&lt;IdentifierSpec?>, loadingComposable: @Composable ColumnScope.() -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:GooglePayJsonFactory.kt$GooglePayJsonFactory$( /** * Details about the authorization of the transaction based upon whether the user agrees to * the transaction or not. Includes total price and price status. */ transactionInfo: TransactionInfo, /** * Configure additional fields to be returned for a requested billing address. */ billingAddressParameters: BillingAddressParameters? = null, /** * Specify shipping address restrictions. */ shippingAddressParameters: ShippingAddressParameters? = null, /** * Set to true to request an email address. */ isEmailRequired: Boolean = false, /** * Merchant name encoded as UTF-8. Merchant name is rendered in the payment sheet. * In TEST environment, or if a merchant isn't recognized, a “Pay Unverified Merchant” message is displayed in the payment sheet. */ merchantInfo: MerchantInfo? = null, /** * Set to false if you don't support credit cards */ allowCreditCards: Boolean? = null )</ID>
    <ID>LongParameterList:GooglePayLauncher.kt$GooglePayLauncher$( lifecycleScope: CoroutineScope, private val config: Config, private val readyCallback: ReadyCallback, private val activityResultLauncher: ActivityResultLauncher&lt;GooglePayLauncherContract.Args>, private val googlePayRepositoryFactory: (GooglePayEnvironment) -> GooglePayRepository, paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, analyticsRequestExecutor: AnalyticsRequestExecutor )</ID>
    <ID>LongParameterList:GooglePayPaymentMethodLauncher.kt$GooglePayPaymentMethodLauncher$( @Assisted lifecycleScope: CoroutineScope, @Assisted private val config: Config, @Assisted private val readyCallback: ReadyCallback, @Assisted private val activityResultLauncher: ActivityResultLauncher&lt;GooglePayPaymentMethodLauncherContract.Args>, @Assisted private val skipReadyCheck: Boolean, context: Context, private val googlePayRepositoryFactory: (GooglePayEnvironment) -> GooglePayRepository, @Named(PRODUCT_USAGE) private val productUsage: Set&lt;String>, @Named(PUBLISHABLE_KEY) private val publishableKeyProvider: () -> String, @Named(STRIPE_ACCOUNT_ID) private val stripeAccountIdProvider: () -> String?, // Default value for the following parameters is used only when instantiating from the public // constructors instead of dependency injection. @Named(ENABLE_LOGGING) private val enableLogging: Boolean = BuildConfig.DEBUG, @IOContext private val ioContext: CoroutineContext = Dispatchers.IO, paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory = PaymentAnalyticsRequestFactory( context, PaymentConfiguration.getInstance(context).publishableKey, setOf(PRODUCT_USAGE_TOKEN) ), analyticsRequestExecutor: AnalyticsRequestExecutor = DefaultAnalyticsRequestExecutor(), stripeRepository: StripeRepository = StripeApiRepository( context, publishableKeyProvider, logger = Logger.getInstance(enableLogging), workContext = ioContext, productUsageTokens = setOf(PRODUCT_USAGE_TOKEN), paymentAnalyticsRequestFactory = paymentAnalyticsRequestFactory ) )</ID>
    <ID>LongParameterList:GooglePayPaymentMethodLauncherViewModel.kt$GooglePayPaymentMethodLauncherViewModel$( private val paymentsClient: PaymentsClient, private val requestOptions: ApiRequest.Options, private val args: GooglePayPaymentMethodLauncherContract.Args, private val stripeRepository: StripeRepository, private val googlePayJsonFactory: GooglePayJsonFactory, private val googlePayRepository: GooglePayRepository, private val savedStateHandle: SavedStateHandle )</ID>
    <ID>LongParameterList:Html.kt$( html: String, imageGetter: Map&lt;String, EmbeddableImage>, color: Color, style: TextStyle, modifier: Modifier = Modifier, enabled: Boolean = true, urlSpanStyle: SpanStyle = SpanStyle(textDecoration = TextDecoration.Underline), imageAlign: PlaceholderVerticalAlign = PlaceholderVerticalAlign.AboveBaseline )</ID>
    <ID>LongParameterList:Html.kt$( text: AnnotatedString, modifier: Modifier = Modifier, inlineContent: Map&lt;String, InlineTextContent> = mapOf(), color: Color = MaterialTheme.paymentsColors.subtitle, style: TextStyle = MaterialTheme.typography.body2, softWrap: Boolean = true, overflow: TextOverflow = TextOverflow.Clip, maxLines: Int = Int.MAX_VALUE, onTextLayout: (TextLayoutResult) -> Unit = {}, onClick: (Int) -> Unit )</ID>
    <ID>LongParameterList:IdentityAnalyticsRequestFactory.kt$IdentityAnalyticsRequestFactory$( isFromFallbackUrl: Boolean, scanType: IdentityScanState.ScanType? = null, requireSelfie: Boolean? = null, docFrontRetryTimes: Int? = null, docBackRetryTimes: Int? = null, selfieRetryTimes: Int? = null, docFrontUploadType: DocumentUploadParam.UploadMethod? = null, docBackUploadType: DocumentUploadParam.UploadMethod? = null, docFrontModelScore: Float? = null, docBackModelScore: Float? = null, selfieModelScore: Float? = null )</ID>
    <ID>LongParameterList:IdentityAnalyticsRequestFactory.kt$IdentityAnalyticsRequestFactory$( isFromFallbackUrl: Boolean, scanType: IdentityScanState.ScanType? = null, requireSelfie: Boolean? = null, docFrontUploadType: DocumentUploadParam.UploadMethod? = null, docBackUploadType: DocumentUploadParam.UploadMethod? = null, throwable: Throwable )</ID>
    <ID>LongParameterList:IdentityAnalyticsRequestFactory.kt$IdentityAnalyticsRequestFactory$( value: Long, compressionQuality: Float, scanType: IdentityScanState.ScanType, id: String?, fileName: String?, fileSize: Long )</ID>
    <ID>LongParameterList:IdentityExampleViewModel.kt$IdentityExampleViewModel$( allowDrivingLicense: Boolean, allowPassport: Boolean, allowId: Boolean, requireLiveCapture: Boolean, requireId: Boolean, requireSelfie: Boolean )</ID>
    <ID>LongParameterList:IdentityFragmentFactory.kt$IdentityFragmentFactory$( private val cameraPermissionEnsureable: CameraPermissionEnsureable, private val appSettingsOpenable: AppSettingsOpenable, private val verificationFlowFinishable: VerificationFlowFinishable, private val identityScanViewModelFactory: IdentityScanViewModel.IdentityScanViewModelFactory, private val consentFragmentViewModelFactory: ConsentFragmentViewModel.ConsentFragmentViewModelFactory, internal val identityViewModelFactory: ViewModelProvider.Factory, private val fallbackUrlLauncher: FallbackUrlLauncher, private val identityIO: IdentityIO )</ID>
    <ID>LongParameterList:IdentityIO.kt$IdentityIO$( originalUri: Uri, verificationId: String, isFullFrame: Boolean, side: String? = null, maxDimension: Int, compressionQuality: Float )</ID>
    <ID>LongParameterList:IdentityViewModel.kt$IdentityViewModel$( imageFile: File, filePurpose: StripeFilePurpose, uploadMethod: UploadMethod, scores: List&lt;Float>? = null, isHighRes: Boolean, isFront: Boolean, scanType: IdentityScanState.ScanType, compressionQuality: Float )</ID>
    <ID>LongParameterList:IdentityViewModel.kt$IdentityViewModel$( internal val verificationArgs: IdentityVerificationSheetContract.Args, private val identityRepository: IdentityRepository, private val identityModelFetcher: IdentityModelFetcher, private val identityIO: IdentityIO, internal val identityAnalyticsRequestFactory: IdentityAnalyticsRequestFactory, internal val fpsTracker: FPSTracker, internal val screenTracker: ScreenTracker, private val savedStateHandle: SavedStateHandle, @UIContext internal val uiContext: CoroutineContext, @IOContext internal val workContext: CoroutineContext )</ID>
    <ID>LongParameterList:IdentityViewModel.kt$IdentityViewModel$( originalBitmap: Bitmap, boundingBox: BoundingBox, docCapturePage: VerificationPageStaticContentDocumentCapturePage, isHighRes: Boolean, isFront: Boolean, scores: List&lt;Float>, targetScanType: IdentityScanState.ScanType )</ID>
    <ID>LongParameterList:InlineSignupViewModel.kt$InlineSignupViewModel$( @Named(LINK_INTENT) val stripeIntent: StripeIntent, @Named(MERCHANT_NAME) val merchantName: String, @Named(CUSTOMER_EMAIL) customerEmail: String?, @Named(CUSTOMER_PHONE) customerPhone: String?, @Named(CUSTOMER_NAME) customerName: String?, private val linkAccountManager: LinkAccountManager, private val linkEventsReporter: LinkEventsReporter, private val logger: Logger )</ID>
    <ID>LongParameterList:InputAddressScreen.kt$( primaryButtonEnabled: Boolean, primaryButtonText: String, title: String, onPrimaryButtonClick: () -> Unit, onCloseClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit, checkboxContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>LongParameterList:LinkInlineSignup.kt$( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, enabled: Boolean, expanded: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, toggleExpanded: () -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:LinkInlineSignupViewTest.kt$LinkInlineSignupViewTest$( merchantName: String = "Example, Inc.", emailElement: SimpleTextFieldController = SimpleTextFieldController.createEmailSectionController("email@me.co"), phoneController: PhoneNumberController = PhoneNumberController.createPhoneNumberController(), nameController: SimpleTextFieldController = SimpleTextFieldController.createNameSectionController(null), signUpState: SignUpState = SignUpState.InputtingEmail, enabled: Boolean = true, expanded: Boolean = true, requiresNameCollection: Boolean = false, errorMessage: ErrorMessage? = null, toggleExpanded: () -> Unit = {} )</ID>
    <ID>LongParameterList:LinkPaymentLauncher.kt$LinkPaymentLauncher$( context: Context, @Named(PRODUCT_USAGE) private val productUsage: Set&lt;String>, @Named(PUBLISHABLE_KEY) private val publishableKeyProvider: () -> String, @Named(STRIPE_ACCOUNT_ID) private val stripeAccountIdProvider: () -> String?, @Named(ENABLE_LOGGING) private val enableLogging: Boolean, @IOContext ioContext: CoroutineContext, @UIContext uiContext: CoroutineContext, paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, analyticsRequestExecutor: AnalyticsRequestExecutor, stripeRepository: StripeRepository, addressResourceRepository: ResourceRepository&lt;AddressRepository> )</ID>
    <ID>LongParameterList:LinkRepository.kt$LinkRepository$( email: String, phone: String, country: String, name: String?, authSessionCookie: String?, consentAction: ConsumerSignUpConsentAction )</ID>
    <ID>LongParameterList:Menu.kt$( onClick: () -> Unit, modifier: Modifier = Modifier, enabled: Boolean = true, contentPadding: PaddingValues = MenuDefaults.DropdownMenuItemContentPadding, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, content: @Composable RowScope.() -> Unit )</ID>
    <ID>LongParameterList:NV21Image.kt$( width: Int, height: Int, planeBuffers: Array&lt;ByteBuffer>, rowStrides: IntArray, pixelStrides: IntArray, format: Int, crop: Rect = Rect(0, 0, width, height) )</ID>
    <ID>LongParameterList:Network.kt$Network$( stripePublishableKey: String, path: String, data: Request, requestSerializer: KSerializer&lt;Request>, responseSerializer: KSerializer&lt;Response>, errorSerializer: KSerializer&lt;Error> )</ID>
    <ID>LongParameterList:PaymentDetails.kt$( paymentDetails: ConsumerPaymentDetails.PaymentDetails, enabled: Boolean, isSupported: Boolean, isSelected: Boolean, isUpdating: Boolean, onClick: () -> Unit, onMenuButtonClick: () -> Unit )</ID>
    <ID>LongParameterList:PaymentLauncherModule.kt$PaymentLauncherModule$( context: Context, stripeRepository: StripeRepository, @Named(ENABLE_LOGGING) enableLogging: Boolean, @IOContext workContext: CoroutineContext, @UIContext uiContext: CoroutineContext, threeDs1IntentReturnUrlMap: MutableMap&lt;String, String>, defaultAnalyticsRequestExecutor: DefaultAnalyticsRequestExecutor, paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, @Named(PUBLISHABLE_KEY) publishableKeyProvider: () -> String, @Named(PRODUCT_USAGE) productUsage: Set&lt;String>, @Named(IS_INSTANT_APP) isInstantApp: Boolean )</ID>
    <ID>LongParameterList:PaymentLauncherViewModel.kt$PaymentLauncherViewModel$( @Named(IS_PAYMENT_INTENT) private val isPaymentIntent: Boolean, private val stripeApiRepository: StripeRepository, private val authenticatorRegistry: PaymentAuthenticatorRegistry, private val defaultReturnUrl: DefaultReturnUrl, private val apiRequestOptionsProvider: Provider&lt;ApiRequest.Options>, private val threeDs1IntentReturnUrlMap: MutableMap&lt;String, String>, private val lazyPaymentIntentFlowResultProcessor: Lazy&lt;PaymentIntentFlowResultProcessor>, private val lazySetupIntentFlowResultProcessor: Lazy&lt;SetupIntentFlowResultProcessor>, private val analyticsRequestExecutor: DefaultAnalyticsRequestExecutor, private val paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, @UIContext private val uiContext: CoroutineContext, private val savedStateHandle: SavedStateHandle, @Named(IS_INSTANT_APP) private val isInstantApp: Boolean )</ID>
    <ID>LongParameterList:PaymentMethodBody.kt$( supportedPaymentMethods: List&lt;SupportedPaymentMethod>, selectedPaymentMethod: SupportedPaymentMethod, primaryButtonLabel: String, primaryButtonState: PrimaryButtonState, secondaryButtonLabel: String, errorMessage: ErrorMessage?, onPaymentMethodSelected: (SupportedPaymentMethod) -> Unit, onPrimaryButtonClick: () -> Unit, onSecondaryButtonClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>LongParameterList:PaymentMethodScreenTest.kt$PaymentMethodScreenTest$( supportedPaymentMethods: List&lt;SupportedPaymentMethod> = SupportedPaymentMethod.values().toList(), selectedPaymentMethod: SupportedPaymentMethod = SupportedPaymentMethod.Card, primaryButtonState: PrimaryButtonState = PrimaryButtonState.Enabled, errorMessage: ErrorMessage? = null, onPaymentMethodSelected: (SupportedPaymentMethod) -> Unit = {}, onPayButtonClick: () -> Unit = {}, onSecondaryButtonClick: () -> Unit = {} )</ID>
    <ID>LongParameterList:PaymentMethodViewModel.kt$PaymentMethodViewModel$( val args: LinkActivityContract.Args, val linkAccount: LinkAccount, private val linkAccountManager: LinkAccountManager, private val navigator: Navigator, private val confirmationManager: ConfirmationManager, private val logger: Logger, private val formControllerProvider: Provider&lt;FormControllerSubcomponent.Builder> )</ID>
    <ID>LongParameterList:PaymentMethodsUI.kt$( viewWidth: Dp, iconRes: Int, title: String, isSelected: Boolean, isEnabled: Boolean, tintOnSelected: Boolean, itemIndex: Int, modifier: Modifier = Modifier, onItemSelectedListener: (Int) -> Unit )</ID>
    <ID>LongParameterList:PaymentOptionsAdapter.kt$( viewWidth: Dp, isSelected: Boolean, isEditing: Boolean, isEnabled: Boolean, iconRes: Int, @DrawableRes labelIcon: Int? = null, labelText: String = "", removePmDialogTitle: String = "", description: String, onRemoveListener: (() -> Unit)? = null, onRemoveAccessibilityDescription: String = "", onItemSelectedListener: (() -> Unit) )</ID>
    <ID>LongParameterList:PaymentOptionsViewModel.kt$PaymentOptionsViewModel$( args: PaymentOptionContract.Args, prefsRepositoryFactory: (PaymentSheet.CustomerConfiguration?) -> PrefsRepository, eventReporter: EventReporter, customerRepository: CustomerRepository, @IOContext workContext: CoroutineContext, application: Application, logger: Logger, @InjectorKey injectorKey: String, lpmResourceRepository: ResourceRepository&lt;LpmRepository>, addressResourceRepository: ResourceRepository&lt;AddressRepository>, savedStateHandle: SavedStateHandle, linkLauncher: LinkPaymentLauncher )</ID>
    <ID>LongParameterList:PaymentSession.kt$PaymentSession$( private val context: Context, application: Application, viewModelStoreOwner: ViewModelStoreOwner, private val lifecycleOwner: LifecycleOwner, savedStateRegistryOwner: SavedStateRegistryOwner, private val config: PaymentSessionConfig, customerSession: CustomerSession, private val paymentMethodsActivityStarter: ActivityStarter&lt;PaymentMethodsActivity, PaymentMethodsActivityStarter.Args>, private val paymentFlowActivityStarter: ActivityStarter&lt;PaymentFlowActivity, PaymentFlowActivityStarter.Args>, paymentSessionData: PaymentSessionData = PaymentSessionData(config) )</ID>
    <ID>LongParameterList:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest$( args: PaymentSheetContract.Args = PaymentSheetFixtures.ARGS_CUSTOMER_WITH_GOOGLEPAY.copy( injectorKey = "testInjectorKeyAddFragmentTest" ), fragmentConfig: FragmentConfig? = FragmentConfigFixtures.DEFAULT, paymentMethods: List&lt;PaymentMethod> = emptyList(), stripeIntent: StripeIntent? = PaymentIntentFixtures.PI_WITH_SHIPPING, registerInjector: Boolean = true, onReady: (PaymentSheetAddPaymentMethodFragment, FragmentPaymentsheetAddPaymentMethodBinding, PaymentSheetViewModel) -> Unit )</ID>
    <ID>LongParameterList:PaymentSheetPlaygroundActivity.kt$PaymentSheetPlaygroundActivity$( customer: String?, link: Boolean, googlePay: Boolean, currency: String?, merchantCountryCode: String, mode: String?, setShippingAddress: Boolean, setDefaultBillingAddress: Boolean, setAutomaticPaymentMethods: Boolean, setDelayedPaymentMethods: Boolean )</ID>
    <ID>LongParameterList:PaymentSheetPlaygroundViewModel.kt$PaymentSheetPlaygroundViewModel$( customer: CheckoutCustomer, currency: CheckoutCurrency, merchantCountry: CountryCode, mode: CheckoutMode, linkEnabled: Boolean, setShippingAddress: Boolean, setAutomaticPaymentMethod: Boolean, backendUrl: String, supportedPaymentMethods: List&lt;String>? )</ID>
    <ID>LongParameterList:PaymentSheetPlaygroundViewModel.kt$PaymentSheetPlaygroundViewModel$( customer: String, link: Boolean, googlePay: Boolean, currency: String, merchantCountryCode: String, mode: String, setShippingAddress: Boolean, setDefaultBillingAddress: Boolean, setAutomaticPaymentMethods: Boolean, setDelayedPaymentMethods: Boolean, )</ID>
    <ID>LongParameterList:PaymentSheetViewModel.kt$PaymentSheetViewModel$( // Properties provided through PaymentSheetViewModelComponent.Builder application: Application, internal val args: PaymentSheetContract.Args, eventReporter: EventReporter, // Properties provided through injection private val lazyPaymentConfig: Lazy&lt;PaymentConfiguration>, private val stripeIntentRepository: StripeIntentRepository, private val stripeIntentValidator: StripeIntentValidator, customerRepository: CustomerRepository, prefsRepository: PrefsRepository, lpmResourceRepository: ResourceRepository&lt;LpmRepository>, addressResourceRepository: ResourceRepository&lt;AddressRepository>, private val paymentLauncherFactory: StripePaymentLauncherAssistedFactory, private val googlePayPaymentMethodLauncherFactory: GooglePayPaymentMethodLauncherFactory, logger: Logger, @IOContext workContext: CoroutineContext, @InjectorKey injectorKey: String, savedStateHandle: SavedStateHandle, linkLauncher: LinkPaymentLauncher )</ID>
    <ID>LongParameterList:SSD.kt$( scores: Array&lt;ClassifierScores>, boxes: Array&lt;RectForm>, probabilityThreshold: Float, intersectionOverUnionThreshold: Float, limit: Int?, classifierToLabel: (Int) -> Int = { it } )</ID>
    <ID>LongParameterList:ScanFlow.kt$ScanFlow$( context: Context, imageStream: Flow&lt;DataType>, viewFinder: Rect, lifecycleOwner: LifecycleOwner, coroutineScope: CoroutineScope, parameters: Parameters )</ID>
    <ID>LongParameterList:SectionFieldElementUI.kt$( enabled: Boolean, field: SectionFieldElement, modifier: Modifier = Modifier, hiddenIdentifiers: List&lt;IdentifierSpec>? = null, lastTextFieldIdentifier: IdentifierSpec?, nextFocusDirection: FocusDirection = FocusDirection.Down, previousFocusDirection: FocusDirection = FocusDirection.Up )</ID>
    <ID>LongParameterList:SignUpScreen.kt$( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, isReadyToSignUp: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, onSignUpClick: () -> Unit )</ID>
    <ID>LongParameterList:SimpleDialogElementUI.kt$( openDialog: MutableState&lt;Boolean>, titleText: String, messageText: String, confirmText: String, dismissText: String, onConfirmListener: (() -> Unit) = {}, onDismissListener: (() -> Unit) = {} )</ID>
    <ID>LongParameterList:SourceAuthenticator.kt$SourceAuthenticator$( private val paymentBrowserAuthStarterFactory: (AuthActivityStarterHost) -> PaymentBrowserAuthStarter, private val paymentRelayStarterFactory: (AuthActivityStarterHost) -> PaymentRelayStarter, private val analyticsRequestExecutor: AnalyticsRequestExecutor, private val paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, @Named(ENABLE_LOGGING) private val enableLogging: Boolean, @UIContext private val uiContext: CoroutineContext, @Named(PUBLISHABLE_KEY) private val publishableKeyProvider: () -> String, @Named(IS_INSTANT_APP) private val isInstantApp: Boolean )</ID>
    <ID>LongParameterList:SourceParams.kt$SourceParams.Companion$( name: String, iban: String, addressLine1: String?, city: String, postalCode: String, @Size(2) country: String )</ID>
    <ID>LongParameterList:SourceParams.kt$SourceParams.Companion$( name: String, iban: String, email: String?, addressLine1: String?, city: String?, postalCode: String?, @Size(2) country: String? )</ID>
    <ID>LongParameterList:Stripe3ds2TransactionViewModel.kt$Stripe3ds2TransactionViewModel$( private val args: Stripe3ds2TransactionContract.Args, private val stripeRepository: StripeRepository, private val analyticsRequestExecutor: AnalyticsRequestExecutor, private val paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, private val threeDs2Service: StripeThreeDs2Service, private val messageVersionRegistry: MessageVersionRegistry, private val challengeResultProcessor: Stripe3ds2ChallengeResultProcessor, private val initChallengeRepository: InitChallengeRepository, @IOContext private val workContext: CoroutineContext, private val savedStateHandle: SavedStateHandle, @Named(IS_INSTANT_APP) private val isInstantApp: Boolean )</ID>
    <ID>LongParameterList:StripeApi.kt$( stripePublishableKey: String, civId: String, civSecret: String, instanceId: String, scanId: String?, device: Device, appDetails: AppDetails, scanStatistics: ScanStatistics, scanConfig: ScanConfig, payloadInfo: PayloadInfo? )</ID>
    <ID>LongParameterList:StripeApi.kt$( stripePublishableKey: String, instanceId: String, scanId: String?, device: Device, appDetails: AppDetails, scanStatistics: ScanStatistics, scanConfig: ScanConfig )</ID>
    <ID>LongParameterList:StripeApiRepository.kt$StripeApiRepository$( appContext: Context, @Named(PUBLISHABLE_KEY) publishableKeyProvider: () -> String, @IOContext workContext: CoroutineContext, @Named(PRODUCT_USAGE) productUsageTokens: Set&lt;String>, paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, analyticsRequestExecutor: AnalyticsRequestExecutor, logger: Logger )</ID>
    <ID>LongParameterList:StripeApiRepository.kt$StripeApiRepository$( context: Context, publishableKeyProvider: () -> String, private val appInfo: AppInfo? = Stripe.appInfo, private val logger: Logger = Logger.noop(), private val workContext: CoroutineContext = Dispatchers.IO, private val productUsageTokens: Set&lt;String> = emptySet(), private val stripeNetworkClient: StripeNetworkClient = DefaultStripeNetworkClient( workContext = workContext, logger = logger ), private val analyticsRequestExecutor: AnalyticsRequestExecutor = DefaultAnalyticsRequestExecutor(logger, workContext), private val fraudDetectionDataRepository: FraudDetectionDataRepository = DefaultFraudDetectionDataRepository(context, workContext), private val paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory = PaymentAnalyticsRequestFactory(context, publishableKeyProvider, productUsageTokens), private val fraudDetectionDataParamsUtils: FraudDetectionDataParamsUtils = FraudDetectionDataParamsUtils(), betas: Set&lt;StripeApiBeta> = emptySet(), apiVersion: String = ApiVersion(betas = betas.map { it.code }.toSet()).code, sdkVersion: String = StripeSdkVersion.VERSION )</ID>
    <ID>LongParameterList:StripeGooglePayViewModel.kt$StripeGooglePayViewModel$( application: Application, private val publishableKey: String, private val stripeAccountId: String? = null, private val args: StripeGooglePayContract.Args, private val stripeRepository: StripeRepository, private val appName: String, private val workContext: CoroutineContext )</ID>
    <ID>LongParameterList:StripeIntentActivity.kt$StripeIntentActivity$( country: String, paymentMethodCreateParams: PaymentMethodCreateParams?, supportedPaymentMethods: String? = null, shippingDetails: ConfirmPaymentIntentParams.Shipping? = null, stripeAccountId: String? = null, existingPaymentMethodId: String? = null, mandateDataParams: MandateDataParams? = null, onPaymentIntentCreated: (String) -> Unit = {} )</ID>
    <ID>LongParameterList:StripeIntentActivity.kt$StripeIntentActivity$( responseData: JSONObject, params: PaymentMethodCreateParams?, shippingDetails: ConfirmPaymentIntentParams.Shipping?, stripeAccountId: String?, existingPaymentMethodId: String?, mandateDataParams: MandateDataParams?, onPaymentIntentCreated: (String) -> Unit = {} )</ID>
    <ID>LongParameterList:StripePaymentController.kt$StripePaymentController$( context: Context, private val publishableKeyProvider: () -> String, private val stripeRepository: StripeRepository, private val enableLogging: Boolean = false, workContext: CoroutineContext = Dispatchers.IO, private val analyticsRequestExecutor: AnalyticsRequestExecutor = DefaultAnalyticsRequestExecutor(Logger.getInstance(enableLogging), workContext), private val paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory = PaymentAnalyticsRequestFactory(context.applicationContext, publishableKeyProvider), private val alipayRepository: AlipayRepository = DefaultAlipayRepository(stripeRepository), private val uiContext: CoroutineContext = Dispatchers.Main )</ID>
    <ID>LongParameterList:StripePaymentLauncher.kt$StripePaymentLauncher$( @Assisted(PUBLISHABLE_KEY) private val publishableKeyProvider: () -> String, @Assisted(STRIPE_ACCOUNT_ID) private val stripeAccountIdProvider: () -> String?, @Assisted private val hostActivityLauncher: ActivityResultLauncher&lt;PaymentLauncherContract.Args>, context: Context, @Named(ENABLE_LOGGING) private val enableLogging: Boolean, @IOContext ioContext: CoroutineContext, @UIContext uiContext: CoroutineContext, stripeRepository: StripeRepository, paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, @Named(PRODUCT_USAGE) private val productUsage: Set&lt;String> )</ID>
    <ID>LongParameterList:StripeRepository.kt$StripeRepository$( customerId: String, publishableKey: String, productUsageTokens: Set&lt;String>, sourceId: String, @Source.SourceType sourceType: String, requestOptions: ApiRequest.Options )</ID>
    <ID>LongParameterList:TextFieldUI.kt$( textFieldController: TextFieldController, enabled: Boolean, imeAction: ImeAction, modifier: Modifier = Modifier, onTextStateChanged: (TextFieldState?) -> Unit = {}, nextFocusDirection: FocusDirection = FocusDirection.Next, previousFocusDirection: FocusDirection = FocusDirection.Previous )</ID>
    <ID>LongParameterList:TextFieldUI.kt$( textFieldController: TextFieldController, imeAction: ImeAction, enabled: Boolean, modifier: Modifier = Modifier, @StringRes sectionTitle: Int? = null, onTextStateChanged: (TextFieldState?) -> Unit = {} )</ID>
    <ID>LongParameterList:TransformAddressToElement.kt$( identifierSpec: IdentifierSpec, label: Int, capitalization: KeyboardCapitalization, keyboardType: KeyboardType, countryCode: String, showOptionalLabel: Boolean )</ID>
    <ID>LongParameterList:TransformSpecToElements.kt$TransformSpecToElements$( private val addressResourceRepository: ResourceRepository&lt;AddressRepository>, private val initialValues: Map&lt;IdentifierSpec, String?>, private val shippingValues: Map&lt;IdentifierSpec, String?>?, private val amount: Amount?, private val saveForFutureUseInitialValue: Boolean, private val merchantName: String, private val context: Context, private val viewOnlyFields: Set&lt;IdentifierSpec> = emptySet() )</ID>
    <ID>LongParameterList:VerificationScreen.kt$( @StringRes headerStringResId: Int, @StringRes messageStringResId: Int, showChangeEmailMessage: Boolean, linkAccount: LinkAccount, injector: NonFallbackInjector, onVerificationCompleted: (() -> Unit)? = null )</ID>
    <ID>LongParameterList:VerificationScreen.kt$( @StringRes headerStringResId: Int, @StringRes messageStringResId: Int, showChangeEmailMessage: Boolean, redactedPhoneNumber: String, email: String, otpElement: OTPElement, isProcessing: Boolean, errorMessage: ErrorMessage?, focusRequester: FocusRequester, onBack: () -> Unit, onChangeEmailClick: () -> Unit, onResendCodeClick: () -> Unit )</ID>
    <ID>LongParameterList:VerificationScreenTest.kt$VerificationScreenTest$( redactedPhoneNumber: String = "+1********23", email: String = "test@stripe.com", otpElement: OTPElement = OTPSpec.transform(), isProcessing: Boolean = false, errorMessage: ErrorMessage? = null, onBack: () -> Unit = { }, onChangeEmailClick: () -> Unit = { }, onResendCodeClick: () -> Unit = { } )</ID>
    <ID>LongParameterList:WalletScreen.kt$( uiState: WalletUiState, primaryButtonLabel: String, expiryDateController: TextFieldController, cvcController: CvcController, setExpanded: (Boolean) -> Unit, onItemSelected: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onAddNewPaymentMethodClick: () -> Unit, onEditPaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onSetDefault: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onDeletePaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onPrimaryButtonClick: () -> Unit, onPayAnotherWayClick: () -> Unit, showBottomSheetContent: (BottomSheetContent?) -> Unit )</ID>
    <ID>LongParameterList:WalletScreenTest.kt$WalletScreenTest$( supportedTypes: Set&lt;String> = SupportedPaymentMethod.allTypes, selectedItem: ConsumerPaymentDetails.PaymentDetails? = paymentDetails.first(), isExpanded: Boolean = true, errorMessage: ErrorMessage? = null, expiryDateController: TextFieldController = SimpleTextFieldController(DateConfig()), cvcController: CvcController = CvcController(cardBrandFlow = flowOf(CardBrand.Visa)), setExpanded: (Boolean) -> Unit = {}, onItemSelected: (ConsumerPaymentDetails.PaymentDetails) -> Unit = {}, onAddNewPaymentMethodClick: () -> Unit = {}, onEditPaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit = {}, onSetDefault: (ConsumerPaymentDetails.PaymentDetails) -> Unit = {}, onDeletePaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit = {}, onPayButtonClick: () -> Unit = {}, onPayAnotherWayClick: () -> Unit = {}, showBottomSheetContent: ((BottomSheetContent?) -> Unit)? = null )</ID>
    <ID>LongParameterList:WebIntentAuthenticator.kt$WebIntentAuthenticator$( host: AuthActivityStarterHost, stripeIntent: StripeIntent, requestCode: Int, clientSecret: String, authUrl: String, stripeAccount: String?, returnUrl: String? = null, shouldCancelSource: Boolean = false, shouldCancelIntentOnUserNavigation: Boolean = true )</ID>
    <ID>LongParameterList:WebIntentAuthenticator.kt$WebIntentAuthenticator$( private val paymentBrowserAuthStarterFactory: (AuthActivityStarterHost) -> PaymentBrowserAuthStarter, private val analyticsRequestExecutor: AnalyticsRequestExecutor, private val paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, @Named(ENABLE_LOGGING) private val enableLogging: Boolean, @UIContext private val uiContext: CoroutineContext, private val threeDs1IntentReturnUrlMap: MutableMap&lt;String, String>, @Named(PUBLISHABLE_KEY) private val publishableKeyProvider: () -> String, @Named(IS_INSTANT_APP) private val isInstantApp: Boolean )</ID>
    <ID>LongParameterList:WebIntentAuthenticatorTest.kt$WebIntentAuthenticatorTest$( stripeIntent: StripeIntent, expectedUrl: String, expectedReturnUrl: String?, expectedRequestCode: Int, expectedShouldCancelIntentOnUserNavigation: Boolean = true, expectedAnalyticsEvent: PaymentAnalyticsEvent? )</ID>
    <ID>MagicNumber:AddFpxPaymentMethodTest.kt$AddFpxPaymentMethodTest$11</ID>
    <ID>MagicNumber:AddNetbankingPaymentMethodTest.kt$AddNetbankingPaymentMethodTest$10</ID>
    <ID>MagicNumber:AfterpayClearpayHeaderElement.kt$AfterpayClearpayHeaderElement$3</ID>
    <ID>MagicNumber:AfterpayClearpayHeaderElement.kt$AfterpayClearpayHeaderElement$4</ID>
    <ID>MagicNumber:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$159</ID>
    <ID>MagicNumber:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$16</ID>
    <ID>MagicNumber:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$169</ID>
    <ID>MagicNumber:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$242</ID>
    <ID>MagicNumber:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$247</ID>
    <ID>MagicNumber:AutocompleteScreen.kt$0.07f</ID>
    <ID>MagicNumber:BankAccount.kt$BankAccount$3</ID>
    <ID>MagicNumber:BasePaymentSheetActivity.kt$0.5f</ID>
    <ID>MagicNumber:BasePaymentSheetActivity.kt$0xff635BFF</ID>
    <ID>MagicNumber:BasePaymentSheetActivity.kt$0xfff2f2f7</ID>
    <ID>MagicNumber:BecsDebitBsbEditText.kt$BecsDebitBsbEditText$3</ID>
    <ID>MagicNumber:BecsDebitBsbEditText.kt$BecsDebitBsbEditText.&lt;no name provided>$4</ID>
    <ID>MagicNumber:BecsDebitWidget.kt$BecsDebitWidget$4</ID>
    <ID>MagicNumber:BecsDebitWidget.kt$BecsDebitWidget$6</ID>
    <ID>MagicNumber:BecsDebitWidget.kt$BecsDebitWidget$8</ID>
    <ID>MagicNumber:BecsDebitWidget.kt$BecsDebitWidget$9</ID>
    <ID>MagicNumber:BillingAddressView.kt$BillingAddressView.PostalCodeConfig.Global$13</ID>
    <ID>MagicNumber:BillingAddressView.kt$BillingAddressView.PostalCodeConfig.UnitedStates$5</ID>
    <ID>MagicNumber:BitmapExtensions.kt$100.0</ID>
    <ID>MagicNumber:BsbConfig.kt$BsbConfig.&lt;no name provided>$3</ID>
    <ID>MagicNumber:Camera1Adapter.kt$1080</ID>
    <ID>MagicNumber:Camera1Adapter.kt$1920</ID>
    <ID>MagicNumber:Camera1Adapter.kt$Camera1Adapter$1.5</ID>
    <ID>MagicNumber:Camera1Adapter.kt$Camera1Adapter$1000</ID>
    <ID>MagicNumber:Camera1Adapter.kt$Camera1Adapter$150</ID>
    <ID>MagicNumber:Camera1Adapter.kt$Camera1Adapter$360</ID>
    <ID>MagicNumber:Camera1Adapter.kt$Camera1Adapter.CameraPreview$8</ID>
    <ID>MagicNumber:CameraAdapter.kt$CameraAdapter.Companion$90</ID>
    <ID>MagicNumber:Card.kt$Card$4</ID>
    <ID>MagicNumber:CardBrand.kt$CardBrand$3</ID>
    <ID>MagicNumber:CardBrand.kt$CardBrand.AmericanExpress$3</ID>
    <ID>MagicNumber:CardBrand.kt$CardBrand.AmericanExpress$4</ID>
    <ID>MagicNumber:CardBrand.kt$CardBrand.DinersClub$14</ID>
    <ID>MagicNumber:CardBrand.kt$CardBrand.JCB$3</ID>
    <ID>MagicNumber:CardBrand.kt$CardBrand.Unknown$3</ID>
    <ID>MagicNumber:CardBrand.kt$CardBrand.Unknown$4</ID>
    <ID>MagicNumber:CardDetailsElement.kt$2000</ID>
    <ID>MagicNumber:CardDetailsElement.kt$4</ID>
    <ID>MagicNumber:CardDetect.kt$224</ID>
    <ID>MagicNumber:CardExpiry.kt$100</ID>
    <ID>MagicNumber:CardExpiry.kt$12</ID>
    <ID>MagicNumber:CardExpiry.kt$31</ID>
    <ID>MagicNumber:CardExpiry.kt$4</ID>
    <ID>MagicNumber:CardImageVerificationActivity.kt$1067</ID>
    <ID>MagicNumber:CardImageVerificationActivity.kt$600</ID>
    <ID>MagicNumber:CardInputWidget.kt$CardInputWidget$14</ID>
    <ID>MagicNumber:CardInputWidget.kt$CardInputWidget$15</ID>
    <ID>MagicNumber:CardInputWidget.kt$CardInputWidget$19</ID>
    <ID>MagicNumber:CardInputWidget.kt$CardInputWidget$3</ID>
    <ID>MagicNumber:CardInputWidget.kt$CardInputWidget$4</ID>
    <ID>MagicNumber:CardInputWidget.kt$CardInputWidget$5</ID>
    <ID>MagicNumber:CardInputWidgetPlacement.kt$CardInputWidgetPlacement$10</ID>
    <ID>MagicNumber:CardInputWidgetPlacement.kt$CardInputWidgetPlacement$3</ID>
    <ID>MagicNumber:CardInputWidgetPlacement.kt$CardInputWidgetPlacement$4</ID>
    <ID>MagicNumber:CardInputWidgetPlacement.kt$CardInputWidgetPlacement$5</ID>
    <ID>MagicNumber:CardJsonParser.kt$CardJsonParser$12</ID>
    <ID>MagicNumber:CardNumberController.kt$CardNumberEditableController$3</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation$14</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation$15</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation$16</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation$19</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation$3</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation$4</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation$9</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$11</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$14</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$15</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$19</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$3</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$4</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$7</ID>
    <ID>MagicNumber:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$9</ID>
    <ID>MagicNumber:CardParams.kt$CardParams$4</ID>
    <ID>MagicNumber:CardScanActivity.kt$1067</ID>
    <ID>MagicNumber:CardScanActivity.kt$600</ID>
    <ID>MagicNumber:CardScanFragment.kt$1067</ID>
    <ID>MagicNumber:CardScanFragment.kt$600</ID>
    <ID>MagicNumber:CardUtils.kt$CardUtils$10</ID>
    <ID>MagicNumber:CardUtils.kt$CardUtils$9</ID>
    <ID>MagicNumber:Color.kt$0x1F0A2348</ID>
    <ID>MagicNumber:Color.kt$0x2E747480</ID>
    <ID>MagicNumber:Color.kt$0x2EFE87A1</ID>
    <ID>MagicNumber:Color.kt$0x33787880</ID>
    <ID>MagicNumber:Color.kt$0x5C787880</ID>
    <ID>MagicNumber:Color.kt$0x61FFFFFF</ID>
    <ID>MagicNumber:Color.kt$0x99000000</ID>
    <ID>MagicNumber:Color.kt$0x99EBEBF5</ID>
    <ID>MagicNumber:Color.kt$0xFF05A87F</ID>
    <ID>MagicNumber:Color.kt$0xFF1AC59B</ID>
    <ID>MagicNumber:Color.kt$0xFF1C1C1E</ID>
    <ID>MagicNumber:Color.kt$0xFF1D3944</ID>
    <ID>MagicNumber:Color.kt$0xFF30313D</ID>
    <ID>MagicNumber:Color.kt$0xFF33DDB3</ID>
    <ID>MagicNumber:Color.kt$0xFF6A7383</ID>
    <ID>MagicNumber:Color.kt$0xFFA3ACBA</ID>
    <ID>MagicNumber:Color.kt$0xFFE0E6EB</ID>
    <ID>MagicNumber:Color.kt$0xFFEBEEF1</ID>
    <ID>MagicNumber:Color.kt$0xFFEFF2F4</ID>
    <ID>MagicNumber:Color.kt$0xFFF6F8FA</ID>
    <ID>MagicNumber:Color.kt$0xFFFF2F4C</ID>
    <ID>MagicNumber:CombinePriors.kt$0.5F</ID>
    <ID>MagicNumber:CombinePriors.kt$12</ID>
    <ID>MagicNumber:CombinePriors.kt$16</ID>
    <ID>MagicNumber:CombinePriors.kt$19</ID>
    <ID>MagicNumber:CombinePriors.kt$24</ID>
    <ID>MagicNumber:CombinePriors.kt$31</ID>
    <ID>MagicNumber:CombinePriors.kt$38</ID>
    <ID>MagicNumber:ComposeFormDataCollectionFragment.kt$ComposeFormDataCollectionFragment$18</ID>
    <ID>MagicNumber:CountryConfig.kt$CountryConfig.Companion$0x1F1E6</ID>
    <ID>MagicNumber:CountryConfig.kt$CountryConfig.Companion$0x41</ID>
    <ID>MagicNumber:DateConfig.kt$DateConfig$4</ID>
    <ID>MagicNumber:DateConfig.kt$DateConfig.Companion$100</ID>
    <ID>MagicNumber:DateConfig.kt$DateConfig.Companion$12</ID>
    <ID>MagicNumber:DateConfig.kt$DateConfig.Companion$50</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$100</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$12</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$20</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$80</ID>
    <ID>MagicNumber:DefaultIdentityIO.kt$DefaultIdentityIO$100</ID>
    <ID>MagicNumber:DefaultIdentityIO.kt$DefaultIdentityIO$5</ID>
    <ID>MagicNumber:DefaultLinkEventsReporter.kt$DefaultLinkEventsReporter$1000f</ID>
    <ID>MagicNumber:DropdownFieldUI.kt$.8f</ID>
    <ID>MagicNumber:DropdownFieldUI.kt$.9f</ID>
    <ID>MagicNumber:DropdownFieldUI.kt$8.9f</ID>
    <ID>MagicNumber:Duration.kt$10</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds$1000</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds$1000.0</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds$12</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds$24</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds$365.25</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds$60</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds$7</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds.Companion$1000</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds.Companion$12</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds.Companion$24</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds.Companion$365.25</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds.Companion$60</ID>
    <ID>MagicNumber:Duration.kt$DurationNanoseconds.Companion$7</ID>
    <ID>MagicNumber:ExpirationDate.kt$ExpirationDate.Unvalidated$12</ID>
    <ID>MagicNumber:ExpirationDate.kt$ExpirationDate.Unvalidated$3</ID>
    <ID>MagicNumber:ExpirationDate.kt$ExpirationDate.Unvalidated$4</ID>
    <ID>MagicNumber:FaceDetectorAnalyzer.kt$FaceDetectorAnalyzer$3</ID>
    <ID>MagicNumber:FragmentExamplesFragment.kt$FragmentExamplesFragment$2000L</ID>
    <ID>MagicNumber:FraudDetectionDataRequestParamsFactory.kt$FraudDetectionDataRequestParamsFactory.Companion$60</ID>
    <ID>MagicNumber:GooglePayButton.kt$GooglePayButton$0.5f</ID>
    <ID>MagicNumber:Html.kt$0.1f</ID>
    <ID>MagicNumber:IDDetectorAnalyzer.kt$IDDetectorAnalyzer$3</ID>
    <ID>MagicNumber:IbanConfig.kt$IbanConfig$10</ID>
    <ID>MagicNumber:IbanConfig.kt$IbanConfig$3</ID>
    <ID>MagicNumber:IbanConfig.kt$IbanConfig$4</ID>
    <ID>MagicNumber:IbanConfig.kt$IbanConfig.&lt;no name provided>$4</ID>
    <ID>MagicNumber:IbanConfig.kt$IbanConfig.&lt;no name provided>$5</ID>
    <ID>MagicNumber:Image.kt$0x00030001</ID>
    <ID>MagicNumber:KlarnaSourceActivity.kt$KlarnaSourceActivity$1990</ID>
    <ID>MagicNumber:MLImage.kt$MLImage$0xFF</ID>
    <ID>MagicNumber:MLImage.kt$MLImage$16</ID>
    <ID>MagicNumber:MLImage.kt$MLImage$24</ID>
    <ID>MagicNumber:MLImage.kt$MLImage$8</ID>
    <ID>MagicNumber:Menu.kt$0.8f</ID>
    <ID>MagicNumber:NV21Image.kt$4</ID>
    <ID>MagicNumber:NV21Image.kt$8</ID>
    <ID>MagicNumber:NV21Image.kt$95</ID>
    <ID>MagicNumber:NV21Image.kt$NV21Image$0xff</ID>
    <ID>MagicNumber:NV21Image.kt$NV21Image$180</ID>
    <ID>MagicNumber:NV21Image.kt$NV21Image$270</ID>
    <ID>MagicNumber:NV21Image.kt$NV21Image$360</ID>
    <ID>MagicNumber:NV21Image.kt$NV21Image$90</ID>
    <ID>MagicNumber:Network.kt$LegacyStripeNetwork$200</ID>
    <ID>MagicNumber:Network.kt$LegacyStripeNetwork$300</ID>
    <ID>MagicNumber:NonMaximumSuppression.kt$0.00001f</ID>
    <ID>MagicNumber:NonMaximumSuppression.kt$200</ID>
    <ID>MagicNumber:PanFormatter.kt$12</ID>
    <ID>MagicNumber:PanFormatter.kt$13</ID>
    <ID>MagicNumber:PanFormatter.kt$14</ID>
    <ID>MagicNumber:PanFormatter.kt$15</ID>
    <ID>MagicNumber:PanFormatter.kt$16</ID>
    <ID>MagicNumber:PanFormatter.kt$17</ID>
    <ID>MagicNumber:PanFormatter.kt$18</ID>
    <ID>MagicNumber:PanFormatter.kt$19</ID>
    <ID>MagicNumber:PanFormatter.kt$3</ID>
    <ID>MagicNumber:PanFormatter.kt$4</ID>
    <ID>MagicNumber:PanFormatter.kt$5</ID>
    <ID>MagicNumber:PanFormatter.kt$6</ID>
    <ID>MagicNumber:PanValidator.kt$LuhnPanValidator$10</ID>
    <ID>MagicNumber:PanValidator.kt$LuhnPanValidator$9</ID>
    <ID>MagicNumber:PaymentAuthActivity.kt$PaymentAuthActivity$6</ID>
    <ID>MagicNumber:PaymentAuthConfig.kt$PaymentAuthConfig.Stripe3ds2Config$5</ID>
    <ID>MagicNumber:PaymentAuthConfig.kt$PaymentAuthConfig.Stripe3ds2Config$99</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$14</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$15</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$16</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$19</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$222100</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$272099</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$3</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$300000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$305999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$309500</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$309599</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$340000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$349999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$352800</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$358999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$360000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$369999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$370000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$379999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$380000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$399999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$4</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$400000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$499999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$500000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$509999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$510000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$559999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$560000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$601100</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$601199</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$620000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$622126</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$622925</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$624000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$626999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$628200</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$628899</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$629999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$640000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$659999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$675900</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$675999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$676770</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$676774</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$699999</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$810000</ID>
    <ID>MagicNumber:PaymentCardUtils.kt$819999</ID>
    <ID>MagicNumber:PaymentDetails.kt$0.6f</ID>
    <ID>MagicNumber:PaymentMethodBody.kt$0.6f</ID>
    <ID>MagicNumber:PaymentMethodCreateParams.kt$PaymentMethodCreateParams.Card$4</ID>
    <ID>MagicNumber:PaymentMethodsUI.kt$0.6F</ID>
    <ID>MagicNumber:PaymentMethodsUI.kt$100</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$0.6F</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$18</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$9</ID>
    <ID>MagicNumber:PaymentOptionsAdapter.kt$PaymentOptionsAdapter.Companion$100</ID>
    <ID>MagicNumber:PaymentSelection.kt$PaymentSelection.New.Card$4</ID>
    <ID>MagicNumber:PaymentSessionActivity.kt$PaymentSessionActivity$2000L</ID>
    <ID>MagicNumber:PaymentSessionActivityTest.kt$PaymentSessionActivityTest$5</ID>
    <ID>MagicNumber:PaymentSheetEvent.kt$PaymentSheetEvent.Payment$1000f</ID>
    <ID>MagicNumber:PaymentsTheme.kt$0.15</ID>
    <ID>MagicNumber:PaymentsTheme.kt$0.32</ID>
    <ID>MagicNumber:PaymentsTheme.kt$3</ID>
    <ID>MagicNumber:PaymentsTheme.kt$PaymentsThemeDefaults$0x33787880</ID>
    <ID>MagicNumber:PaymentsTheme.kt$PaymentsThemeDefaults$0x61FFFFFF</ID>
    <ID>MagicNumber:PaymentsTheme.kt$PaymentsThemeDefaults$0x99000000</ID>
    <ID>MagicNumber:PaymentsTheme.kt$PaymentsThemeDefaults$0x993C3C43</ID>
    <ID>MagicNumber:PaymentsTheme.kt$PaymentsThemeDefaults$0x99FFFFFF</ID>
    <ID>MagicNumber:PaymentsTheme.kt$PaymentsThemeDefaults$0xFF0074D4</ID>
    <ID>MagicNumber:PaymentsTheme.kt$PaymentsThemeDefaults$0xFF007AFF</ID>
    <ID>MagicNumber:PaymentsTheme.kt$PaymentsThemeDefaults$0xFF787880</ID>
    <ID>MagicNumber:PaymentsTheme.kt$PaymentsThemeDefaults$0xff2e2e2e</ID>
    <ID>MagicNumber:PhoneNumberController.kt$PhoneNumberController.Companion$4</ID>
    <ID>MagicNumber:PostalCodeVisualTransformation.kt$PostalCodeVisualTransformation.&lt;no name provided>$3</ID>
    <ID>MagicNumber:PostalCodeVisualTransformation.kt$PostalCodeVisualTransformation.&lt;no name provided>$5</ID>
    <ID>MagicNumber:PostalCodeVisualTransformation.kt$PostalCodeVisualTransformation.&lt;no name provided>$6</ID>
    <ID>MagicNumber:PostalCodeVisualTransformation.kt$PostalCodeVisualTransformation.&lt;no name provided>$7</ID>
    <ID>MagicNumber:PrimaryButton.kt$PrimaryButton$0.5f</ID>
    <ID>MagicNumber:RectForm.kt$1000F</ID>
    <ID>MagicNumber:RectForm.kt$3</ID>
    <ID>MagicNumber:RoundToMaxDecimals.kt$10</ID>
    <ID>MagicNumber:SSDOcr.kt$SSDOcr$10</ID>
    <ID>MagicNumber:ScanActivity.kt$ScanActivity$1500</ID>
    <ID>MagicNumber:ScanFragment.kt$ScanFragment$1500</ID>
    <ID>MagicNumber:SimpleScanActivity.kt$SimpleScanActivity$128</ID>
    <ID>MagicNumber:SizeAndCenter.kt$3</ID>
    <ID>MagicNumber:SourcesAdapter.kt$SourcesAdapter.ViewHolder$6</ID>
    <ID>MagicNumber:StripeApi.kt$500</ID>
    <ID>MagicNumber:StripeApi.kt$599</ID>
    <ID>MagicNumber:StripeColorUtils.kt$StripeColorUtils.Companion$0.114</ID>
    <ID>MagicNumber:StripeColorUtils.kt$StripeColorUtils.Companion$0.299</ID>
    <ID>MagicNumber:StripeColorUtils.kt$StripeColorUtils.Companion$0.5</ID>
    <ID>MagicNumber:StripeColorUtils.kt$StripeColorUtils.Companion$0.587</ID>
    <ID>MagicNumber:StripeColorUtils.kt$StripeColorUtils.Companion$0x10</ID>
    <ID>MagicNumber:StripeColorUtils.kt$StripeColorUtils.Companion$255</ID>
    <ID>MagicNumber:StripeConnection.kt$StripeConnection.AbstractConnection$200</ID>
    <ID>MagicNumber:StripeConnection.kt$StripeConnection.AbstractConnection$299</ID>
    <ID>MagicNumber:StripeException.kt$StripeException$400</ID>
    <ID>MagicNumber:StripeException.kt$StripeException$499</ID>
    <ID>MagicNumber:StripeJsonUtils.kt$StripeJsonUtils$3</ID>
    <ID>MagicNumber:TextFieldUI.kt$1000</ID>
    <ID>MagicNumber:USBankAccountFormFragment.kt$USBankAccountFormFragment$0.5f</ID>
    <ID>MagicNumber:UpiWaitingActivity.kt$UpiWaitingActivity$5000</ID>
    <ID>MagicNumber:VerificationScreen.kt$200</ID>
    <ID>MagicNumber:VerificationViewModel.kt$VerificationViewModel$10</ID>
    <ID>MagicNumber:VerificationViewModel.kt$VerificationViewModel$50</ID>
    <ID>MagicNumber:ViewFinderBackground.kt$ViewFinderBackground$0.0722F</ID>
    <ID>MagicNumber:ViewFinderBackground.kt$ViewFinderBackground$0.2126F</ID>
    <ID>MagicNumber:ViewFinderBackground.kt$ViewFinderBackground$0.7152F</ID>
    <ID>MagicNumber:ViewFinderBackground.kt$ViewFinderBackground$0xff</ID>
    <ID>MagicNumber:ViewFinderBackground.kt$ViewFinderBackground$16</ID>
    <ID>MagicNumber:ViewFinderBackground.kt$ViewFinderBackground$255F</ID>
    <ID>MagicNumber:ViewFinderBackground.kt$ViewFinderBackground$8</ID>
    <ID>MagicNumber:WalletScreen.kt$180f</ID>
    <ID>MagicNumber:Yolo.kt$3</ID>
    <ID>MagicNumber:Yolo.kt$4</ID>
    <ID>MagicNumber:Yolo.kt$5</ID>
    <ID>MatchingDeclarationName:ComposeLoadingButton.kt$LoadingButtonState</ID>
    <ID>MatchingDeclarationName:ErrorText.kt$ErrorTextStyle</ID>
    <ID>MatchingDeclarationName:LinkLogoutSheet.kt$LinkLogoutMenuItem : LinkMenuItem</ID>
    <ID>MatchingDeclarationName:LinkMenu.kt$LinkMenuItem</ID>
    <ID>MatchingDeclarationName:PrimaryButton.kt$PrimaryButtonState</ID>
    <ID>MatchingDeclarationName:SSD.kt$OcrFeatureMapSizes</ID>
    <ID>MatchingDeclarationName:WalletPaymentMethodMenu.kt$WalletPaymentMethodMenuItem : LinkMenuItem</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessType$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Company$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Company.Builder$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Company.Document$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Individual$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.BusinessTypeParams.Individual.Builder$*</ID>
    <ID>MaxLineLength:AccountParams.kt$AccountParams.Companion$*</ID>
    <ID>MaxLineLength:AddPaymentMethodActivityStarter.kt$AddPaymentMethodActivityStarter.Args.Builder$*</ID>
    <ID>MaxLineLength:AddPaymentMethodViewModelTest.kt$AddPaymentMethodViewModelTest$private val paymentMethodRetrievalCaptor: KArgumentCaptor&lt;CustomerSession.PaymentMethodRetrievalListener> = argumentCaptor()</ID>
    <ID>MaxLineLength:AddressElementTest.kt$AddressElementTest$fun</ID>
    <ID>MaxLineLength:AlipayRedirectTest.kt$AlipayRedirectTest$"&amp;notify_url=https%3A%2F%2Fhooks.stripe.com%2Falipay%2Falipay%2Fhook%2F6255d30b067c8f7a162c79c654483646%2Fsrc_1Gt188KlwPmebFhp4SWhZwn1"</ID>
    <ID>MaxLineLength:AlipayRedirectTest.kt$AlipayRedirectTest$"&amp;return_url=https%3A%2F%2Fhooks.stripe.com%2Fadapter%2Falipay%2Fredirect%2Fcomplete%2Fsrc_1Gt188KlwPmebFhp4SWhZwn1%2Fsrc_client_secret_RMaQKPfAmHOdUwcNhXEjolR4"</ID>
    <ID>MaxLineLength:AlipayRedirectTest.kt$AlipayRedirectTest$"https://hooks.stripe.com/adapter/alipay/redirect/complete/src_1Gt188KlwPmebFhp4SWhZwn1/src_client_secret_RMaQKPfAmHOdUwcNhXEjolR4"</ID>
    <ID>MaxLineLength:AndroidComposeTestRule.kt$*</ID>
    <ID>MaxLineLength:AndroidComposeTestRule.kt$inline</ID>
    <ID>MaxLineLength:AndroidMenu.kt$*</ID>
    <ID>MaxLineLength:ApiKeyFixtures.kt$ApiKeyFixtures$const val AFFIRM_PUBLISHABLE_KEY = "pk_test_51HvTI7Lu5o3P18Zp6t5AgBSkMvWoTtA0nyA7pVYDqpfLkRtWun7qZTYCOHCReprfLM464yaBeF72UFfB7cY9WG4a00ZnDtiC2C"</ID>
    <ID>MaxLineLength:ApiKeyFixtures.kt$ApiKeyFixtures$const val CB_PUBLISHABLE_KEY = "pk_test_51Gsr5VLtxFHECmaoeyWTxRKLZZiks5QKbg5H0IeGd8yt7OzQhA7807thLrHayMOeDRmJv3ara1VYy6AvBXAnUGcB00QAZheC0Z"</ID>
    <ID>MaxLineLength:ApiKeyFixtures.kt$ApiKeyFixtures$const val NETBANKING_PUBLISHABLE_KEY = "pk_test_51H7wmsBte6TMTRd4gph9Wm7gnQOKJwdVTCj30AhtB8MhWtlYj6v9xDn1vdCtKYGAE7cybr6fQdbQQtgvzBihE9cl00tOnrTpL9"</ID>
    <ID>MaxLineLength:ApiKeyFixtures.kt$ApiKeyFixtures$const val UPI_PUBLISHABLE_KEY = "pk_test_51H7wmsBte6TMTRd4gph9Wm7gnQOKJwdVTCj30AhtB8MhWtlYj6v9xDn1vdCtKYGAE7cybr6fQdbQQtgvzBihE9cl00tOnrTpL9"</ID>
    <ID>MaxLineLength:ApiKeyFixtures.kt$ApiKeyFixtures$const val US_BANK_ACCOUNT_PUBLISHABLE_KEY = "pk_test_51HvTI7Lu5o3P18Zp6t5AgBSkMvWoTtA0nyA7pVYDqpfLkRtWun7qZTYCOHCReprfLM464yaBeF72UFfB7cY9WG4a00ZnDtiC2C"</ID>
    <ID>MaxLineLength:BankAccount.kt$BankAccount$*</ID>
    <ID>MaxLineLength:BankAccountTokenParams.kt$BankAccountTokenParams$*</ID>
    <ID>MaxLineLength:BecsDebitMandateAcceptanceFactoryTest.kt$BecsDebitMandateAcceptanceFactoryTest$.</ID>
    <ID>MaxLineLength:BecsDebitMandateAcceptanceTextViewTest.kt$BecsDebitMandateAcceptanceTextViewTest$.</ID>
    <ID>MaxLineLength:BillingAddressViewTest.kt$BillingAddressViewTest$fun</ID>
    <ID>MaxLineLength:CameraAdapter.kt$CameraAdapter$// TODO: change this to be a channelFlow once it's no longer experimental, add some capacity and use a backpressure drop strategy</ID>
    <ID>MaxLineLength:CameraPermissionDeniedFragment.kt$CameraPermissionDeniedFragment.Companion$CollectedDataParam.Type.DRIVINGLICENSE -> R.id.action_cameraPermissionDeniedFragment_to_driverLicenseUploadFragment</ID>
    <ID>MaxLineLength:CameraView.kt$CameraView$*</ID>
    <ID>MaxLineLength:CameraView.kt$CameraView$* a [View] to highlight a sub area from previewFrame, the [Rect] of this view is used to crop the highlighted area from the preview.</ID>
    <ID>MaxLineLength:CameraView.kt$CameraView$* an optional [ViewFinderBackground] to draw background and reveals a center viewFinder on previewFrame, has the same size of the [CameraView].</ID>
    <ID>MaxLineLength:CameraView.kt$CameraView.ViewFinderType$* The type of viewfinder, decides if [viewFinderBackgroundView] should be drawn and the aspect ratio of [viewFinderWindowView]</ID>
    <ID>MaxLineLength:CameraView.kt$CameraView.ViewFinderType.CreditCard$* [CreditCard] draws [viewFinderBackgroundView] and draws [viewFinderWindowView] in center with aspect ratio [CREDIT_CARD_ASPECT_RATIO]</ID>
    <ID>MaxLineLength:CameraView.kt$CameraView.ViewFinderType.Passport$* [Passport] draws [viewFinderBackgroundView] and draws [viewFinderWindowView] in center with aspect ratio [Passport]</ID>
    <ID>MaxLineLength:CardFormView.kt$CardFormView$*</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$Truth.assertThat(cardNumberConfig.determineState(CardBrand.Visa, "", CardBrand.Visa.getMaxLengthForCardNumber("")))</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$Truth.assertThat(cardNumberConfig.visualTransformation.filter(AnnotatedString(CardNumberFixtures.AMEX_NO_SPACES)).text)</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$Truth.assertThat(cardNumberConfig.visualTransformation.filter(AnnotatedString(CardNumberFixtures.DINERS_CLUB_14_NO_SPACES)).text)</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$Truth.assertThat(cardNumberConfig.visualTransformation.filter(AnnotatedString(CardNumberFixtures.DINERS_CLUB_16_NO_SPACES)).text)</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$Truth.assertThat(cardNumberConfig.visualTransformation.filter(AnnotatedString(CardNumberFixtures.DISCOVER_NO_SPACES)).text)</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$Truth.assertThat(cardNumberConfig.visualTransformation.filter(AnnotatedString(CardNumberFixtures.JCB_NO_SPACES)).text)</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$Truth.assertThat(cardNumberConfig.visualTransformation.filter(AnnotatedString(CardNumberFixtures.UNIONPAY_NO_SPACES)).text)</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$Truth.assertThat(cardNumberConfig.visualTransformation.filter(AnnotatedString(CardNumberFixtures.VISA_NO_SPACES)).text)</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$val state = cardNumberConfig.determineState(CardBrand.Unknown, "0", CardBrand.Unknown.getMaxLengthForCardNumber("0"))</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$val state = cardNumberConfig.determineState(CardBrand.Visa, "12", CardBrand.Visa.getMaxLengthForCardNumber("12"))</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$val state = cardNumberConfig.determineState(CardBrand.Visa, "1234567890123456789", CardBrand.Visa.getMaxLengthForCardNumber("1234567890123456789"))</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$val state = cardNumberConfig.determineState(CardBrand.Visa, "4242424242424242", CardBrand.Visa.getMaxLengthForCardNumber("4242424242424242"))</ID>
    <ID>MaxLineLength:CardNumberConfigTest.kt$CardNumberConfigTest$val state = cardNumberConfig.determineState(CardBrand.Visa, "4242424242424243", CardBrand.Visa.getMaxLengthForCardNumber("4242424242424243"))</ID>
    <ID>MaxLineLength:CardNumberEditText.kt$CardNumberEditText.CardNumberTextWatcher$// TODO (michelleb-stripe) Should set error message to incomplete, then in focus change if it isn't complete it will update it.</ID>
    <ID>MaxLineLength:CardNumberEditTextTest.kt$CardNumberEditTextTest$fun</ID>
    <ID>MaxLineLength:ComposeExampleActivity.kt$ComposeExampleActivity$resultString = "Error generating verificationSessionId and ephemeralKeySecret: ${it.getException().message}"</ID>
    <ID>MaxLineLength:ComposeExampleActivity.kt$ComposeExampleActivity$resultString = "Verification result: ${result.javaClass.simpleName} - ${result.throwable}"</ID>
    <ID>MaxLineLength:ComposeExampleActivity.kt$ComposeExampleActivity$scaffoldState.snackbarHostState.showSnackbar("Getting verificationSessionId and ephemeralKeySecret from backend...")</ID>
    <ID>MaxLineLength:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams$*</ID>
    <ID>MaxLineLength:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.SetupFutureUsage$*</ID>
    <ID>MaxLineLength:ConfirmPaymentIntentParams.kt$ConfirmPaymentIntentParams.Shipping$*</ID>
    <ID>MaxLineLength:ConfirmPaymentIntentParamsFactoryTest.kt$ConfirmPaymentIntentParamsFactoryTest$fun</ID>
    <ID>MaxLineLength:ConfirmSetupIntentParams.kt$ConfirmSetupIntentParams.Companion$*</ID>
    <ID>MaxLineLength:ConsentFragment.kt$ConsentFragment$if (requireSelfie) ClearDataParam.CONSENT_TO_DOC_SELECT_WITH_SELFIE else ClearDataParam.CONSENT_TO_DOC_SELECT</ID>
    <ID>MaxLineLength:CouldNotCaptureFragment.kt$CouldNotCaptureFragment.Companion$IdentityScanState.ScanType.DL_FRONT -> R.id.action_couldNotCaptureFragment_to_driverLicenseUploadFragment</ID>
    <ID>MaxLineLength:CreateCardSourceActivity.kt$CreateCardSourceActivity$viewBinding.cardWidget</ID>
    <ID>MaxLineLength:CustomerRepositoryTest.kt$CustomerRepositoryTest$onBlocking { detachPaymentMethod(anyString(), any(), anyString(), any()) }.doThrow(InvalidParameterException("error"))</ID>
    <ID>MaxLineLength:CustomerSessionOperationExecutorTest.kt$CustomerSessionOperationExecutorTest$fun</ID>
    <ID>MaxLineLength:DefaultAlipayRepositoryTest.kt$DefaultAlipayRepositoryTest$"https://hooks.stripe.com/adapter/alipay/redirect/complete/src_1HDEFWKlwPmebFhp6tcpln8T/src_client_secret_S6H9mVMKK6qxk9YxsUvbH55K"</ID>
    <ID>MaxLineLength:DefaultFlowControllerInitializerTest.kt$DefaultFlowControllerInitializerTest$fun</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$.</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$fun</ID>
    <ID>MaxLineLength:DefaultFlowControllerTest.kt$DefaultFlowControllerTest$viewModel.paymentSelection = PaymentSelection.New.Card(PaymentMethodCreateParamsFixtures.DEFAULT_CARD, mock(), mock())</ID>
    <ID>MaxLineLength:DefaultIdentityRepositoryTest.kt$DefaultIdentityRepositoryTest$fun</ID>
    <ID>MaxLineLength:DocSelectionFragment.kt$DocSelectionFragment$if (requireSelfie) ClearDataParam.DOC_SELECT_TO_UPLOAD_WITH_SELFIE else ClearDataParam.DOC_SELECT_TO_UPLOAD</ID>
    <ID>MaxLineLength:DocSelectionFragmentTest.kt$DocSelectionFragmentTest$fun</ID>
    <ID>MaxLineLength:DriverLicenseScanFragmentTest.kt$DriverLicenseScanFragmentTest$(params[PARAM_EVENT_META_DATA] as Map&lt;*, *>)[PARAM_SCREEN_NAME] == SCREEN_NAME_LIVE_CAPTURE_DRIVER_LICENSE</ID>
    <ID>MaxLineLength:DriverLicenseScanFragmentTest.kt$DriverLicenseScanFragmentTest$assertThat(binding.kontinue.findViewById&lt;CircularProgressIndicator>(R.id.indicator).visibility)</ID>
    <ID>MaxLineLength:DriverLicenseScanFragmentTest.kt$DriverLicenseScanFragmentTest$fun</ID>
    <ID>MaxLineLength:EphemeralKey.kt$EphemeralKey$*</ID>
    <ID>MaxLineLength:EphemeralKeyManager.kt$EphemeralKeyManager$ Received an ephemeral key that could not be parsed. See https://stripe.com/docs/mobile/android/basic for more details.</ID>
    <ID>MaxLineLength:EphemeralKeyManager.kt$EphemeralKeyManager$ Received an invalid ephemeral key. See https://stripe.com/docs/mobile/android/basic for more details.</ID>
    <ID>MaxLineLength:EphemeralKeyManagerTest.kt$EphemeralKeyManagerTest$"Received an ephemeral key that could not be parsed. See https://stripe.com/docs/mobile/android/basic for more details."</ID>
    <ID>MaxLineLength:FaceDetectorTransitioner.kt$FaceDetectorTransitioner$return</ID>
    <ID>MaxLineLength:GooglePayConfig.kt$GooglePayConfig$*</ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory$*</ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory$* [IsReadyToPayRequest](https://developers.google.com/pay/api/android/reference/request-objects#IsReadyToPayRequest)</ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory.BillingAddressParameters$*</ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory.ShippingAddressParameters$* [ShippingAddressParameters](https://developers.google.com/pay/api/android/reference/request-objects#ShippingAddressParameters)</ID>
    <ID>MaxLineLength:GooglePayJsonFactory.kt$GooglePayJsonFactory.TransactionInfo$*</ID>
    <ID>MaxLineLength:GooglePayLauncher.kt$GooglePayLauncher$*</ID>
    <ID>MaxLineLength:GooglePayLauncherActivity.kt$GooglePayLauncherActivity$*</ID>
    <ID>MaxLineLength:GooglePayPaymentMethodLauncherActivity.kt$GooglePayPaymentMethodLauncherActivity$*</ID>
    <ID>MaxLineLength:GooglePayRepository.kt$DefaultGooglePayRepository$*</ID>
    <ID>MaxLineLength:IDDetectorTransitioner.kt$IDDetectorTransitioner$"Scan for ${unsatisfiedState.type} Unsatisfied with reason ${unsatisfiedState.reason}, transition to Initial."</ID>
    <ID>MaxLineLength:IDDetectorTransitionerTest.kt$IDDetectorTransitionerTest$fun</ID>
    <ID>MaxLineLength:IDDetectorTransitionerTest.kt$IDDetectorTransitionerTest$whenever(mockReachAtClockMark.elapsedSince()).thenReturn((DEFAULT_DISPLAY_SATISFIED_DURATION + 1).milliseconds)</ID>
    <ID>MaxLineLength:IDDetectorTransitionerTest.kt$IDDetectorTransitionerTest$whenever(mockReachAtClockMark.elapsedSince()).thenReturn((DEFAULT_DISPLAY_SATISFIED_DURATION - 1).milliseconds)</ID>
    <ID>MaxLineLength:IDDetectorTransitionerTest.kt$IDDetectorTransitionerTest$whenever(mockReachAtClockMark.elapsedSince()).thenReturn((DEFAULT_DISPLAY_UNSATISFIED_DURATION + 1).milliseconds)</ID>
    <ID>MaxLineLength:IDDetectorTransitionerTest.kt$IDDetectorTransitionerTest$whenever(mockReachAtClockMark.elapsedSince()).thenReturn((DEFAULT_DISPLAY_UNSATISFIED_DURATION - 1).milliseconds)</ID>
    <ID>MaxLineLength:IDScanFragmentTest.kt$IDScanFragmentTest$(params[PARAM_EVENT_META_DATA] as Map&lt;*, *>)[PARAM_SCREEN_NAME] == SCREEN_NAME_LIVE_CAPTURE_ID</ID>
    <ID>MaxLineLength:IDScanFragmentTest.kt$IDScanFragmentTest$assertThat(binding.kontinue.findViewById&lt;CircularProgressIndicator>(R.id.indicator).visibility)</ID>
    <ID>MaxLineLength:IDScanFragmentTest.kt$IDScanFragmentTest$fun</ID>
    <ID>MaxLineLength:IdentityActivityTest.kt$IdentityActivityTest$(IdentityActivity, Toolbar, ImageButton, NavController, InjectableActivityScenario&lt;IdentityActivity>) -> Unit</ID>
    <ID>MaxLineLength:IdentityDocumentScanFragment.kt$IdentityDocumentScanFragment$clearDataParam = if (verificationPage.requireSelfie()) ClearDataParam.UPLOAD_FRONT_SELFIE else ClearDataParam.UPLOAD_FRONT</ID>
    <ID>MaxLineLength:IdentityDocumentScanFragment.kt$IdentityDocumentScanFragment$clearDataParam = if (verificationPage.requireSelfie()) ClearDataParam.UPLOAD_TO_SELFIE else ClearDataParam.UPLOAD_TO_CONFIRM</ID>
    <ID>MaxLineLength:IdentityNetworkResponseFixtures.kt$body</ID>
    <ID>MaxLineLength:IdentityNetworkResponseFixtures.kt$fallback_url</ID>
    <ID>MaxLineLength:IdentityNetworkResponseFixtures.kt$id_detector_url</ID>
    <ID>MaxLineLength:IdentityNetworkResponseFixtures.kt$privacy_policy</ID>
    <ID>MaxLineLength:IdentityScanFlow.kt$IdentityScanFlow$private val aggregateResultListener: AggregateResultListener&lt;IdentityAggregator.InterimResult, IdentityAggregator.FinalResult></ID>
    <ID>MaxLineLength:IdentityUploadFragment.kt$IdentityUploadFragment$clearDataParam = if (verificationPage.requireSelfie()) ClearDataParam.UPLOAD_FRONT_SELFIE else ClearDataParam.UPLOAD_FRONT</ID>
    <ID>MaxLineLength:IdentityUploadFragment.kt$IdentityUploadFragment$clearDataParam = if (verificationPage.requireSelfie()) ClearDataParam.UPLOAD_TO_SELFIE else ClearDataParam.UPLOAD_TO_CONFIRM</ID>
    <ID>MaxLineLength:IdentityUploadFragmentTest.kt$IdentityUploadFragmentTest$(params[PARAM_EVENT_META_DATA] as Map&lt;*, *>)[PARAM_SCAN_TYPE] == ID</ID>
    <ID>MaxLineLength:IdentityUploadFragmentTest.kt$IdentityUploadFragmentTest$assertThat(binding.kontinue.findViewById&lt;CircularProgressIndicator>(R.id.indicator).visibility)</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$?:</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$delegate ?: throw IllegalStateException("Cannot move to state $newState since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$val d = delegate ?: throw IllegalStateException("Cannot run onActivity since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:KlarnaSourceParams.kt$KlarnaSourceParams$*</ID>
    <ID>MaxLineLength:KlarnaSourceParams.kt$KlarnaSourceParams.PaymentPageOptions$*</ID>
    <ID>MaxLineLength:LinkPaymentLauncherTest.kt$LinkPaymentLauncherTest$arg.injectionParams.injectorKey == LinkPaymentLauncher::class.simpleName + WeakMapInjectorRegistry.CURRENT_REGISTER_KEY.get()</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$"Error generating verificationSessionId and ephemeralKeySecret: ${result.getException().message}"</ID>
    <ID>MaxLineLength:MandateDataParams.kt$MandateDataParams.Type.Online$*</ID>
    <ID>MaxLineLength:Memoize.kt$fun</ID>
    <ID>MaxLineLength:NV21Image.kt$NV21Image$// Log.d(Config.logTag, "Bitmap to RGB Byte buffer conversion took: ${System.currentTimeMillis() - startTime} ms")</ID>
    <ID>MaxLineLength:NavigationUtils.kt$*</ID>
    <ID>MaxLineLength:NavigationUtilsTest.kt$NavigationUtilsTest$fun</ID>
    <ID>MaxLineLength:NavigationUtilsTest.kt$NavigationUtilsTest$verify(mockScreenTracker, times(times)).screenTransitionStart(eq(fromFragment.fragmentIdToScreenName()), any())</ID>
    <ID>MaxLineLength:NextActionSpec.kt$PostConfirmHandlingPiStatusSpecsSerializer$override</ID>
    <ID>MaxLineLength:PassportScanFragmentTest.kt$PassportScanFragmentTest$(params[PARAM_EVENT_META_DATA] as Map&lt;*, *>)[PARAM_SCREEN_NAME] == SCREEN_NAME_LIVE_CAPTURE_PASSPORT</ID>
    <ID>MaxLineLength:PassportScanFragmentTest.kt$PassportScanFragmentTest$assertThat(binding.kontinue.findViewById&lt;CircularProgressIndicator>(R.id.indicator).visibility)</ID>
    <ID>MaxLineLength:PassportUploadFragmentTest.kt$PassportUploadFragmentTest$assertThat(binding.kontinue.findViewById&lt;CircularProgressIndicator>(R.id.indicator).visibility)</ID>
    <ID>MaxLineLength:PaymentAnalyticsRequestFactoryTest.kt$PaymentAnalyticsRequestFactoryTest$.</ID>
    <ID>MaxLineLength:PaymentApiRequestTest.kt$PaymentApiRequestTest$.</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"https://hooks.stripe.com/three_d_secure/authenticate?amount=1250&amp;client_secret=src_client_secret_abc123&amp;return_url=&amp;source=src_X9Y8Z7&amp;usage=single_use"</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"https://hooks.stripe.com/three_d_secure/authenticate?amount=1250&amp;client_secret=src_client_secret_abc123&amp;return_url=https%3A%2F%2Fhooks.stripe.com%2Fredirect%2Fcomplete%2Fsrc_X9Y8Z7%3Fclient_secret%3Dsrc_client_secret_abc123&amp;source=src_X9Y8Z7&amp;usage=single_use"</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"mailto:patrick@example.com?payment_intent=pi_123&amp;payment_intent_client_secret=pi_123_secret_456&amp;source_type=card"</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"stripe://payment_auth?setup_intent=seti_1234&amp;setup_intent_client_secret=seti_1234_secret_5678&amp;source_type=card"</ID>
    <ID>MaxLineLength:PaymentAuthWebViewClientTest.kt$PaymentAuthWebViewClientTest$"stripe://payment_intent_return?payment_intent=pi_123&amp;payment_intent_client_secret=pi_123_secret_456&amp;source_type=card"</ID>
    <ID>MaxLineLength:PaymentFlowActivityStarter.kt$PaymentFlowActivityStarter.Args.Builder$*</ID>
    <ID>MaxLineLength:PaymentFlowResult.kt$PaymentFlowResult$*</ID>
    <ID>MaxLineLength:PaymentIntent.kt$PaymentIntent.Error$*</ID>
    <ID>MaxLineLength:PaymentIntent.kt$PaymentIntent.Shipping$*</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$certificate</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$hosted_voucher_url</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$message</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$native_data</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$root_certificate_authorities</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$stripe_js</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$three_ds_method_url</ID>
    <ID>MaxLineLength:PaymentIntentFixtures.kt$PaymentIntentFixtures$url</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"-----BEGIN CERTIFICATE-----\nMIIFtTCCA52gAwIBAgIQJqSRaPua/6cpablmVDHWUDANBgkqhkiG9w0BAQsFADB6\nMQswCQYDVQQGEwJVUzETMBEGA1UEChMKTWFzdGVyQ2FyZDEoMCYGA1UECxMfTWFz\ndGVyQ2FyZCBJZGVudGl0eSBDaGVjayBHZW4gMzEsMCoGA1UEAxMjUFJEIE1hc3Rl\nckNhcmQgM0RTMiBBY3F1aXJlciBTdWIgQ0EwHhcNMTgxMTIwMTQ1MzIzWhcNMjEx\nMTIwMTQ1MzIzWjBxMQswCQYDVQQGEwJVUzEdMBsGA1UEChMUTWFzdGVyQ2FyZCBX\nb3JsZHdpZGUxGzAZBgNVBAsTEmdhdGV3YXktZW5jcnlwdGlvbjEmMCQGA1UEAxMd\nM2RzMi5kaXJlY3RvcnkubWFzdGVyY2FyZC5jb20wggEiMA0GCSqGSIb3DQEBAQUA\nA4IBDwAwggEKAoIBAQCFlZjqbbL9bDKOzZFawdbyfQcezVEUSDCWWsYKw/V6co9A\nGaPBUsGgzxF6+EDgVj3vYytgSl8xFvVPsb4ZJ6BJGvimda8QiIyrX7WUxQMB3hyS\nBOPf4OB72CP+UkaFNR6hdlO5ofzTmB2oj1FdLGZmTN/sj6ZoHkn2Zzums8QAHFjv\nFjspKUYCmms91gpNpJPUUztn0N1YMWVFpFMytahHIlpiGqTDt4314F7sFABLxzFr\nDmcqhf623SPV3kwQiLVWOvewO62ItYUFgHwle2dq76YiKrUv1C7vADSk2Am4gqwv\n7dcCnFeM2AHbBFBa1ZBRQXosuXVw8ZcQqfY8m4iNAgMBAAGjggE+MIIBOjAOBgNV\nHQ8BAf8EBAMCAygwCQYDVR0TBAIwADAfBgNVHSMEGDAWgBSakqJUx4CN/s5W4wMU\n/17uSLhFuzBIBggrBgEFBQcBAQQ8MDowOAYIKwYBBQUHMAGGLGh0dHA6Ly9vY3Nw\nLnBraS5pZGVudGl0eWNoZWNrLm1hc3RlcmNhcmQuY29tMCgGA1UdEQQhMB+CHTNk\nczIuZGlyZWN0b3J5Lm1hc3RlcmNhcmQuY29tMGkGA1UdHwRiMGAwXqBcoFqGWGh0\ndHA6Ly9jcmwucGtpLmlkZW50aXR5Y2hlY2subWFzdGVyY2FyZC5jb20vOWE5MmEy\nNTRjNzgwOGRmZWNlNTZlMzAzMTRmZjVlZWU0OGI4NDViYi5jcmwwHQYDVR0OBBYE\nFHxN6+P0r3+dFWmi/+pDQ8JWaCbuMA0GCSqGSIb3DQEBCwUAA4ICAQAtwW8siyCi\nmhon1WUAUmufZ7bbegf3cTOafQh77NvA0xgVeloELUNCwsSSZgcOIa4Zgpsa0xi5\nfYxXsPLgVPLM0mBhTOD1DnPu1AAm32QVelHe6oB98XxbkQlHGXeOLs62PLtDZd94\n7pm08QMVb+MoCnHLaBLV6eKhKK+SNrfcxr33m0h3v2EMoiJ6zCvp8HgIHEhVpleU\n8H2Uo5YObatb/KUHgtp2z0vEfyGhZR7hrr48vUQpfVGBABsCV0aqUkPxtAXWfQo9\n1N9B7H3EIcSjbiUz5vkj9YeDSyJIi0Y/IZbzuNMsz2cRi1CWLl37w2fe128qWxYq\nY/k+Y4HX7uYchB8xPaZR4JczCvg1FV2JrkOcFvElVXWSMpBbe2PS6OMr3XxrHjzp\nDyM9qvzge0Ai9+rq8AyGoG1dP2Ay83Ndlgi42X3yl1uEUW2feGojCQQCFFArazEj\nLUkSlrB2kA12SWAhsqqQwnBLGSTp7PqPZeWkluQVXS0sbj0878kTra6TjG3U+KqO\nJCj8v6G380qIkAXe1xMHHNQ6GS59HZMeBPYkK2y5hmh/JVo4bRfK7Ya3blBSBfB8\nAVWQ5GqVWklvXZsQLN7FH/fMIT3y8iE1W19Ua4whlhvn7o/aYWOkHr1G2xyh8BHj\n7H63A2hjcPlW/ZAJSTuBZUClAhsNohH2Jg==\n-----END CERTIFICATE-----\n"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"-----BEGIN CERTIFICATE-----\nMIIFxzCCA6+gAwIBAgIQFsjyIuqhw80wNMjXU47lfjANBgkqhkiG9w0BAQsFADB8\nMQswCQYDVQQGEwJVUzETMBEGA1UEChMKTWFzdGVyQ2FyZDEoMCYGA1UECxMfTWFz\ndGVyQ2FyZCBJZGVudGl0eSBDaGVjayBHZW4gMzEuMCwGA1UEAxMlUFJEIE1hc3Rl\nckNhcmQgSWRlbnRpdHkgQ2hlY2sgUm9vdCBDQTAeFw0xNjA3MTQwNzI0MDBaFw0z\nMDA3MTUwODEwMDBaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQKEwpNYXN0ZXJDYXJk\nMSgwJgYDVQQLEx9NYXN0ZXJDYXJkIElkZW50aXR5IENoZWNrIEdlbiAzMS4wLAYD\nVQQDEyVQUkQgTWFzdGVyQ2FyZCBJZGVudGl0eSBDaGVjayBSb290IENBMIICIjAN\nBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAxZF3nCEiT8XFFaq+3BPT0cMDlWE7\n6IBsdx27w3hLxwVLog42UTasIgzmysTKpBc17HEZyNAqk9GrCHo0Oyk4JZuXHoW8\n0goZaR2sMnn49ytt7aGsE1PsfVup8gqAorfm3IFab2/CniJJNXaWPgn94+U/nsoa\nqTQ6j+6JBoIwnFklhbXHfKrqlkUZJCYaWbZRiQ7nkANYYM2Td3N87FmRanmDXj5B\nG6lc9o1clTC7UvRQmNIL9OdDDZ8qlqY2Fi0eztBnuo2DUS5tGdVy8SgqPM3E12ft\nk4EdlKyrWmBqFcYwGx4AcSJ88O3rQmRBMxtk0r5vhgr6hDCGq7FHK/hQFP9LhUO9\n1qxWEtMn76Sa7DPCLas+tfNRVwG12FBuEZFhdS/qKMdIYUE5Q6uwGTEvTzg2kmgJ\nT3sNa6dbhlYnYn9iIjTh0dPGgiXap1Bhi8B9aaPFcHEHSqW8nZUINcrwf5AUi+7D\n+q/AG5ItiBtQTCaaFm74gv51yutzwgKnH9Q+x3mtuK/uwlLCslj9DeXgOzMWFxFg\nuuwLGX39ktDnetxNw3PLabjHkDlGDIfx0MCQakM74sTcuW8ICiHvNA7fxXCnbtjs\ny7at/yXYwAd+IDS51MA/g3OYVN4M+0pG843Re6Z53oODp0Ymugx0FNO1NxT3HO1h\nd7dXyjAV/tN/GGcCAwEAAaNFMEMwDgYDVR0PAQH/BAQDAgGGMBIGA1UdEwEB/wQI\nMAYBAf8CAQEwHQYDVR0OBBYEFNSlUaqS2hGLFMT/EXrhHeEx+UqxMA0GCSqGSIb3\nDQEBCwUAA4ICAQBLqIYorrtVz56F6WOoLX9CcRjSFim7gO873a3p7+62I6joXMsM\nr0nd9nRPcEwduEloZXwFgErVUQWaUZWNpue0mGvU7BUAgV9Tu0J0yA+9srizVoMv\nx+o4zTJ3Vu5p5aTf1aYoH1xYVo5ooFgl/hI/EXD2lo/xOUfPKXBY7twfiqOziQmT\nGBuqPRq8h3dQRlXYxX/rzGf80SecIT6wo9KavDkjOmJWGzzHsn6Ryo6MEClMaPn0\nte87ukNN740AdPhTvNeZdWlwyqWAJpsv24caEckjSpgpoIZOjc7PAcEVQOWFSxUe\nsMk4Jz5bVZa/ABjzcp+rsq1QLSJ5quqHwWFTewChwpw5gpw+E5SpKY6FIHPlTdl+\nqHThvN8lsKNAQg0qTdEbIFZCUQC0Cl3Ti3q/cXv8tguLJNWvdGzB600Y32QHclMp\neyabT4/QeOesqpx6Da70J2KvLT1j6Ch2BsKSzeVLahrjnoPrdgiIYYBOgeA3T8SE\n1pgagt56R7nIkRQbtesoRKi+NfC7pPb/G1VUsj/cREAHH1i1UKa0aCsIiANfEdQN\n5Ok6wtFJJhp3apAvnVkrZDfOG5we9bYzvGoI7SUnleURBJ+N3ihjARfL4hDeeRHh\nYyLkM3kEyEkrJBL5r0GDjicxM+aFcR2fCBAkv3grT5kz4kLcvsmHX+9DBw==\n-----END CERTIFICATE-----\n\n"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"_input_charset=utf-8&amp;app_pay=Y&amp;currency=USD&amp;forex_biz=FP&amp;notify_url=https%3A%2F%2Fhooks.stripe.com%2Falipay%2Falipay%2Fhook%2F6255d30b067c8f7a162c79c654483646%2Fsrc_1HDEFWKlwPmebFhp6tcpln8T&amp;out_trade_no=src_1HDEFWKlwPmebFhp6tcpln8T&amp;partner=2088621828244481&amp;payment_type=1&amp;product_code=NEW_WAP_OVERSEAS_SELLER&amp;return_url=https%3A%2F%2Fhooks.stripe.com%2Fadapter%2Falipay%2Fredirect%2Fcomplete%2Fsrc_1HDEFWKlwPmebFhp6tcpln8T%2Fsrc_client_secret_S6H9mVMKK6qxk9YxsUvbH55K&amp;secondary_merchant_id=acct_1EqOyCKlwPmebFhp&amp;secondary_merchant_industry=5734&amp;secondary_merchant_name=Yuki-Test&amp;sendFormat=normal&amp;service=create_forex_trade_wap&amp;sign=b691876a7f0bd889530f54a271d314d5&amp;sign_type=MD5&amp;subject=Yuki-Test&amp;supplier=Yuki-Test&amp;timeout_rule=20m&amp;total_fee=1.00"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"https://hooks.stripe.com/3d_secure_2_eap/begin_test/src_1Ecve7CRMbs6FrXfm8AxXMIh/src_client_secret_F79yszOBAiuaZTuIhbn3LPUW"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"https://hooks.stripe.com/redirect/authenticate/src_1HDEFWKlwPmebFhp6tcpln8T?client_secret=src_client_secret_S6H9mVMKK6qxk9YxsUvbH55K"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$"https://payments.stripe.com/microdeposit/pacs_test_YWNjdF8xS2J1SjlGbmt1bWlGVUZ4LHBhX25vbmNlX0xJcFVEaERaU0JOVVR3akhxMXc5eklOQkl3UTlwNWo0000v3GS1Jej"</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$Uri.parse("https://hooks.stripe.com/3d_secure_2_eap/begin_test/src_1Ecaz6CRMbs6FrXfuYKBRSUG/src_client_secret_F6octeOshkgxT47dr0ZxSZiv")</ID>
    <ID>MaxLineLength:PaymentIntentJsonParserTest.kt$PaymentIntentJsonParserTest$hostedVoucherUrl = "https://payments.stripe.com/oxxo/voucher/test_YWNjdF8xSWN1c1VMMzJLbFJvdDAxLF9KRlBtckVBMERWM0lBZEUyb"</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.BillingDetails$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.Card$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.Card.Checks$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.Card.ThreeDSecureUsage$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.SepaDebit$*</ID>
    <ID>MaxLineLength:PaymentMethod.kt$PaymentMethod.USBankAccount$*</ID>
    <ID>MaxLineLength:PaymentMethodCreateParams.kt$PaymentMethodCreateParams.BacsDebit$*</ID>
    <ID>MaxLineLength:PaymentMethodsActivityStarter.kt$PaymentMethodsActivityStarter.Args.Builder$*</ID>
    <ID>MaxLineLength:PaymentMethodsActivityTest.kt$PaymentMethodsActivityTest$private val listenerArgumentCaptor: KArgumentCaptor&lt;CustomerSession.PaymentMethodsRetrievalListener> = argumentCaptor()</ID>
    <ID>MaxLineLength:PaymentMethodsViewModelTest.kt$PaymentMethodsViewModelTest$private val listenerArgumentCaptor: KArgumentCaptor&lt;CustomerSession.PaymentMethodsRetrievalListener> = argumentCaptor()</ID>
    <ID>MaxLineLength:PaymentOptionsAddPaymentMethodFragmentTest.kt$PaymentOptionsAddPaymentMethodFragmentTest$onReady: (PaymentOptionsAddPaymentMethodFragment, FragmentPaymentsheetAddPaymentMethodBinding, PaymentOptionsViewModel) -> Unit</ID>
    <ID>MaxLineLength:PaymentOptionsViewModelTestInjection.kt$PaymentOptionsViewModelTestInjection$LpmRepository(LpmRepository.LpmRepositoryArguments(ApplicationProvider.getApplicationContext&lt;Application>().resources))</ID>
    <ID>MaxLineLength:PaymentRelayContract.kt$PaymentRelayContract$internal</ID>
    <ID>MaxLineLength:PaymentSessionConfig.kt$PaymentSessionConfig.Builder$*</ID>
    <ID>MaxLineLength:PaymentSessionConfigTest.kt$PaymentSessionConfigTest$fun</ID>
    <ID>MaxLineLength:PaymentSessionTest.kt$PaymentSessionTest$private val paymentMethodsActivityStarterArgsCaptor: KArgumentCaptor&lt;PaymentMethodsActivityStarter.Args> = argumentCaptor()</ID>
    <ID>MaxLineLength:PaymentSessionViewModelTest.kt$PaymentSessionViewModelTest$fun</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.Address$*</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.BillingDetails$*</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.Configuration$*</ID>
    <ID>MaxLineLength:PaymentSheet.kt$PaymentSheet.GooglePayConfiguration$*</ID>
    <ID>MaxLineLength:PaymentSheetActivityTest.kt$PaymentSheetActivityTest$fun</ID>
    <ID>MaxLineLength:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest$fun</ID>
    <ID>MaxLineLength:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest$onReady: (PaymentSheetAddPaymentMethodFragment, FragmentPaymentsheetAddPaymentMethodBinding, PaymentSheetViewModel) -> Unit</ID>
    <ID>MaxLineLength:PaymentSheetAddPaymentMethodFragmentTest.kt$PaymentSheetAddPaymentMethodFragmentTest.Companion$LpmRepository(LpmRepository.LpmRepositoryArguments(ApplicationProvider.getApplicationContext&lt;Application>().resources))</ID>
    <ID>MaxLineLength:PaymentSheetEventTest.kt$PaymentSheetEventTest$paymentSelection = PaymentSelection.New.Card(PaymentMethodCreateParamsFixtures.DEFAULT_CARD, mock(), mock())</ID>
    <ID>MaxLineLength:PaymentSheetPlaygroundActivity.kt$PaymentSheetPlaygroundActivity$false -> viewBinding.allowsDelayedPaymentMethodsRadioGroup.check(R.id.allowsDelayedPaymentMethods_off_button)</ID>
    <ID>MaxLineLength:PaymentSheetPlaygroundActivity.kt$PaymentSheetPlaygroundActivity$get() = viewBinding.allowsDelayedPaymentMethodsRadioGroup.checkedRadioButtonId == R.id.allowsDelayedPaymentMethods_on_button</ID>
    <ID>MaxLineLength:PaymentSheetViewModelTest.kt$PaymentSheetViewModelTest$fun</ID>
    <ID>MaxLineLength:PersonTokenParams.kt$PersonTokenParams$*</ID>
    <ID>MaxLineLength:PersonTokenParams.kt$PersonTokenParams.Document$*</ID>
    <ID>MaxLineLength:PersonTokenParams.kt$PersonTokenParams.Relationship$*</ID>
    <ID>MaxLineLength:PersonTokenParams.kt$PersonTokenParams.Verification$*</ID>
    <ID>MaxLineLength:PrimaryButtonTest.kt$PrimaryButtonTest$primaryButton.setAppearanceConfiguration(PaymentsThemeDefaults.primaryButtonStyle, ColorStateList.valueOf(Color.BLACK))</ID>
    <ID>MaxLineLength:QueryStringFactoryTest.kt$QueryStringFactoryTest$"colors[]=blue&amp;colors[]=green&amp;empty_list=&amp;person[age]=45&amp;person[city]=San Francisco&amp;person[wishes]=&amp;person[friends][]=Alice&amp;person[friends][]=Bob"</ID>
    <ID>MaxLineLength:RemoteCardAccountRangeSourceTest.kt$RemoteCardAccountRangeSourceTest$fun</ID>
    <ID>MaxLineLength:RequestHeadersFactoriesTest.kt$RequestHeadersFactoriesTest$.</ID>
    <ID>MaxLineLength:SelfieFragment.kt$SelfieFragment$"collectUploadedStateAndUploadForCollectedSelfies reaches unexpected upload state: $it"</ID>
    <ID>MaxLineLength:SelfieFragment.kt$SelfieFragment$identityScanViewModel.finalResult.value?.identityState?.transitioner as? FaceDetectorTransitioner</ID>
    <ID>MaxLineLength:SelfieFragmentTest.kt$SelfieFragmentTest$private</ID>
    <ID>MaxLineLength:SetupIntentFixtures.kt$SetupIntentFixtures$message</ID>
    <ID>MaxLineLength:SetupIntentFixtures.kt$SetupIntentFixtures$url</ID>
    <ID>MaxLineLength:SourceJsonParserTest.kt$SourceJsonParserTest$payLaterAssetUrlsDescriptive = "https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.svg"</ID>
    <ID>MaxLineLength:SourceJsonParserTest.kt$SourceJsonParserTest$payLaterAssetUrlsStandard = "https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.svg"</ID>
    <ID>MaxLineLength:SourceJsonParserTest.kt$SourceJsonParserTest$payOverTimeAssetUrlsDescriptive = "https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.svg"</ID>
    <ID>MaxLineLength:SourceJsonParserTest.kt$SourceJsonParserTest$payOverTimeAssetUrlsStandard = "https://x.klarnacdn.net/payment-method/assets/badges/generic/klarna.svg"</ID>
    <ID>MaxLineLength:SourceParams.kt$SourceParams.Companion$*</ID>
    <ID>MaxLineLength:Stripe.kt$Stripe$*</ID>
    <ID>MaxLineLength:Stripe.kt$Stripe.Companion$*</ID>
    <ID>MaxLineLength:Stripe3ds2AuthParamsTest.kt$Stripe3ds2AuthParamsTest.Companion$private const val DEVICE_DATA = "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.nid2Q-Ii21cSPHBaszR5KSXz866yX9I7AthLKpfWZoc7RIfz11UJ1EHuvIRDIyqqJ8txNUKKoL4keqMTqK5Yc5TqsxMn0nML8pZaPn40nXsJm_HFv3zMeOtRR7UTewsDWIgf5J-A6bhowIOmvKPCJRxspn_Cmja-YpgFWTp08uoJvqgntgg1lHmI1kh1UV6DuseYFUfuQlICTqC3TspAzah2CALWZORF_QtSeHc_RuqK02wOQMs-7079jRuSdBXvI6dQnL5ESH25wHHosfjHMZ9vtdUFNJo9J35UI1sdWFDzzj8k7bt0BupZhyeU0PSM9EHP-yv01-MQ9eslPTVNbFJ9YOHtq8WamvlKDr1sKxz6Ac_gUM8NgEcPP9SafPVxDd4H1Fwb5-4NYu2AD4xoAgMWE-YtzvfIFXZcU46NDoi6Xum3cHJqTH0UaOhBoqJJft9XZXYW80fjts-v28TkA76-QPF7CTDM6KbupvBkSoRq218eJLEywySXgCwf-Q95fsBtnnyhKcvfRaByq5kT7PH3DYD1rCQLexJ76A79kurre9pDjTKAv85G9DNkOFuVUYnNB3QGFReCcF9wzkGnZXdfkgN2BkB6n94bbkEyjbRb5r37XH6oRagx2fWLVj7kC5baeIwUPVb5kV_x4Kle7C-FPY1Obz4U7s6SVRnLGXY.IP9OcQx5uZxBRluOpn1m6Q.w-Ko5Qg6r-KCmKnprXEbKA7wV-SdLNDAKqjtuku6hda_0crOPRCPU4nn26Yxj7EG.p01pl8CKukuXzjLeY3a_Ew"</ID>
    <ID>MaxLineLength:Stripe3ds2Fixtures.kt$Stripe3ds2Fixtures$private const val DEVICE_DATA = "eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.nid2Q-Ii21cSPHBaszR5KSXz866yX9I7AthLKpfWZoc7RIfz11UJ1EHuvIRDIyqqJ8txNUKKoL4keqMTqK5Yc5TqsxMn0nML8pZaPn40nXsJm_HFv3zMeOtRR7UTewsDWIgf5J-A6bhowIOmvKPCJRxspn_Cmja-YpgFWTp08uoJvqgntgg1lHmI1kh1UV6DuseYFUfuQlICTqC3TspAzah2CALWZORF_QtSeHc_RuqK02wOQMs-7079jRuSdBXvI6dQnL5ESH25wHHosfjHMZ9vtdUFNJo9J35UI1sdWFDzzj8k7bt0BupZhyeU0PSM9EHP-yv01-MQ9eslPTVNbFJ9YOHtq8WamvlKDr1sKxz6Ac_gUM8NgEcPP9SafPVxDd4H1Fwb5-4NYu2AD4xoAgMWE-YtzvfIFXZcU46NDoi6Xum3cHJqTH0UaOhBoqJJft9XZXYW80fjts-v28TkA76-QPF7CTDM6KbupvBkSoRq218eJLEywySXgCwf-Q95fsBtnnyhKcvfRaByq5kT7PH3DYD1rCQLexJ76A79kurre9pDjTKAv85G9DNkOFuVUYnNB3QGFReCcF9wzkGnZXdfkgN2BkB6n94bbkEyjbRb5r37XH6oRagx2fWLVj7kC5baeIwUPVb5kV_x4Kle7C-FPY1Obz4U7s6SVRnLGXY.IP9OcQx5uZxBRluOpn1m6Q.w-Ko5Qg6r-KCmKnprXEbKA7wV-SdLNDAKqjtuku6hda_0crOPRCPU4nn26Yxj7EG.p01pl8CKukuXzjLeY3a_Ew"</ID>
    <ID>MaxLineLength:Stripe3ds2Fixtures.kt$Stripe3ds2Fixtures$private const val SDK_EPHEMERAL_PUBLIC_KEY = "{\"kty\":\"EC\",\"use\":\"sig\",\"crv\":\"P-256\",\"kid\":\"b23da28b-d611-46a8-93af-44ad57ce9c9d\",\"x\":\"hSwyaaAp3ppSGkpt7d9G8wnp3aIXelsZVo05EPpqetg\",\"y\":\"OUVOv9xPh5RYWapla0oz3vCJWRRXlDmppy5BGNeSl-A\"}"</ID>
    <ID>MaxLineLength:StripeColorUtils.kt$StripeColorUtils.Companion$*</ID>
    <ID>MaxLineLength:StripeEditTextTest.kt$StripeEditTextTest$editText.defaultColorStateList = ColorStateList.valueOf(ContextCompat.getColor(context, android.R.color.primary_text_dark))</ID>
    <ID>MaxLineLength:StripeErrorJsonParserTest.kt$StripeErrorJsonParserTest$message = "The Stripe API is only accessible over HTTPS. Please see &lt;https://stripe.com/docs> for more information."</ID>
    <ID>MaxLineLength:StripeIntent.kt$StripeIntent.Status$*</ID>
    <ID>MaxLineLength:StripeIntentFixtures.kt$StripeIntentFixtures$url</ID>
    <ID>MaxLineLength:StripeIntentRepositoryTest.kt$StripeIntentRepositoryTest$fun</ID>
    <ID>MaxLineLength:StripeKtx.kt$*</ID>
    <ID>MaxLineLength:StripeKtxTest.kt$StripeKtxTest$`Given repository returns non-empty value when calling retrieveAPI with String param then returns correct result`</ID>
    <ID>MaxLineLength:StripeKtxTest.kt$StripeKtxTest$assertFailsWith</ID>
    <ID>MaxLineLength:StripeKtxTest.kt$StripeKtxTest$private inline</ID>
    <ID>MaxLineLength:StripePaymentControllerTest.kt$StripePaymentControllerTest$"We are unable to authenticate your payment method. Please choose a different payment method and try again."</ID>
    <ID>MaxLineLength:StripePaymentLauncherTest.kt$StripePaymentLauncherTest$arg.injectorKey == (PaymentLauncher::class.simpleName + WeakMapInjectorRegistry.CURRENT_REGISTER_KEY.get())</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest$* This will generate payment intent scenarios for all combinations of customers, lpm types in the intent, shipping, and SFU states</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest$val formDescriptor = lpm.getSpecWithFullfilledRequirements(testInput.getIntent(lpm), testInput.getConfig())</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.PaymentIntentTestInput$fun toCsv()</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.PaymentIntentTestInput.Companion$fun toCsvHeader()</ID>
    <ID>MaxLineLength:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest.TestOutput.Companion$formShowsSaveCheckbox == false &amp;&amp; formShowsCheckboxControlledFields == true -> "merchantRequiredSave"</ID>
    <ID>MaxLineLength:TestBrowsers.kt$TestBrowsers$@Ignore("On browserstack's Google Pixel, the connection to stripe.com is deemed insecure and the page does not load.")</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$assertThat(viewModel.saveForFutureUseElement.controller.saveForFutureUse.stateIn(viewModel.viewModelScope).value).isFalse()</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$assertThat(viewModel.saveForFutureUseElement.controller.saveForFutureUse.stateIn(viewModel.viewModelScope).value).isTrue()</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$viewModel.handlePrimaryButtonClick(currentScreenState as USBankAccountFormScreenState.NameAndEmailCollection)</ID>
    <ID>MaxLineLength:USBankAccountFormViewModelTest.kt$USBankAccountFormViewModelTest$viewModel.handlePrimaryButtonClick(currentScreenState as USBankAccountFormScreenState.VerifyWithMicrodeposits)</ID>
    <ID>MaxLineLength:VerificationPage.kt$VerificationPage$* A VerificationPage contains the static content and initial state that is required for Stripe Identity's native mobile SDKs to render the verification flow.</ID>
    <ID>MaxLineLength:VerificationPageData.kt$VerificationPageData$* VerificationPageData contains the state of a verification, including what information needs to be collected to complete the verification flow.</ID>
    <ID>MaxLineLength:WeChat.kt$WeChat$*</ID>
    <ID>MaxLineLength:WebIntentAuthenticatorTest.kt$WebIntentAuthenticatorTest$expectedUrl = "https://hooks.stripe.com/3d_secure_2_eap/begin_test/src_1Ecaz6CRMbs6FrXfuYKBRSUG/src_client_secret_F6octeOshkgxT47dr0ZxSZiv"</ID>
    <ID>MaxLineLength:WebIntentAuthenticatorTest.kt$WebIntentAuthenticatorTest$expectedUrl = "https://hooks.stripe.com/3d_secure_2_eap/begin_test/src_1Ecve7CRMbs6FrXfm8AxXMIh/src_client_secret_F79yszOBAiuaZTuIhbn3LPUW"</ID>
    <ID>MaxLineLength:WebIntentAuthenticatorTest.kt$WebIntentAuthenticatorTest$expectedUrl = "https://hooks.stripe.com/redirect/authenticate/src_1EqTStGMT9dGPIDGJGPkqE6B?client_secret=src_client_secret_FL9m741mmxtHykDlRTC5aQ02"</ID>
    <ID>MaxLineLength:WebIntentAuthenticatorTest.kt$WebIntentAuthenticatorTest$expectedUrl = "https://payments.stripe.com/oxxo/voucher/test_YWNjdF8xSWN1c1VMMzJLbFJvdDAxLF9KRlBtckVBMERWM0lBZEUyb"</ID>
    <ID>MaximumLineLength:com.stripe.android.PaymentRelayContract.kt:9</ID>
    <ID>MaximumLineLength:com.stripe.android.TestBrowsers.kt:90</ID>
    <ID>MaximumLineLength:com.stripe.android.camera.framework.util.Memoize.kt:612</ID>
    <ID>MaximumLineLength:com.stripe.android.camera.framework.util.Memoize.kt:625</ID>
    <ID>MaximumLineLength:com.stripe.android.camera.framework.util.Memoize.kt:735</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.camera.IdentityScanFlow.kt:34</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.example.ComposeExampleActivity.kt:131</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.example.ComposeExampleActivity.kt:500</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.example.ComposeExampleActivity.kt:522</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.example.MainActivity.kt:100</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.CameraPermissionDeniedFragment.kt:70</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.ConsentFragment.kt:137</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.CouldNotCaptureFragment.kt:71</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.DocSelectionFragment.kt:79</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.IdentityDocumentScanFragment.kt:182</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.IdentityDocumentScanFragment.kt:249</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.IdentityUploadFragment.kt:319</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.IdentityUploadFragment.kt:356</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.SelfieFragment.kt:213</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.navigation.SelfieFragment.kt:243</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.states.FaceDetectorTransitioner.kt:221</ID>
    <ID>MaximumLineLength:com.stripe.android.identity.states.IDDetectorTransitioner.kt:127</ID>
    <ID>MaximumLineLength:com.stripe.android.paymentsheet.example.playground.activity.PaymentSheetPlaygroundActivity.kt:102</ID>
    <ID>MaximumLineLength:com.stripe.android.paymentsheet.example.playground.activity.PaymentSheetPlaygroundActivity.kt:335</ID>
    <ID>MaximumLineLength:com.stripe.android.ui.core.elements.NextActionSpec.kt:63</ID>
    <ID>MayBeConst:LinkPaymentLauncher.kt$LinkPaymentLauncher.Companion$val LINK_ENABLED = false</ID>
    <ID>NestedBlockDepth:FieldPopulator.kt$FieldPopulator$private fun populatePlatformLpmFields(values: Values = Values())</ID>
    <ID>NestedBlockDepth:NV21Image.kt$@CheckResult private fun yuvPlanesToNV21Compat( width: Int, height: Int, planeBuffers: Array&lt;ByteBuffer>, rowStrides: IntArray, pixelStrides: IntArray, format: Int, crop: Rect = Rect(0, 0, width, height) ): ByteArray</ID>
    <ID>NestedBlockDepth:Network.kt$@Throws(IOException::class) private fun downloadFile( url: URL, outputFile: File )</ID>
    <ID>NestedBlockDepth:PlaygroundTestDriver.kt$PlaygroundTestDriver$private fun doAuthorization()</ID>
    <ID>NestedBlockDepth:SSD.kt$internal fun rearrangeOCRArray( locations: Array&lt;FloatArray>, featureMapSizes: OcrFeatureMapSizes, numberOfPriors: Int, locationsPerPrior: Int ): Array&lt;FloatArray></ID>
    <ID>NestedBlockDepth:SupportedPaymentMethodTest.kt$SupportedPaymentMethodTest$private fun generatePaymentIntentScenarios(): List&lt;PaymentIntentTestInput></ID>
    <ID>NestedBlockDepth:Yolo.kt$internal fun processYoloLayer( layer: Array&lt;Array&lt;FloatArray>>, anchors: Array&lt;Pair&lt;Int, Int>>, imageSize: Size, numClasses: Int, confidenceThreshold: Float ): List&lt;DetectionBox></ID>
    <ID>NewLineAtEndOfFile:CardScanDemoActivity.kt$com.stripe.android.stripecardscan.example.CardScanDemoActivity.kt</ID>
    <ID>NewLineAtEndOfFile:CardScanFragmentDemoActivity.kt$com.stripe.android.stripecardscan.example.CardScanFragmentDemoActivity.kt</ID>
    <ID>NewLineAtEndOfFile:FinancialConnectionsExampleViewEffect.kt$com.stripe.android.financialconnections.example.FinancialConnectionsExampleViewEffect.kt</ID>
    <ID>NewLineAtEndOfFile:SnackbarController.kt$com.stripe.android.stripecardscan.example.SnackbarController.kt</ID>
    <ID>NoBlankLineBeforeRbrace:com.stripe.android.TestFieldPopulation.kt:116</ID>
    <ID>NoBlankLineBeforeRbrace:com.stripe.android.financialconnections.example.data.BackendRepository.kt:14</ID>
    <ID>NoBlankLineBeforeRbrace:com.stripe.android.paymentsheet.example.playground.viewmodel.PaymentSheetPlaygroundViewModel.kt:132</ID>
    <ID>NoBlankLineBeforeRbrace:com.stripe.android.test.core.FieldPopulator.kt:177</ID>
    <ID>NoBlankLineBeforeRbrace:com.stripe.android.test.core.PlaygroundTestDriver.kt:357</ID>
    <ID>NoBlankLineBeforeRbrace:com.stripe.android.test.core.ui.Selectors.kt:176</ID>
    <ID>NoBlankLineBeforeRbrace:com.stripe.android.test.core.ui.Selectors.kt:302</ID>
    <ID>NoConsecutiveBlankLines:com.stripe.android.TestMultiStepFieldsReloaded.kt:33</ID>
    <ID>NoConsecutiveBlankLines:com.stripe.android.financialconnections.example.FinancialConnectionsComposeExampleActivity.kt:34</ID>
    <ID>NoConsecutiveBlankLines:com.stripe.android.financialconnections.example.FinancialConnectionsExampleState.kt:8</ID>
    <ID>NoConsecutiveBlankLines:com.stripe.android.financialconnections.example.data.BackendApiFactory.kt:42</ID>
    <ID>NoConsecutiveBlankLines:com.stripe.android.paymentsheet.example.playground.activity.PaymentSheetPlaygroundActivity.kt:33</ID>
    <ID>NoConsecutiveBlankLines:com.stripe.android.paymentsheet.example.playground.activity.PaymentSheetPlaygroundActivity.kt:469</ID>
    <ID>NoConsecutiveBlankLines:com.stripe.android.test.core.ui.Selectors.kt:141</ID>
    <ID>NoTrailingSpaces:com.stripe.android.paymentsheet.example.samples.activity.BasePaymentSheetActivity.kt:46</ID>
    <ID>NoUnusedImports:com.stripe.android.test.core.ui.Selectors.kt:36</ID>
    <ID>ParameterListWrapping:com.stripe.android.camera.framework.util.Memoize.kt:625</ID>
    <ID>ParameterListWrapping:com.stripe.android.identity.navigation.SelfieFragmentTest.kt:282</ID>
    <ID>ParameterListWrapping:com.stripe.android.paymentsheet.PaymentOptionsAddPaymentMethodFragmentTest.kt:79</ID>
    <ID>ParameterListWrapping:com.stripe.android.paymentsheet.PaymentSheetAddPaymentMethodFragmentTest.kt:480</ID>
    <ID>PrintStackTrace:TestWatcher.kt$TestWatcher$e</ID>
    <ID>ReturnCount:AddressUtils.kt$internal fun CharSequence.levenshtein(other: CharSequence): Int</ID>
    <ID>ReturnCount:AuBankAccountNumberConfig.kt$AuBankAccountNumberConfig$override fun determineState(input: String): TextFieldState</ID>
    <ID>ReturnCount:BsbConfig.kt$BsbConfig$override fun determineState(input: String): TextFieldState</ID>
    <ID>ReturnCount:CardExpiry.kt$internal fun isValidExpiry(day: String?, month: String, year: String): Boolean</ID>
    <ID>ReturnCount:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$override fun originalToTransformed(offset: Int): Int</ID>
    <ID>ReturnCount:CardNumberVisualTransformation.kt$CardNumberVisualTransformation.&lt;no name provided>$override fun transformedToOriginal(offset: Int): Int</ID>
    <ID>ReturnCount:DateUtils.kt$DateUtils$@VisibleForTesting @JvmStatic fun isExpiryDataValid(expiryMonth: Int, expiryYear: Int, calendar: Calendar): Boolean</ID>
    <ID>ReturnCount:DefaultPaymentAuthenticatorRegistry.kt$DefaultPaymentAuthenticatorRegistry$@Suppress("UNCHECKED_CAST") override fun &lt;Authenticatable> getAuthenticator( authenticatable: Authenticatable ): PaymentAuthenticator&lt;Authenticatable></ID>
    <ID>ReturnCount:Fetcher.kt$WebFetcher$override suspend fun fetchData(forImmediateUse: Boolean, isOptional: Boolean): FetchedData</ID>
    <ID>ReturnCount:FraudDetectionDataJsonParser.kt$FraudDetectionDataJsonParser$override fun parse(json: JSONObject): FraudDetectionData?</ID>
    <ID>ReturnCount:IbanConfig.kt$IbanConfig$override fun determineState(input: String): TextFieldState</ID>
    <ID>ReturnCount:Loop.kt$AnalyzerLoop$protected fun subscribeToFlow( flow: Flow&lt;DataFrame>, processingCoroutineScope: CoroutineScope ): Job?</ID>
    <ID>ReturnCount:NV21Image.kt$NV21Image$fun crop(left: Int, top: Int, right: Int, bottom: Int): NV21Image</ID>
    <ID>ReturnCount:OTPController.kt$OTPController$fun onValueChanged(index: Int, text: String): Int</ID>
    <ID>ReturnCount:PaymentAuthWebViewClient.kt$PaymentAuthWebViewClient$private fun isReturnUrl(uri: Uri): Boolean</ID>
    <ID>ReturnCount:PhoneNumberController.kt$PhoneNumberController.Companion$fun createPhoneNumberController( initialValue: String = "", initiallySelectedCountryCode: String? = null ): PhoneNumberController</ID>
    <ID>ReturnCount:PostalCodeVisualTransformation.kt$PostalCodeVisualTransformation.&lt;no name provided>$override fun originalToTransformed(offset: Int): Int</ID>
    <ID>ReturnCount:PostalCodeVisualTransformation.kt$PostalCodeVisualTransformation.&lt;no name provided>$override fun transformedToOriginal(offset: Int): Int</ID>
    <ID>ReturnCount:RequiresMatchingCard.kt$RequiresMatchingCard$fun compareToRequiredCard(pan: String?): CardMatchResult</ID>
    <ID>ReturnCount:SSD.kt$internal fun determineLayoutAndFilter( detectedBoxes: List&lt;DetectionBox>, verticalOffset: Float ): List&lt;DetectionBox></ID>
    <ID>ReturnCount:WalletJsonParser.kt$WalletJsonParser$override fun parse(json: JSONObject): Wallet?</ID>
    <ID>SerialVersionUIDInSerializableClass:StripeError.kt$StripeError : StripeModelSerializable</ID>
    <ID>SpacingAroundCurly:com.stripe.android.paymentsheet.example.samples.activity.LaunchPaymentSheetWithComposeActivity.kt:21</ID>
    <ID>SpacingAroundCurly:com.stripe.android.test.core.ByteScreenCaptureProcessor.kt:19</ID>
    <ID>SpacingAroundCurly:com.stripe.android.test.core.PlaygroundTestDriver.kt:312</ID>
    <ID>SpacingAroundCurly:com.stripe.android.test.core.PlaygroundTestDriver.kt:316</ID>
    <ID>SpacingAroundCurly:com.stripe.android.test.core.ui.EspressoText.kt:14</ID>
    <ID>SpacingAroundKeyword:com.stripe.android.test.core.PlaygroundTestDriver.kt:312</ID>
    <ID>SpacingAroundKeyword:com.stripe.android.test.core.PlaygroundTestDriver.kt:316</ID>
    <ID>SpacingAroundOperators:com.stripe.android.paymentsheet.example.playground.viewmodel.PaymentSheetPlaygroundViewModel.kt:121</ID>
    <ID>SpreadOperator:BsbElementUI.kt$( it.errorMessage, *args )</ID>
    <ID>SpreadOperator:PhoneNumberElementUI.kt$( it.errorMessage, *args )</ID>
    <ID>SpreadOperator:SectionElementUI.kt$( it.errorMessage, *args )</ID>
    <ID>SpreadOperator:SimpleConfirmationActivity.kt$SimpleConfirmationActivity.DropdownItemAdapter$(*DropdownItem.values())</ID>
    <ID>SpreadOperator:TextFieldUI.kt$( it.errorMessage, *args )</ID>
    <ID>SwallowedException:Camera1Adapter.kt$Camera1Adapter$e: java.lang.Exception</ID>
    <ID>SwallowedException:Camera1Adapter.kt$Camera1Adapter$t: Throwable</ID>
    <ID>SwallowedException:Camera1Adapter.kt$Camera1Adapter.CameraPreview$t: Throwable</ID>
    <ID>SwallowedException:CameraAdapter.kt$CameraAdapter$e: ClosedSendChannelException</ID>
    <ID>SwallowedException:CardImageVerificationDemoActivity.kt$CardImageVerificationDemoActivity$t: Throwable</ID>
    <ID>SwallowedException:Device.kt$t: Throwable</ID>
    <ID>SwallowedException:EspressoLabelIdButton.kt$EspressoLabelIdButton$e: InvalidParameterException</ID>
    <ID>SwallowedException:Fetcher.kt$FetchedData.Companion$t: Throwable</ID>
    <ID>SwallowedException:FieldPopulator.kt$FieldPopulator$e: AssertionError</ID>
    <ID>SwallowedException:File.kt$t: Throwable</ID>
    <ID>SwallowedException:GetCameraAdapter.kt$t: Throwable</ID>
    <ID>SwallowedException:Loader.kt$Loader$t: Throwable</ID>
    <ID>SwallowedException:NV21Image.kt$ex: ReadOnlyBufferException</ID>
    <ID>SwallowedException:Network.kt$et: Throwable</ID>
    <ID>SwallowedException:PaymentOptionsActivity.kt$PaymentOptionsActivity$e: InvalidParameterException</ID>
    <ID>SwallowedException:PaymentUtils.kt$PaymentUtils$e: ClassCastException</ID>
    <ID>SwallowedException:Stripe.kt$Stripe$exception: CardException</ID>
    <ID>SwallowedException:StripeJsonUtils.kt$StripeJsonUtils$classCastException: ClassCastException</ID>
    <ID>SwallowedException:StripeJsonUtils.kt$StripeJsonUtils$jsonException: JSONException</ID>
    <ID>SwallowedException:StripeNetwork.kt$StripeNetwork$et: Throwable</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:PaymentSessionActivity.kt$PaymentSessionActivity.ActivityViewModel.&lt;no name provided>$RuntimeException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:TransformAddressToElement.kt$IllegalArgumentException()</ID>
    <ID>ThrowsCount:DefaultIdentityRepository.kt$DefaultIdentityRepository$private suspend fun &lt;Response : StripeModel> executeRequestWithModelJsonParser( request: StripeRequest, responseJsonParser: ModelJsonParser&lt;Response>, onSuccessExecutionTimeBlock: (Long) -> Unit = {} ): Response</ID>
    <ID>ThrowsCount:PaymentSheetConfigurationKtx.kt$internal fun PaymentSheet.Configuration.validate()</ID>
    <ID>ThrowsCount:Retry.kt$internal fun &lt;T> retrySync( times: Int = DEFAULT_RETRIES, excluding: List&lt;Class&lt;out Throwable>> = emptyList(), task: () -> T ): T</ID>
    <ID>ThrowsCount:Retry.kt$internal suspend fun &lt;T> retry( retryDelayFunction: (attempt: Int, totalAttempts: Int) -> Duration, times: Int = DEFAULT_RETRIES, excluding: List&lt;Class&lt;out Throwable>> = emptyList(), task: suspend () -> T ): T</ID>
    <ID>ThrowsCount:StripeApiRepository.kt$StripeApiRepository$@Throws( InvalidRequestException::class, AuthenticationException::class, CardException::class, APIException::class ) private fun handleApiError(response: StripeResponse&lt;String>)</ID>
    <ID>TooGenericExceptionCaught:Camera1Adapter.kt$Camera1Adapter$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:Camera1Adapter.kt$Camera1Adapter.CameraPreview$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:CameraAdapter.kt$CameraAdapter$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:CardImageVerificationDemoActivity.kt$CardImageVerificationDemoActivity$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:DefaultWeChatPayReflectionHelper.kt$DefaultWeChatPayReflectionHelper$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Device.kt$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:Fetcher.kt$FetchedData.Companion$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:Fetcher.kt$WebFetcher$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:File.kt$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:GetCameraAdapter.kt$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:IdentityExampleViewModel.kt$IdentityExampleViewModel$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:Loader.kt$Loader$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:Loop.kt$AnalyzerLoop$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:LpmSerializer.kt$LpmSerializer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Network.kt$LegacyStripeNetwork$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:Network.kt$et: Throwable</ID>
    <ID>TooGenericExceptionCaught:Network.kt$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:PlacesClientProxy.kt$DefaultPlacesClientProxy$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Retry.kt$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:Storage.kt$SharedPreferencesStorage$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:StripeNetwork.kt$StripeNetwork$et: Throwable</ID>
    <ID>TooGenericExceptionCaught:StripeNetwork.kt$StripeNetwork$t: Throwable</ID>
    <ID>TooGenericExceptionCaught:TensorFlowLiteAnalyzer.kt$TFLAnalyzerFactory$t: Throwable</ID>
    <ID>TooGenericExceptionThrown:DefaultAlipayRepository.kt$DefaultAlipayRepository$throw RuntimeException("Unable to authenticate Payment Intent with Alipay SDK")</ID>
    <ID>TooGenericExceptionThrown:PaymentFlowViewModelTest.kt$PaymentFlowViewModelTest.ThrowingShippingMethodsFactory$throw RuntimeException("Always throws an exception")</ID>
    <ID>TooGenericExceptionThrown:RetryTest.kt$RetryTest$throw RuntimeException()</ID>
    <ID>TooManyFunctions:AccountParams.kt$AccountParams.BusinessTypeParams.Company$Builder : ObjectBuilder</ID>
    <ID>TooManyFunctions:AccountParams.kt$AccountParams.BusinessTypeParams.Individual$Builder : ObjectBuilder</ID>
    <ID>TooManyFunctions:AddPaymentMethodActivity.kt$AddPaymentMethodActivity : StripeActivity</ID>
    <ID>TooManyFunctions:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity : BasePaymentSheetActivity</ID>
    <ID>TooManyFunctions:ArrayExtensions.kt$com.stripe.android.stripecardscan.framework.util.ArrayExtensions.kt</ID>
    <ID>TooManyFunctions:AuthenticationComponent.kt$AuthenticationComponent$Builder</ID>
    <ID>TooManyFunctions:BasePaymentMethodsListFragment.kt$BasePaymentMethodsListFragment : Fragment</ID>
    <ID>TooManyFunctions:BaseSheetActivity.kt$BaseSheetActivity&lt;ResultType> : AppCompatActivity</ID>
    <ID>TooManyFunctions:BaseSheetViewModel.kt$BaseSheetViewModel&lt;TransitionTargetType> : AndroidViewModel</ID>
    <ID>TooManyFunctions:BitmapExtensions.kt$com.stripe.android.camera.framework.image.BitmapExtensions.kt</ID>
    <ID>TooManyFunctions:Camera1Adapter.kt$Camera1Adapter : CameraAdapterPreviewCallback</ID>
    <ID>TooManyFunctions:CameraAdapter.kt$CameraAdapter&lt;CameraOutput> : LifecycleEventObserver</ID>
    <ID>TooManyFunctions:CardExpiry.kt$com.stripe.android.stripecardscan.payment.card.CardExpiry.kt</ID>
    <ID>TooManyFunctions:CardFormView.kt$CardFormView : LinearLayout</ID>
    <ID>TooManyFunctions:CardImageVerificationActivity.kt$CardImageVerificationActivity : SimpleScanActivitySimpleScanStateful</ID>
    <ID>TooManyFunctions:CardInputWidget.kt$CardInputWidget : LinearLayoutCardWidget</ID>
    <ID>TooManyFunctions:CardMultilineWidget.kt$CardMultilineWidget : LinearLayoutCardWidget</ID>
    <ID>TooManyFunctions:CardScanActivity.kt$CardScanActivity : ScanActivitySimpleScanStateful</ID>
    <ID>TooManyFunctions:CardScanFragment.kt$CardScanFragment : ScanFragmentSimpleScanStateful</ID>
    <ID>TooManyFunctions:CardWidget.kt$CardWidget</ID>
    <ID>TooManyFunctions:CountryTextInputLayout.kt$CountryTextInputLayout : TextInputLayout</ID>
    <ID>TooManyFunctions:CustomerSession.kt$CustomerSession</ID>
    <ID>TooManyFunctions:DefaultFlowController.kt$DefaultFlowController : FlowControllerInjector</ID>
    <ID>TooManyFunctions:DefaultLinkEventsReporter.kt$DefaultLinkEventsReporter : LinkEventsReporter</ID>
    <ID>TooManyFunctions:Duration.kt$Duration : Comparable</ID>
    <ID>TooManyFunctions:FlowControllerComponent.kt$FlowControllerComponent$Builder</ID>
    <ID>TooManyFunctions:FragmentExamplesFragment.kt$FragmentExamplesFragment : Fragment</ID>
    <ID>TooManyFunctions:IdentityAnalyticsRequestFactory.kt$IdentityAnalyticsRequestFactory</ID>
    <ID>TooManyFunctions:IdentityUploadFragment.kt$IdentityUploadFragment : Fragment</ID>
    <ID>TooManyFunctions:IdentityViewModel.kt$IdentityViewModel : ViewModel</ID>
    <ID>TooManyFunctions:Layout.kt$com.stripe.android.camera.framework.util.Layout.kt</ID>
    <ID>TooManyFunctions:LinkAccountManager.kt$LinkAccountManager</ID>
    <ID>TooManyFunctions:LinkApiRepository.kt$LinkApiRepository : LinkRepository</ID>
    <ID>TooManyFunctions:LinkEventsReporter.kt$LinkEventsReporter</ID>
    <ID>TooManyFunctions:LinkPaymentLauncherComponent.kt$LinkPaymentLauncherComponent$Builder</ID>
    <ID>TooManyFunctions:LinkRepository.kt$LinkRepository</ID>
    <ID>TooManyFunctions:Memoize.kt$com.stripe.android.camera.framework.util.Memoize.kt</ID>
    <ID>TooManyFunctions:NavigationUtils.kt$com.stripe.android.identity.utils.NavigationUtils.kt</ID>
    <ID>TooManyFunctions:PaymentAnalyticsRequestFactory.kt$PaymentAnalyticsRequestFactory : AnalyticsRequestFactory</ID>
    <ID>TooManyFunctions:PaymentCardUtils.kt$com.stripe.android.stripecardscan.payment.card.PaymentCardUtils.kt</ID>
    <ID>TooManyFunctions:PaymentController.kt$PaymentController</ID>
    <ID>TooManyFunctions:PaymentFlowActivity.kt$PaymentFlowActivity : StripeActivity</ID>
    <ID>TooManyFunctions:PaymentFlowResultProcessor.kt$PaymentFlowResultProcessor&lt;T : StripeIntent, out S : StripeIntentResult&lt;T>></ID>
    <ID>TooManyFunctions:PaymentMethod.kt$PaymentMethod$Builder : ObjectBuilder</ID>
    <ID>TooManyFunctions:PaymentMethodCreateParams.kt$PaymentMethodCreateParams$Companion</ID>
    <ID>TooManyFunctions:PaymentMethodViewModel.kt$PaymentMethodViewModel : ViewModel</ID>
    <ID>TooManyFunctions:PaymentMethodsActivity.kt$PaymentMethodsActivity : AppCompatActivity</ID>
    <ID>TooManyFunctions:PaymentMethodsActivityStarter.kt$PaymentMethodsActivityStarter.Args$Builder : ObjectBuilder</ID>
    <ID>TooManyFunctions:PaymentMethodsAdapter.kt$PaymentMethodsAdapter : Adapter</ID>
    <ID>TooManyFunctions:PaymentOptionsAdapter.kt$PaymentOptionsAdapter : Adapter</ID>
    <ID>TooManyFunctions:PaymentOptionsViewModel.kt$PaymentOptionsViewModel : BaseSheetViewModel</ID>
    <ID>TooManyFunctions:PaymentSessionActivity.kt$PaymentSessionActivity : AppCompatActivity</ID>
    <ID>TooManyFunctions:PaymentSessionConfig.kt$PaymentSessionConfig$Builder : ObjectBuilder</ID>
    <ID>TooManyFunctions:PaymentSessionViewModel.kt$PaymentSessionViewModel : AndroidViewModel</ID>
    <ID>TooManyFunctions:PaymentSheetPlaygroundActivity.kt$PaymentSheetPlaygroundActivity : AppCompatActivity</ID>
    <ID>TooManyFunctions:PaymentSheetViewModel.kt$PaymentSheetViewModel : BaseSheetViewModel</ID>
    <ID>TooManyFunctions:PaymentsTheme.kt$com.stripe.android.ui.core.PaymentsTheme.kt</ID>
    <ID>TooManyFunctions:PersonTokenParams.kt$PersonTokenParams$Builder : ObjectBuilder</ID>
    <ID>TooManyFunctions:RectForm.kt$com.stripe.android.stripecardscan.framework.ml.ssd.RectForm.kt</ID>
    <ID>TooManyFunctions:ScanActivity.kt$ScanActivity : CameraPermissionCheckingActivityCoroutineScope</ID>
    <ID>TooManyFunctions:ScanFragment.kt$ScanFragment : FragmentCoroutineScope</ID>
    <ID>TooManyFunctions:ShippingInfoWidget.kt$ShippingInfoWidget : LinearLayout</ID>
    <ID>TooManyFunctions:SimpleScanActivity.kt$SimpleScanActivity&lt;ScanFlowParameters> : ScanActivity</ID>
    <ID>TooManyFunctions:SizeAndCenter.kt$com.stripe.android.stripecardscan.framework.ml.ssd.SizeAndCenter.kt</ID>
    <ID>TooManyFunctions:SourceParams.kt$SourceParams$Companion</ID>
    <ID>TooManyFunctions:Storage.kt$SharedPreferencesStorage : Storage</ID>
    <ID>TooManyFunctions:Storage.kt$Storage</ID>
    <ID>TooManyFunctions:Stripe.kt$Stripe</ID>
    <ID>TooManyFunctions:StripeApiRepository.kt$StripeApiRepository : StripeRepository</ID>
    <ID>TooManyFunctions:StripeApiRepository.kt$StripeApiRepository$Companion</ID>
    <ID>TooManyFunctions:StripeEditText.kt$StripeEditText : TextInputEditText</ID>
    <ID>TooManyFunctions:StripeJsonUtils.kt$StripeJsonUtils$StripeJsonUtils</ID>
    <ID>TooManyFunctions:StripeKtx.kt$com.stripe.android.StripeKtx.kt</ID>
    <ID>TooManyFunctions:StripePaymentController.kt$StripePaymentController : PaymentController</ID>
    <ID>TooManyFunctions:StripeRepository.kt$StripeRepository</ID>
    <ID>TooManyFunctions:TestHardCodedLpms.kt$TestHardCodedLpms</ID>
    <ID>TooManyFunctions:TestMultiStepFieldsReloaded.kt$TestMultiStepFieldsReloaded</ID>
    <ID>TooManyFunctions:TestPaymentSheetScreenshots.kt$TestPaymentSheetScreenshots</ID>
    <ID>TooManyFunctions:USBankAccountFormFragment.kt$USBankAccountFormFragment : Fragment</ID>
    <ID>TooManyFunctions:USBankAccountFormViewModel.kt$USBankAccountFormViewModel : ViewModel</ID>
    <ID>TooManyFunctions:WalletViewModel.kt$WalletViewModel : ViewModel</ID>
    <ID>TopLevelPropertyNaming:ConsentScreen.kt$internal const val acceptButtonTag = "Accept"</ID>
    <ID>TopLevelPropertyNaming:ConsentScreen.kt$internal const val bodyTag = "Body"</ID>
    <ID>TopLevelPropertyNaming:ConsentScreen.kt$internal const val declineButtonTag = "Decline"</ID>
    <ID>TopLevelPropertyNaming:ConsentScreen.kt$internal const val dividerTag = "divider"</ID>
    <ID>TopLevelPropertyNaming:ConsentScreen.kt$internal const val loadingScreenTag = "Loading"</ID>
    <ID>TopLevelPropertyNaming:ConsentScreen.kt$internal const val privacyPolicyTag = "PrivacyPolicy"</ID>
    <ID>TopLevelPropertyNaming:ConsentScreen.kt$internal const val timeEstimateTag = "TimeEstimate"</ID>
    <ID>TopLevelPropertyNaming:ConsentScreen.kt$internal const val titleTag = "Title"</ID>
    <ID>TopLevelPropertyNaming:DocSelectionScreen.kt$internal const val docSelectionTitleTag = "Title"</ID>
    <ID>TopLevelPropertyNaming:DocSelectionScreen.kt$internal const val singleSelectionTag = "SingleSelection"</ID>
    <ID>TopLevelPropertyNaming:Menu.kt$// Menu open/close animation. internal const val InTransitionDuration = 120</ID>
    <ID>TopLevelPropertyNaming:Menu.kt$internal const val OutTransitionDuration = 75</ID>
    <ID>TopLevelPropertyNaming:PrimaryButton.kt$internal const val completedIconTestTag = "CompletedIcon"</ID>
    <ID>TopLevelPropertyNaming:PrimaryButton.kt$internal const val progressIndicatorTestTag = "CircularProgressIndicator"</ID>
    <ID>UnnecessaryAbstractClass:FlowControllerModule.kt$FlowControllerModule$FlowControllerModule</ID>
    <ID>UnnecessaryAbstractClass:FormControllerModule.kt$FormControllerModule$FormControllerModule</ID>
    <ID>UnnecessaryAbstractClass:IdentityCommonModule.kt$IdentityCommonModule$IdentityCommonModule</ID>
    <ID>UnnecessaryAbstractClass:LinkComponent.kt$LinkComponent$LinkComponent</ID>
    <ID>UnnecessaryAbstractClass:LinkPaymentLauncherComponent.kt$LinkPaymentLauncherComponent$LinkPaymentLauncherComponent</ID>
    <ID>UnnecessaryAbstractClass:MachineState.kt$MachineState$MachineState</ID>
    <ID>UnnecessaryAbstractClass:PaymentSheetCommonModule.kt$PaymentSheetCommonModule$PaymentSheetCommonModule</ID>
    <ID>UnnecessaryAbstractClass:PaymentSheetLauncherModule.kt$PaymentSheetLauncherModule$PaymentSheetLauncherModule</ID>
    <ID>UnnecessaryAbstractClass:SimpleScanStateful.kt$ScanState$ScanState</ID>
    <ID>UnusedPrivateClass:PaymentOptionsViewModelTest.kt$PaymentOptionsViewModelTest$MyHostActivity : AppCompatActivity</ID>
    <ID>UnusedPrivateMember:AcceptedImageConfigs.kt$AcceptedImageConfigs$val mappedFormats = it.preferredFormats?.map { ImageFormat.fromValue(it) } ?.filter { isformatSupport(it) } ?.takeIf { it.count() > 0 } ?.let { preferredFormats = it.toTypedArray() }</ID>
    <ID>UnusedPrivateMember:BillingAddressViewTest.kt$BillingAddressViewTest.Companion$private val FRANCE = CountryCode.create("FR")</ID>
    <ID>UnusedPrivateMember:Camera1Adapter.kt$Camera1Adapter.CameraPreview$i</ID>
    <ID>UnusedPrivateMember:CustomerSession.kt$CustomerSession$private fun &lt;L : RetrievalListener?> getListener(operationId: String): L?</ID>
    <ID>UnusedPrivateMember:ErrorText.kt$@Preview @Composable private fun ErrorTextPreview()</ID>
    <ID>UnusedPrivateMember:GooglePayLauncherActivityTest.kt$GooglePayLauncherActivityTest$private val context = ApplicationProvider.getApplicationContext&lt;Context>()</ID>
    <ID>UnusedPrivateMember:GooglePayPaymentMethodLauncherModule.kt$GooglePayPaymentMethodLauncherModule.Companion$context: Context</ID>
    <ID>UnusedPrivateMember:IDDetectorTransitionerTest.kt$IDDetectorTransitionerTest$i</ID>
    <ID>UnusedPrivateMember:IdentityUploadFragment.kt$IdentityUploadFragment$private fun IdentityScanState.ScanType.toType(): CollectedDataParam.Type</ID>
    <ID>UnusedPrivateMember:IdentityUploadFragment.kt$IdentityUploadFragment$private fun checkBackFields( nonNullBlock: (String, String, IdentityScanState.ScanType) -> Unit, nullBlock: () -> Unit )</ID>
    <ID>UnusedPrivateMember:LinkAppBar.kt$@Preview @Composable private fun LinkAppBarPreview()</ID>
    <ID>UnusedPrivateMember:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_ChildScreen()</ID>
    <ID>UnusedPrivateMember:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_ChildScreen_NoEmail()</ID>
    <ID>UnusedPrivateMember:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_NoEmail()</ID>
    <ID>UnusedPrivateMember:LinkTerms.kt$textAlign: TextAlign = TextAlign.Center</ID>
    <ID>UnusedPrivateMember:NV21Image.kt$@CheckResult private fun yuvPlanesToNV21Compat( width: Int, height: Int, planeBuffers: Array&lt;ByteBuffer>, rowStrides: IntArray, pixelStrides: IntArray, format: Int, crop: Rect = Rect(0, 0, width, height) ): ByteArray</ID>
    <ID>UnusedPrivateMember:NV21Image.kt$@CheckResult private fun yuvPlanesToNV21Slow(planeBuffers: Array&lt;ByteBuffer>): ByteArray</ID>
    <ID>UnusedPrivateMember:NV21Image.kt$private fun yuvPlanesToBitmap( width: Int, height: Int, planeBuffers: Array&lt;ByteBuffer> ): Bitmap</ID>
    <ID>UnusedPrivateMember:PayWithGoogleUtils.kt$PayWithGoogleUtils$i</ID>
    <ID>UnusedPrivateMember:PaymentCardUtils.kt$@CheckResult private fun jaccardIndex(string1: String, string2: String): Double</ID>
    <ID>UnusedPrivateMember:PaymentCardUtils.kt$private fun String.isDigitsOnly()</ID>
    <ID>UnusedPrivateMember:PaymentFlowActivityStarter.kt$PaymentFlowActivityStarter$config: PaymentSessionConfig</ID>
    <ID>UnusedPrivateMember:PaymentMethod.kt$PaymentMethod.CardPresent$private val ignore: Boolean = true</ID>
    <ID>UnusedPrivateMember:PaymentMethodBody.kt$@Preview @Composable private fun PaymentMethodBodyPreview()</ID>
    <ID>UnusedPrivateMember:PaymentMethodViewModelTest.kt$PaymentMethodViewModelTest$private fun createFinancialConnectionsAccount(id: String = "id")</ID>
    <ID>UnusedPrivateMember:PaymentSheetPlaygroundActivity.kt$PaymentSheetPlaygroundActivity.Companion$private const val sharedPreferencesName = "playgroundToggles"</ID>
    <ID>UnusedPrivateMember:PersonTokenParams.kt$PersonTokenParams.Companion$// top level param private const val PARAM_PERSON = "person"</ID>
    <ID>UnusedPrivateMember:Retry.kt$attempt</ID>
    <ID>UnusedPrivateMember:ScanActivity.kt$ScanActivity$private val permissionStat = Stats.trackTask("camera_permission")</ID>
    <ID>UnusedPrivateMember:SignUpScreen.kt$@Preview @Composable private fun SignUpBodyPreview()</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult$private val liveMode: Boolean = false</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val acsChallengeMandated: String?</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val acsUrl: String? = null</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val authenticationType: String? = null</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val cardholderInfo: String? = null</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val messageExtension: List&lt;MessageExtension>? = null</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val messageType: String?</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val messageVersion: String?</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.Ares$private val sdkTransId: String?</ID>
    <ID>UnusedPrivateMember:Stripe3ds2AuthResult.kt$Stripe3ds2AuthResult.MessageExtension$private val criticalityIndicator: Boolean</ID>
    <ID>UnusedPrivateMember:Stripe3ds2Fixtures.kt$Stripe3ds2Fixtures$private val SDK_TRANSACTION_ID = UUID.randomUUID().toString()</ID>
    <ID>UnusedPrivateMember:StripeApi.kt$savedFrames: Collection&lt;SavedFrame></ID>
    <ID>UnusedPrivateMember:StripeBrowserLauncherActivity.kt$StripeBrowserLauncherActivity$activityResult: ActivityResult</ID>
    <ID>UnusedPrivateMember:StripeBrowserLauncherActivityTest.kt$StripeBrowserLauncherActivityTest$private val context = ApplicationProvider.getApplicationContext&lt;Context>()</ID>
    <ID>UnusedPrivateMember:TestPaymentSheetScreenshots.kt$TestPaymentSheetScreenshots.Companion$private val lpmRepository = LpmRepository( LpmRepository.LpmRepositoryArguments( InstrumentationRegistry.getInstrumentation().targetContext.resources ) )</ID>
    <ID>UnusedPrivateMember:VerificationScreen.kt$@Preview @Composable private fun VerificationBodyPreview()</ID>
    <ID>UnusedPrivateMember:WalletScreen.kt$@Preview @Composable private fun WalletBodyPreview()</ID>
    <ID>UtilityClassWithPublicConstructor:CurrencyFormatter.kt$CurrencyFormatter</ID>
    <ID>UtilityClassWithPublicConstructor:FieldValuesToParamsMapConverter.kt$FieldValuesToParamsMapConverter</ID>
    <ID>UtilityClassWithPublicConstructor:FormControllerModule.kt$FormControllerModule</ID>
    <ID>VariableNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$private val BACKGROUND_COLOR = Color(242, 242, 247)</ID>
    <ID>VariableNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$private val BASE_FONT_SIZE = 20.sp</ID>
    <ID>VariableNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$private val BASE_PADDING = 8.dp</ID>
    <ID>VariableNaming:AppearancePlaygroundActivity.kt$AppearancePlaygroundActivity$private val SECTION_LABEL_COLOR = Color(159, 159, 169)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$// a fatal error protected val _fatal = MutableLiveData&lt;Throwable>()</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _amount = savedStateHandle.getLiveData&lt;Amount>(SAVE_AMOUNT)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _contentVisible = MutableLiveData(true)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _isGooglePayReady = savedStateHandle.getLiveData&lt;Boolean>(SAVE_GOOGLE_PAY_READY)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting internal val _liveMode get() = savedStateHandle.getLiveData&lt;Boolean>(SAVE_STATE_LIVE_MODE)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED) internal val _paymentMethods = savedStateHandle.getLiveData&lt;List&lt;PaymentMethod>>(SAVE_PAYMENT_METHODS)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$@VisibleForTesting(otherwise = VisibleForTesting.PROTECTED) internal val _processing = savedStateHandle.getLiveData&lt;Boolean>(SAVE_PROCESSING)</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$protected val _isLinkEnabled = MutableLiveData&lt;Boolean>()</ID>
    <ID>VariableNaming:BaseSheetViewModel.kt$BaseSheetViewModel$protected val _showLinkVerificationDialog = MutableLiveData(false)</ID>
    <ID>VariableNaming:PaymentOptionsViewModel.kt$PaymentOptionsViewModel$@VisibleForTesting internal val _paymentOptionResult = MutableLiveData&lt;PaymentOptionResult>()</ID>
    <ID>VariableNaming:PaymentSheetViewModel.kt$PaymentSheetViewModel$@VisibleForTesting internal val _paymentSheetResult = MutableLiveData&lt;PaymentSheetResult>()</ID>
    <ID>VariableNaming:PaymentSheetViewModel.kt$PaymentSheetViewModel$@VisibleForTesting internal val _viewState = MutableLiveData&lt;PaymentSheetViewState>(null)</ID>
    <ID>Wrapping:com.stripe.android.paymentsheet.example.samples.viewmodel.PaymentSheetViewModel.kt:31</ID>
    <ID>Wrapping:com.stripe.android.paymentsheet.example.samples.viewmodel.PaymentSheetViewModel.kt:32</ID>
    <ID>Wrapping:com.stripe.android.stripecardscan.example.CardImageVerificationDemoActivity.kt:127</ID>
    <ID>Wrapping:com.stripe.android.stripecardscan.example.CardImageVerificationDemoActivity.kt:62</ID>
  </CurrentIssues>
</SmellBaseline>
