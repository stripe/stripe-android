plugins {
    id 'com.android.library'
    id 'kotlin-android'
}

configurations {
    ktlint
}

// Read values from gradle.properties or system environment variable
def getBackendUrl() {
    return readProperty('STRIPE_END_TO_END_TESTS_BACKEND_URL')
}

private def readProperty(name) {
    final String propValue
    if (hasProperty(name)) {
        propValue = property(name)
    } else {
        propValue = System.getenv(name)
    }

    return propValue?.trim() ? propValue : ""
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        manifestPlaceholders = [
                BACKEND_URL: getBackendUrl()
        ]
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation project(':stripe')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    testImplementation 'org.robolectric:robolectric:4.5.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'com.google.truth:truth:1.1.2'
    testImplementation "androidx.test:core:$androidTestVersion"

    testImplementation "com.squareup.retrofit2:retrofit:2.9.0"
    testImplementation "com.squareup.retrofit2:converter-moshi:2.4.0"

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlinVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"

    ktlint "com.pinterest:ktlint:$ktlintVersion"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    main = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}
