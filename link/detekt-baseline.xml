<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ForbiddenComment:LinkActivityTest.kt$LinkActivityTest$// TODO:(brnunes-stripe) Enable these tests</ID>
    <ID>FunctionNaming:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_ChildScreen()</ID>
    <ID>FunctionNaming:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_ChildScreen_NoEmail()</ID>
    <ID>FunctionNaming:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_NoEmail()</ID>
    <ID>LongMethod:LinkActivity.kt$LinkActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:LinkAppBar.kt$@Composable internal fun LinkAppBar( state: LinkAppBarState, onBackPressed: () -> Unit, onLogout: () -> Unit, showBottomSheetContent: (BottomSheetContent?) -> Unit )</ID>
    <ID>LongMethod:LinkInlineSignup.kt$@Composable internal fun LinkInlineSignup( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, enabled: Boolean, expanded: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, toggleExpanded: () -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongMethod:PaymentDetails.kt$@Composable internal fun PaymentDetailsListItem( paymentDetails: ConsumerPaymentDetails.PaymentDetails, enabled: Boolean, isSupported: Boolean, isSelected: Boolean, isUpdating: Boolean, onClick: () -> Unit, onMenuButtonClick: () -> Unit )</ID>
    <ID>LongMethod:PaymentMethodBody.kt$@Composable internal fun PaymentMethodBody( linkAccount: LinkAccount, injector: NonFallbackInjector, loadFromArgs: Boolean )</ID>
    <ID>LongMethod:SignUpScreen.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable internal fun SignUpBody( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, isReadyToSignUp: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, onSignUpClick: () -> Unit )</ID>
    <ID>LongMethod:VerificationDialog.kt$@OptIn(ExperimentalComposeUiApi::class) @Composable fun LinkVerificationDialog( linkLauncher: LinkPaymentLauncher, verificationCallback: LinkVerificationCallback )</ID>
    <ID>LongMethod:VerificationScreen.kt$@Composable internal fun VerificationBody( @StringRes headerStringResId: Int, @StringRes messageStringResId: Int, showChangeEmailMessage: Boolean, redactedPhoneNumber: String, email: String, otpElement: OTPElement, isProcessing: Boolean, errorMessage: ErrorMessage?, focusRequester: FocusRequester, onBack: () -> Unit, onChangeEmailClick: () -> Unit, onResendCodeClick: () -> Unit )</ID>
    <ID>LongMethod:WalletScreen.kt$@Composable internal fun WalletBody( uiState: WalletUiState, primaryButtonLabel: String, expiryDateController: TextFieldController, cvcController: CvcController, setExpanded: (Boolean) -> Unit, onItemSelected: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onAddNewPaymentMethodClick: () -> Unit, onEditPaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onSetDefault: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onDeletePaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onPrimaryButtonClick: () -> Unit, onPayAnotherWayClick: () -> Unit, showBottomSheetContent: (BottomSheetContent?) -> Unit )</ID>
    <ID>LongMethod:WalletScreen.kt$@Composable private fun ExpandedPaymentDetails( uiState: WalletUiState, onItemSelected: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onMenuButtonClick: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onAddNewPaymentMethodClick: () -> Unit, onCollapse: () -> Unit )</ID>
    <ID>LongParameterList:CardEditScreen.kt$( isProcessing: Boolean, isDefault: Boolean, setAsDefaultChecked: Boolean, primaryButtonEnabled: Boolean, errorMessage: ErrorMessage?, onSetAsDefaultClick: (Boolean) -> Unit, onPrimaryButtonClick: () -> Unit, onCancelClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>LongParameterList:InlineSignupViewModel.kt$InlineSignupViewModel$( @Named(LINK_INTENT) val stripeIntent: StripeIntent, @Named(MERCHANT_NAME) val merchantName: String, @Named(CUSTOMER_EMAIL) customerEmail: String?, @Named(CUSTOMER_PHONE) customerPhone: String?, @Named(CUSTOMER_NAME) customerName: String?, private val linkAccountManager: LinkAccountManager, private val linkEventsReporter: LinkEventsReporter, private val logger: Logger )</ID>
    <ID>LongParameterList:LinkInlineSignup.kt$( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, enabled: Boolean, expanded: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, toggleExpanded: () -> Unit, modifier: Modifier = Modifier )</ID>
    <ID>LongParameterList:LinkPaymentLauncher.kt$LinkPaymentLauncher$( context: Context, @Named(PRODUCT_USAGE) private val productUsage: Set&lt;String>, @Named(PUBLISHABLE_KEY) private val publishableKeyProvider: () -> String, @Named(STRIPE_ACCOUNT_ID) private val stripeAccountIdProvider: () -> String?, @Named(ENABLE_LOGGING) private val enableLogging: Boolean, @IOContext ioContext: CoroutineContext, @UIContext uiContext: CoroutineContext, paymentAnalyticsRequestFactory: PaymentAnalyticsRequestFactory, analyticsRequestExecutor: AnalyticsRequestExecutor, stripeRepository: StripeRepository, addressResourceRepository: ResourceRepository&lt;AddressRepository> )</ID>
    <ID>LongParameterList:LinkRepository.kt$LinkRepository$( email: String, phone: String, country: String, name: String?, authSessionCookie: String?, consentAction: ConsumerSignUpConsentAction )</ID>
    <ID>LongParameterList:PaymentDetails.kt$( paymentDetails: ConsumerPaymentDetails.PaymentDetails, enabled: Boolean, isSupported: Boolean, isSelected: Boolean, isUpdating: Boolean, onClick: () -> Unit, onMenuButtonClick: () -> Unit )</ID>
    <ID>LongParameterList:PaymentMethodBody.kt$( supportedPaymentMethods: List&lt;SupportedPaymentMethod>, selectedPaymentMethod: SupportedPaymentMethod, primaryButtonLabel: String, primaryButtonState: PrimaryButtonState, secondaryButtonLabel: String, errorMessage: ErrorMessage?, onPaymentMethodSelected: (SupportedPaymentMethod) -> Unit, onPrimaryButtonClick: () -> Unit, onSecondaryButtonClick: () -> Unit, formContent: @Composable ColumnScope.() -> Unit )</ID>
    <ID>LongParameterList:PaymentMethodViewModel.kt$PaymentMethodViewModel$( val args: LinkActivityContract.Args, val linkAccount: LinkAccount, private val linkAccountManager: LinkAccountManager, private val navigator: Navigator, private val confirmationManager: ConfirmationManager, private val logger: Logger, private val formControllerProvider: Provider&lt;FormControllerSubcomponent.Builder> )</ID>
    <ID>LongParameterList:SignUpScreen.kt$( merchantName: String, emailController: TextFieldController, phoneNumberController: PhoneNumberController, nameController: TextFieldController, signUpState: SignUpState, isReadyToSignUp: Boolean, requiresNameCollection: Boolean, errorMessage: ErrorMessage?, onSignUpClick: () -> Unit )</ID>
    <ID>LongParameterList:VerificationScreen.kt$( @StringRes headerStringResId: Int, @StringRes messageStringResId: Int, showChangeEmailMessage: Boolean, linkAccount: LinkAccount, injector: NonFallbackInjector, onVerificationCompleted: (() -> Unit)? = null )</ID>
    <ID>LongParameterList:VerificationScreen.kt$( @StringRes headerStringResId: Int, @StringRes messageStringResId: Int, showChangeEmailMessage: Boolean, redactedPhoneNumber: String, email: String, otpElement: OTPElement, isProcessing: Boolean, errorMessage: ErrorMessage?, focusRequester: FocusRequester, onBack: () -> Unit, onChangeEmailClick: () -> Unit, onResendCodeClick: () -> Unit )</ID>
    <ID>LongParameterList:WalletScreen.kt$( uiState: WalletUiState, primaryButtonLabel: String, expiryDateController: TextFieldController, cvcController: CvcController, setExpanded: (Boolean) -> Unit, onItemSelected: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onAddNewPaymentMethodClick: () -> Unit, onEditPaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onSetDefault: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onDeletePaymentMethod: (ConsumerPaymentDetails.PaymentDetails) -> Unit, onPrimaryButtonClick: () -> Unit, onPayAnotherWayClick: () -> Unit, showBottomSheetContent: (BottomSheetContent?) -> Unit )</ID>
    <ID>MagicNumber:Color.kt$0x1F0A2348</ID>
    <ID>MagicNumber:Color.kt$0x2E747480</ID>
    <ID>MagicNumber:Color.kt$0x2EFE87A1</ID>
    <ID>MagicNumber:Color.kt$0x33787880</ID>
    <ID>MagicNumber:Color.kt$0x5C787880</ID>
    <ID>MagicNumber:Color.kt$0x61FFFFFF</ID>
    <ID>MagicNumber:Color.kt$0x99000000</ID>
    <ID>MagicNumber:Color.kt$0x99EBEBF5</ID>
    <ID>MagicNumber:Color.kt$0xFF05A87F</ID>
    <ID>MagicNumber:Color.kt$0xFF1AC59B</ID>
    <ID>MagicNumber:Color.kt$0xFF1C1C1E</ID>
    <ID>MagicNumber:Color.kt$0xFF1D3944</ID>
    <ID>MagicNumber:Color.kt$0xFF30313D</ID>
    <ID>MagicNumber:Color.kt$0xFF33DDB3</ID>
    <ID>MagicNumber:Color.kt$0xFF6A7383</ID>
    <ID>MagicNumber:Color.kt$0xFFA3ACBA</ID>
    <ID>MagicNumber:Color.kt$0xFFE0E6EB</ID>
    <ID>MagicNumber:Color.kt$0xFFEBEEF1</ID>
    <ID>MagicNumber:Color.kt$0xFFEFF2F4</ID>
    <ID>MagicNumber:Color.kt$0xFFF6F8FA</ID>
    <ID>MagicNumber:Color.kt$0xFFFF2F4C</ID>
    <ID>MagicNumber:DefaultLinkEventsReporter.kt$DefaultLinkEventsReporter$1000f</ID>
    <ID>MagicNumber:PaymentDetails.kt$0.6f</ID>
    <ID>MagicNumber:PaymentMethodBody.kt$0.6f</ID>
    <ID>MagicNumber:VerificationScreen.kt$200</ID>
    <ID>MagicNumber:VerificationViewModel.kt$VerificationViewModel$10</ID>
    <ID>MagicNumber:VerificationViewModel.kt$VerificationViewModel$50</ID>
    <ID>MagicNumber:WalletScreen.kt$180f</ID>
    <ID>MatchingDeclarationName:ErrorText.kt$ErrorTextStyle</ID>
    <ID>MatchingDeclarationName:LinkLogoutSheet.kt$LinkLogoutMenuItem : LinkMenuItem</ID>
    <ID>MatchingDeclarationName:LinkMenu.kt$LinkMenuItem</ID>
    <ID>MatchingDeclarationName:PrimaryButton.kt$PrimaryButtonState</ID>
    <ID>MatchingDeclarationName:WalletPaymentMethodMenu.kt$WalletPaymentMethodMenuItem : LinkMenuItem</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$delegate ?: throw IllegalStateException("Cannot move to state $newState since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:InjectableActivityScenario.kt$InjectableActivityScenario$val d = delegate ?: throw IllegalStateException("Cannot run onActivity since the activity hasn't been launched.")</ID>
    <ID>MaxLineLength:StripeIntentFixtures.kt$StripeIntentFixtures$url</ID>
    <ID>MayBeConst:LinkPaymentLauncher.kt$LinkPaymentLauncher.Companion$val LINK_ENABLED = false</ID>
    <ID>TooManyFunctions:DefaultLinkEventsReporter.kt$DefaultLinkEventsReporter : LinkEventsReporter</ID>
    <ID>TooManyFunctions:LinkAccountManager.kt$LinkAccountManager</ID>
    <ID>TooManyFunctions:LinkApiRepository.kt$LinkApiRepository : LinkRepository</ID>
    <ID>TooManyFunctions:LinkEventsReporter.kt$LinkEventsReporter</ID>
    <ID>TooManyFunctions:LinkPaymentLauncherComponent.kt$LinkPaymentLauncherComponent$Builder</ID>
    <ID>TooManyFunctions:LinkRepository.kt$LinkRepository</ID>
    <ID>TooManyFunctions:PaymentMethodViewModel.kt$PaymentMethodViewModel : ViewModel</ID>
    <ID>TooManyFunctions:WalletViewModel.kt$WalletViewModel : ViewModel</ID>
    <ID>TopLevelPropertyNaming:PrimaryButton.kt$internal const val completedIconTestTag = "CompletedIcon"</ID>
    <ID>TopLevelPropertyNaming:PrimaryButton.kt$internal const val progressIndicatorTestTag = "CircularProgressIndicator"</ID>
    <ID>UnnecessaryAbstractClass:LinkComponent.kt$LinkComponent$LinkComponent</ID>
    <ID>UnusedPrivateMember:ErrorText.kt$@Preview @Composable private fun ErrorTextPreview()</ID>
    <ID>UnusedPrivateMember:LinkAppBar.kt$@Preview @Composable private fun LinkAppBarPreview()</ID>
    <ID>UnusedPrivateMember:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_ChildScreen()</ID>
    <ID>UnusedPrivateMember:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_ChildScreen_NoEmail()</ID>
    <ID>UnusedPrivateMember:LinkAppBar.kt$@Preview @Composable private fun LinkAppBar_NoEmail()</ID>
    <ID>UnusedPrivateMember:LinkTerms.kt$textAlign: TextAlign = TextAlign.Center</ID>
    <ID>UnusedPrivateMember:PaymentMethodBody.kt$@Preview @Composable private fun PaymentMethodBodyPreview()</ID>
    <ID>UnusedPrivateMember:PaymentMethodViewModelTest.kt$PaymentMethodViewModelTest$private fun createFinancialConnectionsAccount(id: String = "id")</ID>
    <ID>UnusedPrivateMember:SignUpScreen.kt$@Preview @Composable private fun SignUpBodyPreview()</ID>
    <ID>UnusedPrivateMember:VerificationScreen.kt$@Preview @Composable private fun VerificationBodyPreview()</ID>
    <ID>UnusedPrivateMember:WalletScreen.kt$@Preview @Composable private fun WalletBodyPreview()</ID>
  </CurrentIssues>
</SmellBaseline>
