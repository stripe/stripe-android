plugins {
    id "com.android.library"
    id "kotlin-android"
    id 'kotlin-kapt'
    id 'org.jetbrains.dokka'
    id "org.jetbrains.kotlin.plugin.parcelize"
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.10'
}

assemble.dependsOn('lint')
check.dependsOn('checkstyle')

configurations {
    ktlint
}

if (System.getenv("JITPACK")) {
    group = 'com.github.stripe.stripe-android'
}

dependencies {
    implementation project(':payments-core')

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation libraries.androidx.appcompat
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation libraries.androidx.lifecycle.livedata.ktx
    implementation libraries.androidx.lifecycle.viewmodel.ktx
    implementation "com.google.android.material:material:$materialVersion"

    implementation "androidx.compose.ui:ui:$composeVersion"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:$composeVersion"
    // Material Design
    implementation "androidx.compose.material:material:$composeVersion"
    // Material design icons
    implementation "androidx.compose.material:material-icons-core:$composeVersion"
    // Integration with activities
    implementation "androidx.activity:activity-compose:$composeActivityVersion"
    implementation("androidx.navigation:navigation-compose:2.4.0-rc01")
    // Integration with observables
    implementation "androidx.compose.runtime:runtime-livedata:$composeVersion"
    implementation "com.google.accompanist:accompanist-flowlayout:0.20.3"
    implementation "androidx.compose.ui:ui-tooling-preview:$composeVersion"
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'


    testImplementation "junit:junit:$junitVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "org.mockito:mockito-core:$mockitoCoreVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoCoreVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.test:core:$androidTestVersion"

    androidTestImplementation "com.google.truth:truth:$truthVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidTestJunitVersion"
    // Test rules and transitive dependencies:
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$composeVersion"

    // Tooling support (Previews, etc.)
    debugImplementation "androidx.compose.ui:ui-tooling:$composeVersion"
    // Needed for createComposeRule, but not createAndroidComposeRule:
    debugImplementation("androidx.compose.ui:ui-test-manifest:$composeVersion")

    ktlint "com.pinterest:ktlint:$ktlintVersion"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion rootProject.ext.compileSdkVersion

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

        // From https://developer.android.com/training/testing/junit-runner:
        // > To remove all shared state from your device"s CPU and memory after each test,
        // > use the clearPackageData flag.
        testInstrumentationRunnerArguments clearPackageData: "true"
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }

    buildFeatures {
        compose = true
    }

    testOptions {
        unitTests {
            // Note: without this, all Robolectric tests using assets will fail.
            includeAndroidResources = true
            all {
                maxHeapSize = "1024m"
            }
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion "$composeVersion"
    }

    dokkaHtml {
        outputDirectory = new File("${project.rootDir}/docs/$project.name")
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    mainClass = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    mainClass = "com.pinterest.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

//ext {
//    artifactId = "link"
//    artifactName = "link"
//    artifactDescrption = "The Link module of Stripe Payment Android SDK"
//}
//
//apply from: "${rootDir}/deploy/deploy.gradle"
